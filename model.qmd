::: {.content-visible when-profile="french"}

# Gestion des accès aux données stockées en base de données

Les classes permettant le dialogue avec la base de données sont stockées dans `app/Models`. Elles héritent toutes de la classe `PpciModel`, qui encapsule l'ensemble des fonctions d'accès et de mise à jour.

PpciModel s'appuie autant que faire se peut sur les mécanismes intrinsèques de CodeIgniter. Toutefois, certaines fonctions d'écriture ont été réécrites pour mieux maîtriser les opérations réalisées dans la base de données.

## Initialiser une classe

Lors de l'initialisation d'une classe d'accès à une table, plusieurs paramètres sont à renseigner :

*   le nom de la table
*   la liste des colonnes avec, pour chacune, si elle doit être fournie (obligatoire), son type, s'il s'agit de la clé primaire de la table, la valeur par défaut en cas de création d'un nouvel enregistrement, et si l'attribut est une clé étrangère vers le parent de l'enregistrement courant
*   si la clé primaire est générée automatiquement ou pas par la base de données.

Exemple :

:::
::: {.content-visible when-profile="english"}
# Managing access to data stored in the database

The classes that allow dialog with the database are stored in `app/Models`. They all inherit from the `PpciModel` class, which encapsulates all access and update functions.

PpciModel relies as much as possible on the intrinsic mechanisms of CodeIgniter. However, some writing functions have been rewritten to better control the operations performed in the database.

## Initialize a class

When initializing a table access class, several parameters must be provided:

* the name of the table
* the list of columns with, for each, whether it must be provided (mandatory), its type, whether it is the primary key of the table, the default value in case of creation of a new record, and whether the attribute is a foreign key to the parent of the current record
* whether the primary key is generated automatically or not by the database.

Example:
:::

```php
namespace App\Models;

use Ppci\Models\PpciModel;

class Peche extends PpciModel
{
    public array $warning = array();

    public function __construct()
    {
        $this->table = "peche";
        $this->fields = array(
            "peche_id" => array(
                "type" => 1,
                "key" => 1,
                "requis" => 1,
                "defaultValue" => 0
            ),
            "trait_id" => array(
                "type" => 1,
                "requis" => 1,
                "parentAttrib" => 1
            ),
            "uuid" => array(
                "type" => 0,
                "defaultValue" => $this->getUUID()
            ),
        );
        parent::__construct();
    }
}
```

::: {.content-visible when-profile="french"}
### Description des champs

| Attribut | Valeur |
| --- | --- |
| type | 0 : chaîne de caractères 1: numérique 2: date 3: date-heure 4: champ géographique (Postgis) |
| key | Si 1, c'est la clé primaire de la table |
| requis | Si 1, l'enregistrement échouera si la colonne n'est pas fournie ou est vide |
| parentAttrib | Si 1, la colonne est la clé étrangère, dans le cas d'une relation père-fils |
| defaultValue | La valeur par défaut, lors de la création d'un enregistrement. |

Par convention, pour tout nouvel enregistrement, la clé primaire prend la valeur 0.

### Traitement des dates

Les dates sont automatiquement transformées dans le format courant de la langue utilisée, tant pour les sélections que pour les mises à jour. Lors de l'initialisation de la classe, les tableaux  `$this->dateFields` et `$this->datetimeFields` sont renseignés à partir des informations déclarées. Il est possible de les compléter ponctuellement avant d'exécuter un `select` pour que des champs dates externes à la table, dans le cadre de jointures, soient également formatés.

S'il est nécessaire de désactiver le formatage des date, il suffit d'indiquer :

```php
$this->autoformatDate = false;
```

### Traitement des champs numériques

Par défaut, avant une mise à jour, les nombres sont traités pour remplacer la virgule par le point. Si ce mécanisme doit être désactivé, il suffit d'indiquer :

```php
$this->transformComma = false;
```

### Enregistrement des messages d'informations, traitement des erreurs

La classe intègre nativement la classe `Message`, qui permet d'envoyer des informations au navigateur ou d'enregistrer des messages d'erreur dans les logs du serveur (syslog). Elle est accessible _via_ `$this->message->set(...);`

Les erreurs d'exécution déclenchent une exception `PpciException`.

## Fonctions génériques disponibles

### Exécution des requêtes

`protected function executeQuery(string $sql, array $data = null, $onlyExecute = false)`

Synonyme : `public function executeSQL(string $sql, array $data = null, $onlyExecute = false)`

Exécute la requête $sql, avec le tableau de variables $data. Si `$onlyExecute` est à _false_, la fonction retourne un tableau de résultat. Les requêtes de modification doivent impérativement avoir cette dernière variable à _true_.

### Écriture d'un enregistrement

### `public function write(array $row): int`

Synonyme : `public function ecrire(array $row): int`

Enregistre une ligne ($row) dans la base de données. La fonction gère automatiquement l'insertion ou la mise à jour.

Pour les champs géographiques, ceux-ci sont enregistrés avec la fonction `ST_GeomFromText`.

Retour : la clé primaire de l'enregistrement traité.

### Écriture d'un enregistrement dans une table n-n

`function writeTableNN(string $tablename, string $firstKey, string $secondKey, int $id, $data = array()): void`

Synonyme : `function ecrireTableNN(string $tablename, string $firstKey, string $secondKey, int $id, $data = array()): void`

Cette fonction traite le cas de l'enregistrement dans le cas d'une table n-n, c'est à dire liée à deux parents. Elle est typiquement utilisée pour traiter les valeurs multiples (sélection des membres dans un groupe, par exemple).

Elle va enregistrer dans `$tablename`, pour la clé correspondant au parent principal (`$firstKey`), l'ensemble des valeurs correspondant à la table liée (`$secondKey`), fournies sous forme de tableau (`$data`). La fonction va supprimer automatiquement toutes les valeurs pré-existantes qui ne figurent pas dans le tableau fourni.

### Mise à jour d'un champ binaire

`function updateBinary(int $id, string $fieldName, $data)`

La fonction va écrire un contenu binaire dans la colonne `$fieldName` pour l'enregistrement identifié par la clé primaire `$id`. Dans la pratique, elle utilise la fonction php _pg\_escape\_bytea_.

### Suppression d'un enregistrement

`function delete($id = null, bool $purge = false)`

Synonyme : `function supprimer($id)`

Supprime l'enregistrement `$id`. La valeur `$purge` ne sert à rien, elle est conservée pour des raisons de compatibilité avec les classes CodeIgniter.

### Suppression d'un ou plusieurs enregistrements à partir d'un champ quelconque

`function deleteFromField(int $id, string $field)`

Synonyme : `function supprimerChamp(int $id, string $field)`

Cette fonction est utilisée pour supprimer les enregistrements enfants à partir d'un parent. Elle supprime tous les enregistrements dont le champ `$field` qui contient la valeur `$id`.

### Lecture d'un enregistrement

`public function read(int $id, bool $getDefault = true, $parentKey = 0): array`

Synonyme : `public function lire(int $id, bool $getDefault = true, $parentKey = 0): array`

Llt l'enregistrement dont la clé primaire vaut `$id`. Si `$id` vaut 0 ou est vide (nouvel enregistrement), et que `$getDefault` est positionné à _true_, le tableau retourné contiendra les valeurs par défaut définies dans le constructeur de la classe. Si `$parentKey` est défini, la clé étrangère du parent est également positionnée dans les valeurs par défaut.

### Données par défaut

`public function getDefaultValues($parentKey = 0): array`

Crée un tableau contenant l'ensemble des valeurs par défaut, pour un nouvel enregistrement. 

### Lecture d'un enregistrement à partir d'un code SQL fourni

`public function readParam(string $sql, array $param = null)`

Synonymes : 

`public function readParamAsPrepared(string $sql, array $param = null)`

`public function lireParam(string $sql, array $param = null)`

`public function lireParamAsPrepared(string $sql, array $param = null)`

Retourne un enregistrement correspondant au code SQL fourni (le premier enregistrement rencontré si une liste est retournée par la requête). Les variables utilisées dans la requête doivent être fournies dans le tableau _$param_.

### Liste de tous les enregistrements de la table

`public function getList(string $order = ""): array`

Synonyme : `function getListe(string $order = ""): array`

Exécute un `select *` sur la table, en rajoutant le cas échéant le terme `order by $order` si la variable est renseignée.

### Sélection d'enregistrements

`function getListParam(string $sql, array $param = null): array`

Synonymes :

`function getListeParam(string $sql, array $param = null): array`

`function getListeParamAsPrepared(string $sql, array $param = null): array`

Retourne le résultat de la requête. Les variables utilisées pour celle-ci sont fournies dans le tableau _$param_.

### Liste des enregistrements rattachés à un parent

`function getListFromParent(int $parentId, $order = ""): array`

Retourne la liste des enregistrements enfants dont la clé étrangère vaut _$parentId_, triée ou non.

:::

::: {.content-visible when-profile="english"}
### Field Description

| Attribute | Value |
| --- | --- |
| type | 0: string 1: numeric 2: date 3: date-time 4: geographic field (Postgis) |
| key | If 1, it is the primary key of the table |
| required | If 1, the record will fail if the column is not provided or is empty |
| parentAttrib | If 1, the column is the foreign key, in the case of a parent-child relationship |
| defaultValue | The default value, when creating a record. |

By convention, for any new record, the primary key takes the value 0.

### Date processing

Dates are automatically transformed into the current format of the language used, both for selections and updates. When initializing the class, the `$this->dateFields` and `$this->datetimeFields` tables are populated from the declared information. It is possible to complete them punctually before executing a `select` so that date fields external to the table, as part of joins, are also formatted.

If it is necessary to disable date formatting, simply indicate:

```php
$this->autoformatDate = false;
```

### Numerical field processing

By default, before an update, numbers are processed to replace the comma with a period. If this mechanism must be disabled, simply indicate:

```php
$this->transformComma = false;
```

### Logging information messages, error handling

The class natively integrates the `Message` class, which allows you to send information to the browser or log error messages in the server logs (syslog). It is accessible _via_ `$this->message->set(...);`

Execution errors trigger a `PpciException` exception.

## Generic functions available

### Execution of queries

`protected function executeQuery(string $sql, array $data = null, $onlyExecute = false)`

Synonym: `public function executeSQL(string $sql, array $data = null, $onlyExecute = false)`

Executes the $sql query, with the $data variable array. If `$onlyExecute` is _false_, the function returns a result array. Modification requests must have this last variable set to _true_.

### Writing a record

### `public function write(array $row): int`

Synonym: `public function ecrire(array $row): int`

Saves a row ($row) in the database. The function automatically handles the insertion or update.

For geographic fields, these are saved with the `ST_GeomFromText` function.

Return: the primary key of the processed record.

### Writing a record in an n-n table

`function writeTableNN(string $tablename, string $firstKey, string $secondKey, int $id, $data = array()): void`

Synonym: `function ecrireTableNN(string $tablename, string $firstKey, string $secondKey, int $id, $data = array()): void`

This function handles the case of recording in the case of an n-n table, i.e. linked to two parents. It is typically used to process multiple values ​​(selection of members in a group, for example).

It will record in `$tablename`, for the key corresponding to the main parent (`$firstKey`), all the values ​​corresponding to the linked table (`$secondKey`), provided in the form of an array (`$data`). The function will automatically delete all pre-existing values ​​that are not in the provided array.

### Updating a binary field

`function updateBinary(int $id, string $fieldName, $data)`

The function will write a binary content in the column `$fieldName` for the record identified by the primary key `$id`. In practice, it uses the php function _pg\_escape\_bytea_.

### Deleting a record

`function delete($id = null, bool $purge = false)`

Synonym: `function delete($id)`

Deletes the record `$id`. The value `$purge` is useless, it is kept for compatibility reasons with CodeIgniter classes.

### Deleting one or more records from any field

`function deleteFromField(int $id, string $field)`

Synonym: `function deleteField(int $id, string $field)`

This function is used to delete child records from a parent. It deletes all records whose field `$field` contains the value `$id`.

### Reading a record

`public function read(int $id, bool $getDefault = true, $parentKey = 0): array`

Synonym: `public function lire(int $id, bool $getDefault = true, $parentKey = 0): array`

Read the record whose primary key is `$id`. If `$id` is 0 or empty (new record), and `$getDefault` is set to _true_, the returned array will contain the default values ​​defined in the class constructor. If `$parentKey` is set, the parent's foreign key is also set in the default values.

### Default data

`public function getDefaultValues($parentKey = 0): array`

Creates an array containing all the default values, for a new record.

### Read a record from a provided SQL code

`public function readParam(string $sql, array $param = null)`

Synonyms:

`public function readParamAsPrepared(string $sql, array $param = null)`

`public function lireParam(string $sql, array $param = null)`

`public function lireParamAsPrepared(string $sql, array $param = null)`

Returns a record matching the provided SQL code (the first record encountered if a list is returned by the query). Variables used in the query must be provided in the _$param_ array.

### List of all records in the table

`public function getList(string $order = ""): array`

Synonym: `function getListe(string $order = ""): array`

Executes a `select *` on the table, adding the term `order by $order` if the variable is specified.

### Selecting records

`function getListParam(string $sql, array $param = null): array`

Synonyms:

`function getListeParam(string $sql, array $param = null): array`

`function getListeParamAsPrepared(string $sql, array $param = null): array`

Returns the result of the query. The variables used for it are provided in the _$param_ array.

### List of records attached to a parent

`function getListFromParent(int $parentId, $order = ""): array`

Returns the list of child records whose foreign key is _$parentId_, sorted or not.
:::

::: {.content-visible when-profile="french"}
## Fonctions diverses

### Formater les dates au format de la base de données

`protected function formatDatesToDB(array $row): array`

Transforme les dates contenues dans l'enregistrement, en fonction du type (date, date/heure) et du format courant.

### Générer un UUID

`function getUUID(): string`

Execute une fonction dans la base de données pour générer un UUID.

### Obtenir la date-heure courante

`function getDateTime(): string`

`function getDateHeure(): string`

### Obtenir la date courante

`function getDate(): string`

`function getDateJour(): string`

### Désactiver un champ obligatoire

`function disableMandatoryField(string $name)`

Désactive la valeur _champ obligatoire_ pour un champ. Cette fonction peut être utilisée pour mettre à jour un enregistrement dont on sait par avance que la valeur n'est pas fournie.

:::

::: {.content-visible when-profile="english"}
## Miscellaneous functions

### Format dates to database format

`protected function formatDatesToDB(array $row): array`

Transforms dates contained in the record, based on the type (date, date/time) and the current format.

### Generate a UUID

`function getUUID(): string`

Executes a function in the database to generate a UUID.

### Get the current date-time

`function getDateTime(): string`

`function getDateHeure(): string`

### Get the current date

`function getDate(): string`

`function getDateJour(): string`

### Disable a mandatory field

`function disableMandatoryField(string $name)`

Disables the _mandatory field_ value for a field. This function can be used to update a record for which it is known in advance that the value is not provided.
:::