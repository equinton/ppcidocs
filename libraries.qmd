::: {.content-visible when-profile="french"}

# Bibliothèques

Le code "actif" de l'application, c'est à dire celui qui enchaîne les actions, est décrit dans les bibliothèques (librairies). En général, on retrouve une librairie par table, mais ce n'est pas systématique.

Les librairies héritent systématiquement de PpciLibrary, et contiennent en général les fonction suivantes :

*   list : affichage de la liste des enregistrements de la table
*   display : affichage du détail d'un enregistrement
*   change : affichage de la page de modification
*   write : écriture en base de données
*   delete : suppression de l'enregistrement.

Selon le cas, _write_ et _delete_ renvoient soit vers _display_, soit vers _list_ et, en cas de problème, la fonction recharge la page _change_.

Dans certains cas, notamment quand les fonctions peuvent être appelées depuis des endroits différents dans l'application, les fonctions renvoient simplement la valeur _true_ ou  _false_, et c'est le contrôleur qui se chargera d'appeler la fonction d'affichage, notamment après les opérations d'enregistrement.

## La classe PpciLibrary

Elle gère l'accès direct à quelques services :

*   `$this->message` : affichage de messages à l'écran et enregistrement de messages techniques dans Syslog
*   `$this->appConfig` : accès aux paramètres de configuration stockés dans _app/Config/App.php_ ou mis à jour par l'intermédiaire de _.env_
*   `$this->log` : enregistrement de traces dans la table _gacl.log_ de la base de données.

Pour qu'elle fonctionne correctement, elle doit être initialisée ainsi : 

:::

::: {.content-visible when-profile="english"}
# Libraries

The "active" code of the application, that is to say the one that chains the actions, is described in the libraries. In general, there is one library per table, but this is not systematic.

The libraries systematically inherit from PpciLibrary, and generally contain the following functions:

* list: display the list of records in the table
* display: display the details of a record
* change: display the modification page
* write: write to the database
* delete: delete the record.

Depending on the case, _write_ and _delete_ refer either to _display_ or to _list_ and, in case of problem, the function reloads the _change_ page.

In some cases, especially when functions can be called from different places in the application, functions simply return the value _true_ or _false_, and the controller will call the display function, especially after recording operations.

## The PpciLibrary class

It manages direct access to some services:

* `$this->message`: display messages on the screen and record technical messages in Syslog
* `$this->appConfig`: access to configuration parameters stored in _app/Config/App.php_ or updated via _.env_
* `$this->log`: record traces in the _gacl.log_ table of the database.

For it to work properly, it must be initialized as follows:

:::

```php
function __construct()
    {
        parent::__construct();
        $this->dataclass = new ModelsBorrower();
        $this->keyName = "borrower_id";
        if (isset($_REQUEST[$this->keyName])) {
            $this->id = $_REQUEST[$this->keyName];
        }
    }
```
::: {.content-visible when-profile="french"}

_$this->dataclass_ doit être une classe héritée de _PpciModel_. 

Elle dispose également de fonctions génériques, qui permettent de simplifier l'écriture des classes dans l'application. Celles-ci déclenchent systématiquement une exception _PpciException_ en cas d'erreur rencontrée.

### Lecture d'un enregistrement et affichage de la page pour la modification ou l'affichage

`function dataRead($id, $smartyPage, $idParent = 0)`

La fonction appelle `$this->dataclass->read ($id, true, $idParent)`, affecte le tableau de données lu à la variable `$data`, puis déclenche l'affichage de la page `$smartyPage`. Elle retourne le tableau `$data` à la fonction appelante.

### Écriture d'un enregistrement

`function dataWrite(array $data, bool $isPartOfTransaction = false)`

Écrit les données `$data` dans la table gérée par `$this->dataclass` (appel à la fonction _write_). Si l'indicateur de transaction n'est pas activé, un message informant de l'exécution de la commande est envoyé, et une trace est enregistrée dans la table _log_.

### Suppression d'un enregistrement

`function dataDelete($id, bool $isPartOfTransaction = false)`

Supprime l'enregistrement identifié par `$id`, et affiche un message pour informer de la réussite de l'opération si l'indicateur de transaction n'est pas activé.

## Traitement des transactions

Dans le cas où plusieurs écritures concommittantes sont nécessaires, il est possible d'activer les transactions, gérées par CodeIgniter, avec les commandes suivantes :

:::

::: {.content-visible when-profile="english"}

_$this->dataclass_ must be a class inherited from _PpciModel_.

It also has generic functions, which simplify the writing of classes in the application. These systematically raise a _PpciException_ exception if an error is encountered.

### Reading a record and displaying the page for modification or display

`function dataRead($id, $smartyPage, $idParent = 0)`

The function calls `$this->dataclass->read ($id, true, $idParent)`, assigns the read data array to the variable `$data`, then triggers the display of the page `$smartyPage`. It returns the `$data` array to the calling function.

### Writing a record

`function dataWrite(array $data, bool $isPartOfTransaction = false)`

Writes the data `$data` to the table managed by `$this->dataclass` (call to the _write_ function). If the transaction flag is not enabled, a message informing of the execution of the command is sent, and a trace is recorded in the _log_ table.

### Deleting a record

`function dataDelete($id, bool $isPartOfTransaction = false)`

Deletes the record identified by `$id`, and displays a message to inform of the success of the operation if the transaction flag is not enabled.

## Transaction processing

In the case where several concurrent writes are necessary, it is possible to activate the transactions, managed by CodeIgniter, with the following commands:

:::

```php
try {
   /*
    * Start transaction
    */
   $db = $this->dataclass->db;
   $db->transBegin();
   (...)
   $db->transCommit();
   } catch (PpciException $ie) {
     if ($db->transEnabled) {
     $db->transRollback();
     (...)
   }
```
