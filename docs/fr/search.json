[
  {
    "objectID": "legal_notice.html",
    "href": "legal_notice.html",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "",
    "text": "Nom du site : documentation PPCI\nURL complète du site : https://equinton.github.io/ppcidocs/"
  },
  {
    "objectID": "legal_notice.html#identification-du-site",
    "href": "legal_notice.html#identification-du-site",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "",
    "text": "Nom du site : documentation PPCI\nURL complète du site : https://equinton.github.io/ppcidocs/"
  },
  {
    "objectID": "legal_notice.html#éditeurs-du-site",
    "href": "legal_notice.html#éditeurs-du-site",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "Éditeur(s) du site",
    "text": "Éditeur(s) du site\nINRAE - Institut national de recherche pour l’agriculture, l’alimentation et l’environnement\nINRAE est un établissement public à caractère scientifique et technologique. Il a son siège au 147, rue de l’université – 75338 Paris cedex 07. Ses statuts sont publiés dans le code rural et de la pêche maritime (articles R831-1 et suivants).\nIl est représenté par son Président Directeur général, M. Philippe MAUGUIN.\nContact mail: web@inrae.fr - contact téléphonique: 01 42 75 90 00"
  },
  {
    "objectID": "legal_notice.html#numéros-didentification",
    "href": "legal_notice.html#numéros-didentification",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "Numéros d’identification",
    "text": "Numéros d’identification\nINRAE SIREN: 180070039\nCode APE: 7219Z\nNuméro de TVA intracommunautaire: FR 57 1800700039"
  },
  {
    "objectID": "legal_notice.html#publication-du-site",
    "href": "legal_notice.html#publication-du-site",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "Publication du site",
    "text": "Publication du site\nNom du directeur de publication : M. Philippe MAUGUIN\nNom du responsable de rédaction : Éric Quinton\nWebmaster du site : Éric Quinton"
  },
  {
    "objectID": "legal_notice.html#hébergeur-du-site",
    "href": "legal_notice.html#hébergeur-du-site",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "Hébergeur du site",
    "text": "Hébergeur du site\nINRAE Établissement public à caractère scientifique et technologique 147, rue de l’université – 75338 Paris cedex 07 01 42 75 90 00\nCopyright © 2024 - All rights reserved. Author: Éric Quinton for EABX-INRAE. Documentation distributed under license  CC-BY"
  },
  {
    "objectID": "migration.html",
    "href": "migration.html",
    "title": "Migration depuis PrototypePhp",
    "section": "",
    "text": "Créez un dossier différent de celui qui contient le code initial de l’application à migrer, par exemple app2, puis, depuis le répertoire de niveau inférieur :\ncomposer create-project codeigniter4/appstarter app2\ncd app2\ncomposer require equinton/ppci\nvendor/equinton/ppci/install/install.sh\nÉditez ensuite le fichier .env, et mettez à jour les paramètres nécessaires (CI_ENVIRONMENT, app.baseURL et les paramètres de connexion à la base de données).\n\n\n\nVoici un exemple de configuration :\n&lt;VirtualHost *:80&gt;\n    ServerName app2.local\n    ServerPath /app2.local\n    RewriteEngine On\n    RewriteRule ^ https://app2.local%{REQUEST_URI} [R]\n&lt;/VirtualHost&gt;\n&lt;VirtualHost *:443&gt;\n    ServerName app2.local\n    ServerPath /app2.local\n    SSLEngine on\n    SSLCertificateFile  /etc/ssl/certs/server.crt\n    SSLCertificateKeyFile /etc/ssl/private/server.key\n    SSLCACertificateFile /etc/ssl/certs/cacert.crt\n    DocumentRoot /var/www/app2/public \n&lt;/VirtualHost&gt;\n&lt;Directory /var/www/app2/public&gt;\n    &lt;LimitExcept GET POST&gt;\n        Deny from all\n    &lt;/LimitExcept&gt;\n    Options -Indexes FollowSymLinks MultiViews\n    Header unset ETag\n    Header set Cache-Control \"max-age=0, no-cache, no-store, must-revalidate, private\"\n    Header set Pragma \"no-cache\"\n    Header set X-Frame-Options \"DENY\"\n    Header set X-XSS-Protection \"1; mode=block\"\n    Header set X-Content-Type-Options \"nosniff\"\n    Header always set Strict-Transport-Security \"max-age=63072000; includeSubdomains;\"\n    Header always set Content-Security-Policy \"default-src 'self' ; script-src blob: * 'self' 'unsafe-inline' 'unsafe-eval'; connect-src data: blob: filesystem: *.tile.openstreetmap.org 'self' ; img-src 'self' data: blob: *.openstreetmap.org ; style-src 'self' 'unsafe-inline' ;\"\n    &lt;FilesMatch \"\\.(ico|flv|jpg|jpeg|png|gif|js|css|svg)$\"&gt;\n        Header set Cache-Control \"max-age=604800, private\"\n    &lt;/FilesMatch&gt;\n&lt;FilesMatch \".*openstreetmap.*\\.png$\"&gt;\n    Header set Cache-Control \"max-age=2592000, public\"\n&lt;/FilesMatch&gt;\n    Require all granted\n    AllowOverride all\n    RewriteEngine On\n    RewriteBase /\n    RewriteCond \"/%{REQUEST_FILENAME}\" !-f\n    RewriteCond \"/%{REQUEST_FILENAME}\" !-d\n    RewriteRule \"(.*)\" \"/index.php?$1\" [PT,QSA]\n&lt;/Directory&gt;\n\n\n\nÉditez le fichier vendor/equinton/ppci/migration/updatedb.sql, et vérifiez la première ligne (set search_path), en remplaçant app par le nom du schéma contenant les données.\nExécutez ensuite le fichier sql.\n\n\n\nÉditez le fichier app/Config/menu.xml, et rajoutez les entrées nécessaires.\n\n\n\nRecopiez les modèles Smarty depuis display/templates dans app/Views/templates en conservant l’organisation en sous-dossiers, à l’exception des fichiers à la racine et du sous-dossier framework.\n\n\nDans ce dossier, remplacez tous les libellés (filtre sur *tpl) :\n\n&lt;/form&gt; par {$csrf}&lt;/form&gt; pour ajouter le jeton CSRF dans les formulaires\ndroits par rights\n.gestion par .manage\ndatatable\" par datatable display\"\ndatatable-nopaging-nosearching\" par datatable-nopaging-nosearching display\"\ndatatable-searching\" par datatable-searching display\"\ndatatable-nopaging\" par datatable-nopaging display\"\ndatatable-nopaging-nosort\" par datatable-nopaging-nosort display\"\ndatatable-nosort\" par datatable-nosort display\"\ndatatable-export\" par datatable-export display\"\ndatatable-export-paging\" par datatable-export-paging display\"\n\nSupprimez\n\nindex.php?module=\n\n\n\n\nReprenez tous les liens (recherchez les balises a href) et remplacez le premier & par ?\nModifiez toutes les actions des formulaires, pour qu’ils aient cette forme :\n&lt;form class=\"form-horizontal\" id=\"formName\" method=\"post\" action=\"moduleWrite\"&gt;\n&lt;input type=\"hidden\" name=\"moduleBase\" value=\"module\"&gt;\nLe champ action peut être supprimé. Par contre, le champ moduleBase doit être conservé : il est utilisé pour créer l’action moduleDelete par l’intermédiaire du script javascript dans main_js.tpl.\n\n\n\n\nRecopier les fichiers depuis modules/classes vers app/Models.\n\n\nElles peuvent être effectuées par rechercher/remplacer.\n\nremplacer :\n\n&lt;?php par &lt;?php namespace App\\Models;use Ppci\\Models\\PpciModel;, avec sauts de ligne ;\nextends ObjetBDD par extends PpciModel ;\n(public function __construct().*) par public function __construct(), en cochant expression régulière ;\n$this-&gt;colonnes par $this-&gt;fields ;\nfunction ecrire par function write\nfunction lire par function read\nparent::ecrire par parent::write\n(parent::__construct().*) par parent::__construct(), en cochant expression régulière ;\n$this-&gt;id_auto = 0 par $this-&gt;useAutoIncrement = false\nauto_date = 0 par autoFormatDate = false\n\nsupprimer :\n\n$this-&gt;id_auto = 1;\n$param[\"fullDescription\"] = 1;\n$this-&gt;param = $param;\n\n\n\n\n\n\nrenommer le nom du fichier, par exemple espece.class.php en Espece.php ;\ndans les requêtes SQL, modifier les variables en rajoutant : à la fin : :id doit devenir :id: ;\npour les tables portant des données géographiques (champs avec type=4), modifier les requêtes ou créer les fonctions lire() pour ajouter st_astext() pour les champs concernés ;\nles transformations de dates pour les champs non présents dans la table doivent être réécrites selon ce schéma :\n\n$this-&gt;dateFields[] = \"peche_date\";\n$this-&gt;datetimeFields[] = \"peche_datetime\";\n\nsi la fonction utf8_encode est utilisée, elle doit être remplacée par :\n\n$data = mb_convert_encoding($data, 'UTF-8', 'ISO-8859-15, ISO-8859-1, Windows-1252');\nLa fonction traite indistinctement les chaînes ou les tableaux.\n\n\n\n\nRecopier l’ensemble des modules dans app/Libraries. Il faut les transformer en classes.\n\n\nRemplacer :\n\n&lt;?php par :\n\n&lt;?php \nnamespace App\\Libraries;\n\nuse Ppci\\Libraries\\PpciException;\nuse Ppci\\Libraries\\PpciLibrary;\nuse Ppci\\Models\\PpciModel;\n\nclass Xx extends PpciLibrary { \n    /**\n     * @var xx\n     */\n    protected PpciModel $dataclass;\n    private $keyName;\n\n    function __construct()\n    {\n        parent::__construct();\n        $this-&gt;dataclass = new XXX();\n        $keyName = \"xxx_id\";\n        if (isset($_REQUEST[$this-&gt;keyName])) {\n            $this-&gt;id = $_REQUEST[$this-&gt;keyName];\n        }\n    }\n\ndataRead($dataclass, par $this-&gt;dataRead(\ndataDelete($dataclass, par $this-&gt;dataDelete(\ncase \"list\": par function list(){$vue=service('Smarty'); (saut de ligne)\ncase \"display\": par function display(){$vue=service('Smarty'); (saut de ligne)\ncase \"change\": par function change(){$vue=service('Smarty'); (saut de ligne)\ncase \"write\": par\n\n    function write() {\n    try {\n            $this-&gt;id = $this-&gt;dataWrite($_REQUEST);\n            if ($this-&gt;id &gt; 0) {\n                $_REQUEST[$this-&gt;keyName] = $this-&gt;id;\n                return $this-&gt;display();\n            } else {\n                return $this-&gt;change();\n            }\n        } catch (PpciException) {\n            return $this-&gt;change();\n        }\n    }\n\ncase \"delete\": par function delete(){\ncase \" par function\n\": par () {\nbreak; par } : fermeture des fonctions\n$dataclass par $this-&gt;dataclass\n$id par $this-&gt;id\n$vue par $this-&gt;vue\n$this-&gt;dataDelete($this-&gt;id); par\n\n        try {\n            $this-&gt;dataDelete($this-&gt;id);\n            return $this-&gt;list();\n        } catch (PpciException $e) {\n            return $this-&gt;change();\n        }\n\n$this-&gt;dataWrite( $_REQUEST ); par\n\n        try {\n            $this-&gt;id = $this-&gt;dataWrite($_REQUEST);\n            $_REQUEST[\"xx_id\"] = $this-&gt;id;\n            return $this-&gt;list();\n        } catch (PpciException $e) {\n            return $this-&gt;change();\n        }\n\n$message-&gt; par $this-&gt;message-&gt;\n\net suppression de :\n\nswitch ($t_module[\"param\"]) {\n$bdd, $ObjetBDDParam\n\n\n\n\n\nrenommer le fichier en le commençant par une majuscule\nModifier la fonction __construct() pour charger la bonne classe et le bon identifiant\ndéfinir les vues autres que Smarty dans les fonctions\ndéfinir le retour attendu de chaque fonction :\n\nsoit ajouter la commande return $this-&gt;vue-&gt;send(); pour déclencher l’affichage\nsoit renvoyer vers une des fonctions de la classe : return $this-&gt;display();\nsoit renvoyer vers la page d’accueil : defaultPage();\n\n\n\n\n\nRemplacer :\n\n$bdd-&gt;beginTransaction(); par :\n\n$db = $this-&gt;dataclass-&gt;db;\n$db-&gt;transBegin();\n\nsupprimer $bdd-&gt;commit(); by $db-&gt;transCommit();\nremplacer $bdd-&gt;rollback(); par :\n\nif ($db-&gt;transEnabled) {\n    $db-&gt;transRollback();\n}\n\n\n\n\nExécutez la commande suivante :\nphp vendor/equinton/ppci/migration/actionsParse.php ../app/param/actions.xml\nLe script va lire l’ancien fichier actions.xml, et va préparer deux contenus :\n\nle premier est destiné à être inséré dans la classe app\\Config\\Rights, et contient la liste des droits nécessaires pour exécuter un module\nle second contient un prototype des routes pour exécuter les modules. Le contenu doit être inséré dans app/Config/Routes.php.\n\n\n\n\nUtilisez une fonction de recherche automatique pour remplacer “gestion” par “manage”.\n\n\n\nLancez le script :\nphp vendor/equinton/ppci/migration/generateController.php app/Config/Routes.php app/Controllers/\nLe programme va lire les routes définies, puis créer les contrôleurs correspondants, en regroupant les routes par module. Les contrôleurs intègrent lles appels aux fonctions de la librairie correspondante (même nom).\n\n\n\n\nAjouter un filtre pour réaliser les opérations décrites dans modules/common.php ;\nrenseigner le cas échéant la classe App\\Libraries\\Postlogin, pour réaliser les opérations spécifiques après connexion.\n\n\n\n\nLes traductions de Ppci sont fournies par défaut. Pour éviter de tout perdre, il faut les fusionner avec les anciennes traductions :\nmsgmerge app/Language/locales/lang.po ../oldapp/locales/en.po -o app/Language/locales/lang.po\ncd app/Language/locales\n./generate_po.sh\n./compile.sh\n\n\n\nÉditez les fichiers suivants :\n\napp/Config/news.txt pour les nouveautés en français\napp/Config/newsen.txt pour les nouveautés en anglais\n\nÉditez également les templates suivants :\n\napp/Views/templates/about_fr.tpl\napp/Views/templates/about_en.tpl"
  },
  {
    "objectID": "migration.html#installer-codeigniter-et-ppci",
    "href": "migration.html#installer-codeigniter-et-ppci",
    "title": "Migration depuis PrototypePhp",
    "section": "",
    "text": "Créez un dossier différent de celui qui contient le code initial de l’application à migrer, par exemple app2, puis, depuis le répertoire de niveau inférieur :\ncomposer create-project codeigniter4/appstarter app2\ncd app2\ncomposer require equinton/ppci\nvendor/equinton/ppci/install/install.sh\nÉditez ensuite le fichier .env, et mettez à jour les paramètres nécessaires (CI_ENVIRONMENT, app.baseURL et les paramètres de connexion à la base de données)."
  },
  {
    "objectID": "migration.html#créer-un-nouveau-vhost-dans-apache",
    "href": "migration.html#créer-un-nouveau-vhost-dans-apache",
    "title": "Migration depuis PrototypePhp",
    "section": "",
    "text": "Voici un exemple de configuration :\n&lt;VirtualHost *:80&gt;\n    ServerName app2.local\n    ServerPath /app2.local\n    RewriteEngine On\n    RewriteRule ^ https://app2.local%{REQUEST_URI} [R]\n&lt;/VirtualHost&gt;\n&lt;VirtualHost *:443&gt;\n    ServerName app2.local\n    ServerPath /app2.local\n    SSLEngine on\n    SSLCertificateFile  /etc/ssl/certs/server.crt\n    SSLCertificateKeyFile /etc/ssl/private/server.key\n    SSLCACertificateFile /etc/ssl/certs/cacert.crt\n    DocumentRoot /var/www/app2/public \n&lt;/VirtualHost&gt;\n&lt;Directory /var/www/app2/public&gt;\n    &lt;LimitExcept GET POST&gt;\n        Deny from all\n    &lt;/LimitExcept&gt;\n    Options -Indexes FollowSymLinks MultiViews\n    Header unset ETag\n    Header set Cache-Control \"max-age=0, no-cache, no-store, must-revalidate, private\"\n    Header set Pragma \"no-cache\"\n    Header set X-Frame-Options \"DENY\"\n    Header set X-XSS-Protection \"1; mode=block\"\n    Header set X-Content-Type-Options \"nosniff\"\n    Header always set Strict-Transport-Security \"max-age=63072000; includeSubdomains;\"\n    Header always set Content-Security-Policy \"default-src 'self' ; script-src blob: * 'self' 'unsafe-inline' 'unsafe-eval'; connect-src data: blob: filesystem: *.tile.openstreetmap.org 'self' ; img-src 'self' data: blob: *.openstreetmap.org ; style-src 'self' 'unsafe-inline' ;\"\n    &lt;FilesMatch \"\\.(ico|flv|jpg|jpeg|png|gif|js|css|svg)$\"&gt;\n        Header set Cache-Control \"max-age=604800, private\"\n    &lt;/FilesMatch&gt;\n&lt;FilesMatch \".*openstreetmap.*\\.png$\"&gt;\n    Header set Cache-Control \"max-age=2592000, public\"\n&lt;/FilesMatch&gt;\n    Require all granted\n    AllowOverride all\n    RewriteEngine On\n    RewriteBase /\n    RewriteCond \"/%{REQUEST_FILENAME}\" !-f\n    RewriteCond \"/%{REQUEST_FILENAME}\" !-d\n    RewriteRule \"(.*)\" \"/index.php?$1\" [PT,QSA]\n&lt;/Directory&gt;"
  },
  {
    "objectID": "migration.html#mettre-à-jour-la-base-de-données",
    "href": "migration.html#mettre-à-jour-la-base-de-données",
    "title": "Migration depuis PrototypePhp",
    "section": "",
    "text": "Éditez le fichier vendor/equinton/ppci/migration/updatedb.sql, et vérifiez la première ligne (set search_path), en remplaçant app par le nom du schéma contenant les données.\nExécutez ensuite le fichier sql."
  },
  {
    "objectID": "migration.html#mettre-à-niveau-le-menu",
    "href": "migration.html#mettre-à-niveau-le-menu",
    "title": "Migration depuis PrototypePhp",
    "section": "",
    "text": "Éditez le fichier app/Config/menu.xml, et rajoutez les entrées nécessaires."
  },
  {
    "objectID": "migration.html#ajouter-les-modèles-smarty",
    "href": "migration.html#ajouter-les-modèles-smarty",
    "title": "Migration depuis PrototypePhp",
    "section": "",
    "text": "Recopiez les modèles Smarty depuis display/templates dans app/Views/templates en conservant l’organisation en sous-dossiers, à l’exception des fichiers à la racine et du sous-dossier framework.\n\n\nDans ce dossier, remplacez tous les libellés (filtre sur *tpl) :\n\n&lt;/form&gt; par {$csrf}&lt;/form&gt; pour ajouter le jeton CSRF dans les formulaires\ndroits par rights\n.gestion par .manage\ndatatable\" par datatable display\"\ndatatable-nopaging-nosearching\" par datatable-nopaging-nosearching display\"\ndatatable-searching\" par datatable-searching display\"\ndatatable-nopaging\" par datatable-nopaging display\"\ndatatable-nopaging-nosort\" par datatable-nopaging-nosort display\"\ndatatable-nosort\" par datatable-nosort display\"\ndatatable-export\" par datatable-export display\"\ndatatable-export-paging\" par datatable-export-paging display\"\n\nSupprimez\n\nindex.php?module=\n\n\n\n\nReprenez tous les liens (recherchez les balises a href) et remplacez le premier & par ?\nModifiez toutes les actions des formulaires, pour qu’ils aient cette forme :\n&lt;form class=\"form-horizontal\" id=\"formName\" method=\"post\" action=\"moduleWrite\"&gt;\n&lt;input type=\"hidden\" name=\"moduleBase\" value=\"module\"&gt;\nLe champ action peut être supprimé. Par contre, le champ moduleBase doit être conservé : il est utilisé pour créer l’action moduleDelete par l’intermédiaire du script javascript dans main_js.tpl."
  },
  {
    "objectID": "migration.html#réécriture-des-modèles",
    "href": "migration.html#réécriture-des-modèles",
    "title": "Migration depuis PrototypePhp",
    "section": "",
    "text": "Recopier les fichiers depuis modules/classes vers app/Models.\n\n\nElles peuvent être effectuées par rechercher/remplacer.\n\nremplacer :\n\n&lt;?php par &lt;?php namespace App\\Models;use Ppci\\Models\\PpciModel;, avec sauts de ligne ;\nextends ObjetBDD par extends PpciModel ;\n(public function __construct().*) par public function __construct(), en cochant expression régulière ;\n$this-&gt;colonnes par $this-&gt;fields ;\nfunction ecrire par function write\nfunction lire par function read\nparent::ecrire par parent::write\n(parent::__construct().*) par parent::__construct(), en cochant expression régulière ;\n$this-&gt;id_auto = 0 par $this-&gt;useAutoIncrement = false\nauto_date = 0 par autoFormatDate = false\n\nsupprimer :\n\n$this-&gt;id_auto = 1;\n$param[\"fullDescription\"] = 1;\n$this-&gt;param = $param;\n\n\n\n\n\n\nrenommer le nom du fichier, par exemple espece.class.php en Espece.php ;\ndans les requêtes SQL, modifier les variables en rajoutant : à la fin : :id doit devenir :id: ;\npour les tables portant des données géographiques (champs avec type=4), modifier les requêtes ou créer les fonctions lire() pour ajouter st_astext() pour les champs concernés ;\nles transformations de dates pour les champs non présents dans la table doivent être réécrites selon ce schéma :\n\n$this-&gt;dateFields[] = \"peche_date\";\n$this-&gt;datetimeFields[] = \"peche_datetime\";\n\nsi la fonction utf8_encode est utilisée, elle doit être remplacée par :\n\n$data = mb_convert_encoding($data, 'UTF-8', 'ISO-8859-15, ISO-8859-1, Windows-1252');\nLa fonction traite indistinctement les chaînes ou les tableaux."
  },
  {
    "objectID": "migration.html#réécriture-des-librairies",
    "href": "migration.html#réécriture-des-librairies",
    "title": "Migration depuis PrototypePhp",
    "section": "",
    "text": "Recopier l’ensemble des modules dans app/Libraries. Il faut les transformer en classes.\n\n\nRemplacer :\n\n&lt;?php par :\n\n&lt;?php \nnamespace App\\Libraries;\n\nuse Ppci\\Libraries\\PpciException;\nuse Ppci\\Libraries\\PpciLibrary;\nuse Ppci\\Models\\PpciModel;\n\nclass Xx extends PpciLibrary { \n    /**\n     * @var xx\n     */\n    protected PpciModel $dataclass;\n    private $keyName;\n\n    function __construct()\n    {\n        parent::__construct();\n        $this-&gt;dataclass = new XXX();\n        $keyName = \"xxx_id\";\n        if (isset($_REQUEST[$this-&gt;keyName])) {\n            $this-&gt;id = $_REQUEST[$this-&gt;keyName];\n        }\n    }\n\ndataRead($dataclass, par $this-&gt;dataRead(\ndataDelete($dataclass, par $this-&gt;dataDelete(\ncase \"list\": par function list(){$vue=service('Smarty'); (saut de ligne)\ncase \"display\": par function display(){$vue=service('Smarty'); (saut de ligne)\ncase \"change\": par function change(){$vue=service('Smarty'); (saut de ligne)\ncase \"write\": par\n\n    function write() {\n    try {\n            $this-&gt;id = $this-&gt;dataWrite($_REQUEST);\n            if ($this-&gt;id &gt; 0) {\n                $_REQUEST[$this-&gt;keyName] = $this-&gt;id;\n                return $this-&gt;display();\n            } else {\n                return $this-&gt;change();\n            }\n        } catch (PpciException) {\n            return $this-&gt;change();\n        }\n    }\n\ncase \"delete\": par function delete(){\ncase \" par function\n\": par () {\nbreak; par } : fermeture des fonctions\n$dataclass par $this-&gt;dataclass\n$id par $this-&gt;id\n$vue par $this-&gt;vue\n$this-&gt;dataDelete($this-&gt;id); par\n\n        try {\n            $this-&gt;dataDelete($this-&gt;id);\n            return $this-&gt;list();\n        } catch (PpciException $e) {\n            return $this-&gt;change();\n        }\n\n$this-&gt;dataWrite( $_REQUEST ); par\n\n        try {\n            $this-&gt;id = $this-&gt;dataWrite($_REQUEST);\n            $_REQUEST[\"xx_id\"] = $this-&gt;id;\n            return $this-&gt;list();\n        } catch (PpciException $e) {\n            return $this-&gt;change();\n        }\n\n$message-&gt; par $this-&gt;message-&gt;\n\net suppression de :\n\nswitch ($t_module[\"param\"]) {\n$bdd, $ObjetBDDParam\n\n\n\n\n\nrenommer le fichier en le commençant par une majuscule\nModifier la fonction __construct() pour charger la bonne classe et le bon identifiant\ndéfinir les vues autres que Smarty dans les fonctions\ndéfinir le retour attendu de chaque fonction :\n\nsoit ajouter la commande return $this-&gt;vue-&gt;send(); pour déclencher l’affichage\nsoit renvoyer vers une des fonctions de la classe : return $this-&gt;display();\nsoit renvoyer vers la page d’accueil : defaultPage();\n\n\n\n\n\nRemplacer :\n\n$bdd-&gt;beginTransaction(); par :\n\n$db = $this-&gt;dataclass-&gt;db;\n$db-&gt;transBegin();\n\nsupprimer $bdd-&gt;commit(); by $db-&gt;transCommit();\nremplacer $bdd-&gt;rollback(); par :\n\nif ($db-&gt;transEnabled) {\n    $db-&gt;transRollback();\n}"
  },
  {
    "objectID": "migration.html#générer-les-routes-et-les-droits-nécessaires-pour-exécuter-les-modules",
    "href": "migration.html#générer-les-routes-et-les-droits-nécessaires-pour-exécuter-les-modules",
    "title": "Migration depuis PrototypePhp",
    "section": "",
    "text": "Exécutez la commande suivante :\nphp vendor/equinton/ppci/migration/actionsParse.php ../app/param/actions.xml\nLe script va lire l’ancien fichier actions.xml, et va préparer deux contenus :\n\nle premier est destiné à être inséré dans la classe app\\Config\\Rights, et contient la liste des droits nécessaires pour exécuter un module\nle second contient un prototype des routes pour exécuter les modules. Le contenu doit être inséré dans app/Config/Routes.php."
  },
  {
    "objectID": "migration.html#renommer-le-droit-gestion-en-manage",
    "href": "migration.html#renommer-le-droit-gestion-en-manage",
    "title": "Migration depuis PrototypePhp",
    "section": "",
    "text": "Utilisez une fonction de recherche automatique pour remplacer “gestion” par “manage”."
  },
  {
    "objectID": "migration.html#ajouter-les-contrôleurs",
    "href": "migration.html#ajouter-les-contrôleurs",
    "title": "Migration depuis PrototypePhp",
    "section": "",
    "text": "Lancez le script :\nphp vendor/equinton/ppci/migration/generateController.php app/Config/Routes.php app/Controllers/\nLe programme va lire les routes définies, puis créer les contrôleurs correspondants, en regroupant les routes par module. Les contrôleurs intègrent lles appels aux fonctions de la librairie correspondante (même nom)."
  },
  {
    "objectID": "migration.html#ajouter-un-filtre-pour-les-opérations-génériques-au-démarrage",
    "href": "migration.html#ajouter-un-filtre-pour-les-opérations-génériques-au-démarrage",
    "title": "Migration depuis PrototypePhp",
    "section": "",
    "text": "Ajouter un filtre pour réaliser les opérations décrites dans modules/common.php ;\nrenseigner le cas échéant la classe App\\Libraries\\Postlogin, pour réaliser les opérations spécifiques après connexion."
  },
  {
    "objectID": "migration.html#récupérer-les-traductions",
    "href": "migration.html#récupérer-les-traductions",
    "title": "Migration depuis PrototypePhp",
    "section": "",
    "text": "Les traductions de Ppci sont fournies par défaut. Pour éviter de tout perdre, il faut les fusionner avec les anciennes traductions :\nmsgmerge app/Language/locales/lang.po ../oldapp/locales/en.po -o app/Language/locales/lang.po\ncd app/Language/locales\n./generate_po.sh\n./compile.sh"
  },
  {
    "objectID": "migration.html#mettre-à-niveau-le-readme-et-le-à-propos",
    "href": "migration.html#mettre-à-niveau-le-readme-et-le-à-propos",
    "title": "Migration depuis PrototypePhp",
    "section": "",
    "text": "Éditez les fichiers suivants :\n\napp/Config/news.txt pour les nouveautés en français\napp/Config/newsen.txt pour les nouveautés en anglais\n\nÉditez également les templates suivants :\n\napp/Views/templates/about_fr.tpl\napp/Views/templates/about_en.tpl"
  },
  {
    "objectID": "partners.html#list-of-financial-partners",
    "href": "partners.html#list-of-financial-partners",
    "title": "Partners",
    "section": "List of Financial partners",
    "text": "List of Financial partners"
  },
  {
    "objectID": "identification.html",
    "href": "identification.html",
    "title": "Gestion de l’identification",
    "section": "",
    "text": "PPCI propose plusieurs mécanismes pour gérer l’identification des utilisateurs :\n\nstockage des comptes dans la base de données (BDD)\nidentification auprès d’un serveur LDAP (LDAP)\nidentification auprès d’un serveur Common Access Service (CAS)\nidentification auprès d’un serveur OpenID Connect (OIDC)\nidentification fournie par le serveur web, pour utiliser des mécanismes Shibboleth (mode Mellon d’Apache par exemple) (HEADER)\ndes mécanismes mixtes, avec utilisation de serveurs tiers et stockage en base de données pour les comptes non gérés autrement :\n\nLDAP-BDD : test de l’identification auprès de l’annuaire LDAP, et en cas d’échec, auprès de la base de données\nCAS-BDD et OIDC-BDD : un bouton permet de sélectionner l’identification auprès du serveur considéré\n\n\nEn outre, les utilisateurs peuvent activer une double identification TOTP. Celle-ci est d’ailleurs obligatoire pour accéder aux modules d’administration.\nÀ noter que l’identification LDAP est aujourd’hui considérée comme obsolète. Il vaut mieux se tourner vers des services OIDC ou CAS, quand ceux-ci sont disponibles.\n\n\n\n\nLes paramètres sont définis dans Ppci\\Config\\IdentificationConfig.\n\nCONNECTION_max_attempts : en cas d’échec de connexion (par défaut 5), le compte sera bloqué pendant la durée spécifiée dans :\n\nCONNECTION_blocking_duration (par défaut, 600 secondes). À noter que la tentative de connexion pendant cette durée réinitialise le compteur à zéro\n\nAPP_passwordMinLength : longueur minimum du mot de passe\nAPPLI_lostPassword : si positionné par 1 (défaut), l’utilisateur pourra demander à réinitialiser son mot de passe, sous réserve que son email soit renseigné\ntokenIdentityValidity : durée de validité du jeton généré lors de la connexion BDD ou LDAP, pour éviter d’avoir à se réidentifier pendant la journée. Par défaut, 10 heures.\n\n\n\n\nLes variables sont définies dans Ppci\\Config\\IdentificationConfig.LDAP.\n\naddress : adresse du serveur LDAP\nport : port de connexion\nrdn : compte de connexion pour interroger l’annuaire, si nécessaire\nbasedn : base de recherche des comptes\nuser_attrib : attribut contenant l’identifiant de l’utilisateur (uid)\nv3 : version 3 de l’annuaire, positionné par défaut true\ntls : mettre à true pour activer la connexion tls\nupn_suffix : suffixe upn, nécessaire dans certains cas pour Active Directory\ngroupSupport : si positionné à true, les groupes seront récupérés depuis l’annuaire pour alimenter le module de gestion des droits\ngroupAttrib : nom de l’attribut comprenant les groupes de l’utilisateurs\ncommonNameAttrib : nom de l’attribut comprenant le nom complet de l’utilisateur\nmailAttrib : nom de l’attribut comprenant l’email de l’utilisateur\nattributgroupname : nom de l’attribut comprenant le nom du groupe\nattributloginname : nom de l’attribut comprenant l’uid du membre\nbasedngroup : chemin de recherche des groupes\ntimeout : time-out de recherche dans l’annuaire (positionné à 2 secondes par défaut)\nldapnoanonymous : si positionné à true, l’interrogation de l’annuaire pour récupérer les groupes impose une connexion\n\nldaplogin : login de connexion\nldappassword : mot de passe associé\n\n\n\n\n\nUne icône est rajoutée sur le bouton permettant d’activer l’identification auprès du serveur CAS ou OIDC : Ppci\\Config\\IdentificationConfig.identificationLogo = \"${FRONT_DIR}/favicon.png\"\n\n\n\n\nLes paramètres sont définis dans Ppci\\Config\\IdentificationConfig.XX, où XX doit être remplacé par CAS, OIDC ou HEADER.\nParamètres généraux :\n\nmail : attribut comprenant l’email\nfirstname : attribut comprenant le prénom\nlastname : attribut comprenant le nom de famille\nname : attribut comprenant le nom complet\ngroups : attribut comprenant les groupes d’appartenance des utilisateurs\ngetGroups : si positionné à 1 (défaut), les groupes de l’utilisateur fournis par le serveur d’identification sont traités\n\n\n\n\naddress : adresse du serveur CAS, par exemple : monserveur.society.com\nuri : dossier d’accès à l’identification. Par défaut : /cas\nport : par défaut, 443\ndebug : si positionné à true ou 1, les traces sont stockées dans le fichier writable/logs/cas.log\nCApath : chemin d’accès au certificat permettant de valider le serveur CAS. S’il n’est pas renseigné, le serveur CAS ne sera pas vérifié (déconseillé en production)\n\n\n\n\n\nname : code du provider\nprovider : adresse web du provider (doit commencer par https://)\nclientId : code fourni par le provider\nclientSecret : clé secrète fournie par le provider\nscopeGroup : nom du scope OIDC qui contient les attributs secondaires (par défaut : affectation)\n\n\n\n\n\nlogin : nom de l’attribut de $_SERVER contenant le login, renvoyé par le serveur Apache\norganizationGranted : tableau contenant le code ou le nom des organismes autorisés. Si ce tableau est renseigné, et si un nouvel utilisateur n’appartient pas à une des organisations indiquées (attribut organization), la création de son compte ne sera pas effectuée\ngroupsGranted : tableau contenant la liste des groupes autorisés. Si un utilisateur se connecte pour la première fois et que son groupe (ou un de ses groupes) appartient à la liste des groupes autorisés, son compte sera activé automatiquement. Dans le cas contraire, son compte sera désactivé, et un email est envoyé aux administrateurs pour les inviter à activer le compte.\n\n\n\n\n\nLes paramètres sont accessibles depuis Ppci\\Config\\IdentificationConfig.\n\nadminSessionDuration : durée pendant laquelle l’identification reste valide pour accéder aux modules d’administration. Par défaut, 10’.\ndisableTotpToAdmin : si positionné à 1, désactive la double-identification pour accéder aux modules d’administration. Ne devrait pas être utilisé en production !"
  },
  {
    "objectID": "identification.html#paramètres-spécifiques-pour-chaque-type-didentification",
    "href": "identification.html#paramètres-spécifiques-pour-chaque-type-didentification",
    "title": "Gestion de l’identification",
    "section": "",
    "text": "Les paramètres sont définis dans Ppci\\Config\\IdentificationConfig.\n\nCONNECTION_max_attempts : en cas d’échec de connexion (par défaut 5), le compte sera bloqué pendant la durée spécifiée dans :\n\nCONNECTION_blocking_duration (par défaut, 600 secondes). À noter que la tentative de connexion pendant cette durée réinitialise le compteur à zéro\n\nAPP_passwordMinLength : longueur minimum du mot de passe\nAPPLI_lostPassword : si positionné par 1 (défaut), l’utilisateur pourra demander à réinitialiser son mot de passe, sous réserve que son email soit renseigné\ntokenIdentityValidity : durée de validité du jeton généré lors de la connexion BDD ou LDAP, pour éviter d’avoir à se réidentifier pendant la journée. Par défaut, 10 heures.\n\n\n\n\nLes variables sont définies dans Ppci\\Config\\IdentificationConfig.LDAP.\n\naddress : adresse du serveur LDAP\nport : port de connexion\nrdn : compte de connexion pour interroger l’annuaire, si nécessaire\nbasedn : base de recherche des comptes\nuser_attrib : attribut contenant l’identifiant de l’utilisateur (uid)\nv3 : version 3 de l’annuaire, positionné par défaut true\ntls : mettre à true pour activer la connexion tls\nupn_suffix : suffixe upn, nécessaire dans certains cas pour Active Directory\ngroupSupport : si positionné à true, les groupes seront récupérés depuis l’annuaire pour alimenter le module de gestion des droits\ngroupAttrib : nom de l’attribut comprenant les groupes de l’utilisateurs\ncommonNameAttrib : nom de l’attribut comprenant le nom complet de l’utilisateur\nmailAttrib : nom de l’attribut comprenant l’email de l’utilisateur\nattributgroupname : nom de l’attribut comprenant le nom du groupe\nattributloginname : nom de l’attribut comprenant l’uid du membre\nbasedngroup : chemin de recherche des groupes\ntimeout : time-out de recherche dans l’annuaire (positionné à 2 secondes par défaut)\nldapnoanonymous : si positionné à true, l’interrogation de l’annuaire pour récupérer les groupes impose une connexion\n\nldaplogin : login de connexion\nldappassword : mot de passe associé\n\n\n\n\n\nUne icône est rajoutée sur le bouton permettant d’activer l’identification auprès du serveur CAS ou OIDC : Ppci\\Config\\IdentificationConfig.identificationLogo = \"${FRONT_DIR}/favicon.png\""
  },
  {
    "objectID": "identification.html#identification-auprès-de-serveurs-dédiés-header-cas-oidc",
    "href": "identification.html#identification-auprès-de-serveurs-dédiés-header-cas-oidc",
    "title": "Gestion de l’identification",
    "section": "",
    "text": "Les paramètres sont définis dans Ppci\\Config\\IdentificationConfig.XX, où XX doit être remplacé par CAS, OIDC ou HEADER.\nParamètres généraux :\n\nmail : attribut comprenant l’email\nfirstname : attribut comprenant le prénom\nlastname : attribut comprenant le nom de famille\nname : attribut comprenant le nom complet\ngroups : attribut comprenant les groupes d’appartenance des utilisateurs\ngetGroups : si positionné à 1 (défaut), les groupes de l’utilisateur fournis par le serveur d’identification sont traités\n\n\n\n\naddress : adresse du serveur CAS, par exemple : monserveur.society.com\nuri : dossier d’accès à l’identification. Par défaut : /cas\nport : par défaut, 443\ndebug : si positionné à true ou 1, les traces sont stockées dans le fichier writable/logs/cas.log\nCApath : chemin d’accès au certificat permettant de valider le serveur CAS. S’il n’est pas renseigné, le serveur CAS ne sera pas vérifié (déconseillé en production)\n\n\n\n\n\nname : code du provider\nprovider : adresse web du provider (doit commencer par https://)\nclientId : code fourni par le provider\nclientSecret : clé secrète fournie par le provider\nscopeGroup : nom du scope OIDC qui contient les attributs secondaires (par défaut : affectation)\n\n\n\n\n\nlogin : nom de l’attribut de $_SERVER contenant le login, renvoyé par le serveur Apache\norganizationGranted : tableau contenant le code ou le nom des organismes autorisés. Si ce tableau est renseigné, et si un nouvel utilisateur n’appartient pas à une des organisations indiquées (attribut organization), la création de son compte ne sera pas effectuée\ngroupsGranted : tableau contenant la liste des groupes autorisés. Si un utilisateur se connecte pour la première fois et que son groupe (ou un de ses groupes) appartient à la liste des groupes autorisés, son compte sera activé automatiquement. Dans le cas contraire, son compte sera désactivé, et un email est envoyé aux administrateurs pour les inviter à activer le compte."
  },
  {
    "objectID": "identification.html#gestion-de-laccès-aux-modules-dadministration",
    "href": "identification.html#gestion-de-laccès-aux-modules-dadministration",
    "title": "Gestion de l’identification",
    "section": "",
    "text": "Les paramètres sont accessibles depuis Ppci\\Config\\IdentificationConfig.\n\nadminSessionDuration : durée pendant laquelle l’identification reste valide pour accéder aux modules d’administration. Par défaut, 10’.\ndisableTotpToAdmin : si positionné à 1, désactive la double-identification pour accéder aux modules d’administration. Ne devrait pas être utilisé en production !"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "",
    "text": "PrototypePHP for CodeIgniter (PPCI) est un portage du framework https://github.com/equinton/prototypephp développé à partir des années 2000 pour écrire divers applications web, dont Collec-Science.\nPour faciliter la maintenance des applications web, le portage vers CodeIgniter de PrototypePHP a été entrepris en 2024. Il se présente sous la forme d’un composant additionnel. Il utilise la plupart des fonctionnalités de CodeIgniter (routes, filtres, services, accès aux bases de données, gestion des paramètres, etc.), à l’exception :\n\nde l’affichage des pages web, qui reste dévolu au moteur de templates Smarty\nde la gestion de l’identification et des droits, PPCI étant à cet égard bien plus riche en terme de fonctionnalités, comme le support de multiples mécanismes d’identification (en base de données, LDAP, CAS, OIDC, TOTP, etc.) ou la gestion des droits.\n\nLe composant est distribué sous licence MIT."
  },
  {
    "objectID": "parameters.html",
    "href": "parameters.html",
    "title": "Paramètres de l’application",
    "section": "",
    "text": "Les paramètres sont définis dans deux fichiers : app/Config/App.php et vendor/equinton/ppci/src/Config/IdentificationConfig.php.\nS’ils peuvent tous être modifiés lors de chaque implémentation en utilisant le fichier .env, à la racine de l’application, certains ne devraient pas être modifiés par ce mécanisme.\nLes paramètres dans le fichier .env sont préfixés soit par app., soit par Ppci\\Config\\IdentificationConfig., en fonction de leur origine. Le fichier env contient l’ensemble des variables pouvant être modifiées lors de l’implémentation d’une instance du logiciel.\n\n\n\n\n\n\n\n\n\n\n\nParamètre (avec le radical utilisé dans le fichier .env)\nDescription\nValeur par défaut\nModifiable dans .env\n\n\n\n\napp.baseURL\nAdresse de l’instance\n \nobligatoire\n\n\nBASE_DIR\nvariable utilisée dans .env, pour indiquer le chemin d’accès à l’application\np. e. “/var/www/collec2”\nobligatoire\n\n\nFRONT_DIR\nvariable utilisée dans .env, pour indiquer le chemin d’accès au dossier public, la base des pages web\n${BASE_DIR}/public\nen principe, non\n\n\napp.defaultLocale\nLangue par défaut dans l’instance\nfr\npossible\n\n\napp.supportedLocales\nLangues gérées par l’application\n[‘fr’,‘en’]\npossible, sous réserve que d’autres langues soient intégrées dans le framework\n\n\napp.version\nVersion de l’application\n \njamais\n\n\napp.versionDate\nDate de création de la version\n \njamais\n\n\napp.dbversion\nVersion de la base de données. La version doit également exister dans la table dbversion de la base de données\n \njamais\n\n\ndatabaseSchemaFile\nChemin où est placé le png décrivant les tables de la base de données\np. e. : ROOTPATH . “documentation/collec-schema.png”\njamais\n\n\napp.logDuration\nDurée, en jours, de conservation des logs dans la table logs\n365\npossible\n\n\napp.privateKey\nemplacement de la clé privée utilisée pour les opérations de chiffrement ou déchiffrement\np. e., ${BASE_DIR}/id_collec\npossible\n\n\napp.pubKey\nemplacement de la clé publique utilisée pour les opérations de chiffrement ou déchiffrement\np. e. ${BASE_DIR}/id_collec.pub\npossible\n\n\nsession.expiration\nDurée de la session, en secondes\n14400 (4 heures)\npossible\n\n\napp.APPLI_absolute_session\nDurée maxi de la session, en secondes\n36000 (10 heures)\npossible\n\n\nlogger.threshold\nSeuil de déclenchement des erreurs\n4\njamais\n\n\napp.APP_mail\nemail de l’application\nmail@mysociety.com\nobligatoire\n\n\napp.MAIL_enabled\nSi à 1, l’envoi de mails est activé\n1\npossible\n\n\napp.MAIL_param.from\nidem APP_mail\nmail@mysociety.com\nobligatoire\n\n\napp.MAIL_param.mailDebug\nSi à 1, affiche le contenu du mail à l’écran plutôt que de l’envoyer\n0\nen développement uniquement\n\n\napp.checkRelease\nSi à 1, interroge le serveur GIT (Github ou Gitlab) pour connaître la dernière version disponible, et si la version est différente de celle enregistrée (app.version), affiche un message à l’écran. Les paramètres spécifiques pour l’interrogation sont décrits dans le fichier App.php\n0\npossible\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParamètre\nDescription\nValeur par défaut\nModifiable dans .env\n\n\n\n\ndatabase.default.hostname\nnom ou adresse du serveur\nlocalhost\noui\n\n\ndatabase.default.database\nnom de la base de données\n \noui\n\n\ndatabase.default.username\nnom du compte de connexion\n \noui\n\n\ndatabase.default.password\nmot de passe associé\n \noui\n\n\ndatabase.default.DBDriver\nNom du pilote\nPostgre\nnon\n\n\ndatabase.default.port\nport de connexion\n5432\noui\n\n\ndatabase.default.searchpath\nliste des schémas utilisés dans la base de données, séparés par une virgule\np. e. col,gacl,public\nen principe, non\n\n\ndatabase.default.charset\njeu de caractères utilisé dans la base de données\nutf8\njamais\n\n\n\n\n\n\nVoir la page identification."
  },
  {
    "objectID": "parameters.html#paramètres-génériques",
    "href": "parameters.html#paramètres-génériques",
    "title": "Paramètres de l’application",
    "section": "",
    "text": "Paramètre (avec le radical utilisé dans le fichier .env)\nDescription\nValeur par défaut\nModifiable dans .env\n\n\n\n\napp.baseURL\nAdresse de l’instance\n \nobligatoire\n\n\nBASE_DIR\nvariable utilisée dans .env, pour indiquer le chemin d’accès à l’application\np. e. “/var/www/collec2”\nobligatoire\n\n\nFRONT_DIR\nvariable utilisée dans .env, pour indiquer le chemin d’accès au dossier public, la base des pages web\n${BASE_DIR}/public\nen principe, non\n\n\napp.defaultLocale\nLangue par défaut dans l’instance\nfr\npossible\n\n\napp.supportedLocales\nLangues gérées par l’application\n[‘fr’,‘en’]\npossible, sous réserve que d’autres langues soient intégrées dans le framework\n\n\napp.version\nVersion de l’application\n \njamais\n\n\napp.versionDate\nDate de création de la version\n \njamais\n\n\napp.dbversion\nVersion de la base de données. La version doit également exister dans la table dbversion de la base de données\n \njamais\n\n\ndatabaseSchemaFile\nChemin où est placé le png décrivant les tables de la base de données\np. e. : ROOTPATH . “documentation/collec-schema.png”\njamais\n\n\napp.logDuration\nDurée, en jours, de conservation des logs dans la table logs\n365\npossible\n\n\napp.privateKey\nemplacement de la clé privée utilisée pour les opérations de chiffrement ou déchiffrement\np. e., ${BASE_DIR}/id_collec\npossible\n\n\napp.pubKey\nemplacement de la clé publique utilisée pour les opérations de chiffrement ou déchiffrement\np. e. ${BASE_DIR}/id_collec.pub\npossible\n\n\nsession.expiration\nDurée de la session, en secondes\n14400 (4 heures)\npossible\n\n\napp.APPLI_absolute_session\nDurée maxi de la session, en secondes\n36000 (10 heures)\npossible\n\n\nlogger.threshold\nSeuil de déclenchement des erreurs\n4\njamais\n\n\napp.APP_mail\nemail de l’application\nmail@mysociety.com\nobligatoire\n\n\napp.MAIL_enabled\nSi à 1, l’envoi de mails est activé\n1\npossible\n\n\napp.MAIL_param.from\nidem APP_mail\nmail@mysociety.com\nobligatoire\n\n\napp.MAIL_param.mailDebug\nSi à 1, affiche le contenu du mail à l’écran plutôt que de l’envoyer\n0\nen développement uniquement\n\n\napp.checkRelease\nSi à 1, interroge le serveur GIT (Github ou Gitlab) pour connaître la dernière version disponible, et si la version est différente de celle enregistrée (app.version), affiche un message à l’écran. Les paramètres spécifiques pour l’interrogation sont décrits dans le fichier App.php\n0\npossible"
  },
  {
    "objectID": "parameters.html#paramètres-de-connexion-à-la-base-de-données",
    "href": "parameters.html#paramètres-de-connexion-à-la-base-de-données",
    "title": "Paramètres de l’application",
    "section": "",
    "text": "Paramètre\nDescription\nValeur par défaut\nModifiable dans .env\n\n\n\n\ndatabase.default.hostname\nnom ou adresse du serveur\nlocalhost\noui\n\n\ndatabase.default.database\nnom de la base de données\n \noui\n\n\ndatabase.default.username\nnom du compte de connexion\n \noui\n\n\ndatabase.default.password\nmot de passe associé\n \noui\n\n\ndatabase.default.DBDriver\nNom du pilote\nPostgre\nnon\n\n\ndatabase.default.port\nport de connexion\n5432\noui\n\n\ndatabase.default.searchpath\nliste des schémas utilisés dans la base de données, séparés par une virgule\np. e. col,gacl,public\nen principe, non\n\n\ndatabase.default.charset\njeu de caractères utilisé dans la base de données\nutf8\njamais"
  },
  {
    "objectID": "parameters.html#paramètres-liés-à-lidentification-des-utilisateurs",
    "href": "parameters.html#paramètres-liés-à-lidentification-des-utilisateurs",
    "title": "Paramètres de l’application",
    "section": "",
    "text": "Voir la page identification."
  },
  {
    "objectID": "command-line.html",
    "href": "command-line.html",
    "title": "Exécution en ligne de commande",
    "section": "",
    "text": "Dans CodeIgniter, avec le module PPCI, le fichier .env est chargé automatiquement en prenant en compte le contenu de la variable $_SERVER[\"envPath\"], avec ce code :\nif (is_file($file = $_SERVER[\"envPath\"] . DIRECTORY_SEPARATOR . \".env\") && is_readable($file)) {\n    (new CodeIgniter\\Config\\DotEnv($_SERVER[\"envPath\"],\".env\"))-&gt;load();\nDans un script, pour transférer la valeur de envPath dans la variable $_SERVER et permettre le chargement du fichier .env, il faut ajouter la ligne :\nexport envPath=\"/var/www/instances/instancename\"\nVoici un exemple d’utilisation, pour afficher simplement le contenu de la variable $_SERVER[\"envPath\"] :\nFichier PHP test.php :\n&lt;?php\necho $_SERVER[\"envPath\"].PHP_EOL;\nScript test.sh utilisé pour son déclenchement :\n#!/bin/bash\nexport envPath=/var/www/instances/instancename\ncd $envPath/public\nphp index.php maroute\noù maroute correspond à la route à appeler.\nDéclarez la route dans app/Config/Routes.php (sans oublier le contrôleur correspondant), puis lancez l’exécution du script :\n./test.sh\n/var/www/instances/instancename"
  },
  {
    "objectID": "command-line.html#transférer-le-nom-du-fichier-.env-à-utiliser",
    "href": "command-line.html#transférer-le-nom-du-fichier-.env-à-utiliser",
    "title": "Exécution en ligne de commande",
    "section": "",
    "text": "Dans CodeIgniter, avec le module PPCI, le fichier .env est chargé automatiquement en prenant en compte le contenu de la variable $_SERVER[\"envPath\"], avec ce code :\nif (is_file($file = $_SERVER[\"envPath\"] . DIRECTORY_SEPARATOR . \".env\") && is_readable($file)) {\n    (new CodeIgniter\\Config\\DotEnv($_SERVER[\"envPath\"],\".env\"))-&gt;load();\nDans un script, pour transférer la valeur de envPath dans la variable $_SERVER et permettre le chargement du fichier .env, il faut ajouter la ligne :\nexport envPath=\"/var/www/instances/instancename\"\nVoici un exemple d’utilisation, pour afficher simplement le contenu de la variable $_SERVER[\"envPath\"] :\nFichier PHP test.php :\n&lt;?php\necho $_SERVER[\"envPath\"].PHP_EOL;\nScript test.sh utilisé pour son déclenchement :\n#!/bin/bash\nexport envPath=/var/www/instances/instancename\ncd $envPath/public\nphp index.php maroute\noù maroute correspond à la route à appeler.\nDéclarez la route dans app/Config/Routes.php (sans oublier le contrôleur correspondant), puis lancez l’exécution du script :\n./test.sh\n/var/www/instances/instancename"
  },
  {
    "objectID": "locale.html",
    "href": "locale.html",
    "title": "Support des langues",
    "section": "",
    "text": "Actuellement, le moteur ne gère que le français (langue par défaut) et l’anglais.\nLes traductions sont réalisées avec gettext. Elles sont stockées dans app/Language/locales, avec :\n\nà la racine :\n\nlang.po : fichier brut contenant les traductions\ngenerate_po.sh : script récupérant les libellés à traduire dans les fichiers php, les templates Smarty et dans le menu (fichier xml) et créant le fichier lang.po\ncompile.sh : script créant le fichier lang.mo (compilé) à partir des traductions présentes dans lang.po, et recopiant ce fichier dans le sous-dossier suivant\n\nen/LC_MESSAGES : dossier correspondant à la langue à afficher, qui contient le fichier lang.mo.\n\n\n\nLe serveur doit être configuré pour supporter la langue à afficher. Pour cela :\n\néditez le fichier /etc/locale.gen\ndécommentez la ligne en_GB.UTF-8\nlancez ces commandes :\n\nlocale-gen\nsystemctl restart apache2\nCette opération n’est à réaliser qu’une seule fois.\nPour créer les traductions :\n\nlancez le script generate_po.sh pour créer le fichier lang.po. Les anciennes traductions sont conservées.\néditez le fichier lang.po avec le programme poedit\ncompilez le fichier avec le script compile.sh. Le script va générer le fichier lang.mo, puis le recopier dans le dossier en/LC_MESSAGES"
  },
  {
    "objectID": "locale.html#mettre-en-place-les-traductions",
    "href": "locale.html#mettre-en-place-les-traductions",
    "title": "Support des langues",
    "section": "",
    "text": "Le serveur doit être configuré pour supporter la langue à afficher. Pour cela :\n\néditez le fichier /etc/locale.gen\ndécommentez la ligne en_GB.UTF-8\nlancez ces commandes :\n\nlocale-gen\nsystemctl restart apache2\nCette opération n’est à réaliser qu’une seule fois.\nPour créer les traductions :\n\nlancez le script generate_po.sh pour créer le fichier lang.po. Les anciennes traductions sont conservées.\néditez le fichier lang.po avec le programme poedit\ncompilez le fichier avec le script compile.sh. Le script va générer le fichier lang.mo, puis le recopier dans le dossier en/LC_MESSAGES"
  },
  {
    "objectID": "model.html",
    "href": "model.html",
    "title": "Gestion des accès aux données stockées en base de données",
    "section": "",
    "text": "Les classes permettant le dialogue avec la base de données sont stockées dans app/Models. Elles héritent toutes de la classe PpciModel, qui encapsule l’ensemble des fonctions d’accès et de mise à jour.\nPpciModel s’appuie autant que faire se peut sur les mécanismes intrinsèques de CodeIgniter. Toutefois, certaines fonctions d’écriture ont été réécrites pour mieux maîtriser les opérations réalisées dans la base de données.\n\n\nLors de l’initialisation d’une classe d’accès à une table, plusieurs paramètres sont à renseigner :\n\nle nom de la table\nla liste des colonnes avec, pour chacune, si elle doit être fournie (obligatoire), son type, s’il s’agit de la clé primaire de la table, la valeur par défaut en cas de création d’un nouvel enregistrement, et si l’attribut est une clé étrangère vers le parent de l’enregistrement courant\nsi la clé primaire est générée automatiquement ou pas par la base de données.\n\nExemple :\nnamespace App\\Models;\n\nuse Ppci\\Models\\PpciModel;\n\nclass Peche extends PpciModel\n{\n    public array $warning = array();\n\n    public function __construct()\n    {\n        $this-&gt;table = \"peche\";\n        $this-&gt;fields = array(\n            \"peche_id\" =&gt; array(\n                \"type\" =&gt; 1,\n                \"key\" =&gt; 1,\n                \"requis\" =&gt; 1,\n                \"defaultValue\" =&gt; 0\n            ),\n            \"trait_id\" =&gt; array(\n                \"type\" =&gt; 1,\n                \"requis\" =&gt; 1,\n                \"parentAttrib\" =&gt; 1\n            ),\n            \"uuid\" =&gt; array(\n                \"type\" =&gt; 0,\n                \"defaultValue\" =&gt; $this-&gt;getUUID()\n            ),\n        );\n        parent::__construct();\n    }\n}\n\n\n\n\n\n\n\n\n\nAttribut\nValeur\n\n\n\n\ntype\n0 : chaîne de caractères 1: numérique 2: date 3: date-heure 4: champ géographique (Postgis)\n\n\nkey\nSi 1, c’est la clé primaire de la table\n\n\nrequis\nSi 1, l’enregistrement échouera si la colonne n’est pas fournie ou est vide\n\n\nparentAttrib\nSi 1, la colonne est la clé étrangère, dans le cas d’une relation père-fils\n\n\ndefaultValue\nLa valeur par défaut, lors de la création d’un enregistrement.\n\n\n\nPar convention, pour tout nouvel enregistrement, la clé primaire prend la valeur 0.\n\n\n\nLes dates sont automatiquement transformées dans le format courant de la langue utilisée, tant pour les sélections que pour les mises à jour. Lors de l’initialisation de la classe, les tableaux  $this-&gt;dateFields et $this-&gt;datetimeFields sont renseignés à partir des informations déclarées. Il est possible de les compléter ponctuellement avant d’exécuter un select pour que des champs dates externes à la table, dans le cadre de jointures, soient également formatés.\nS’il est nécessaire de désactiver le formatage des date, il suffit d’indiquer :\n$this-&gt;autoformatDate = false;\n\n\n\nPar défaut, avant une mise à jour, les nombres sont traités pour remplacer la virgule par le point. Si ce mécanisme doit être désactivé, il suffit d’indiquer :\n$this-&gt;transformComma = false;\n\n\n\nLa classe intègre nativement la classe Message, qui permet d’envoyer des informations au navigateur ou d’enregistrer des messages d’erreur dans les logs du serveur (syslog). Elle est accessible via $this-&gt;message-&gt;set(...);\nLes erreurs d’exécution déclenchent une exception PpciException.\n\n\n\n\n\n\nprotected function executeQuery(string $sql, array $data = null, $onlyExecute = false)\nSynonyme : public function executeSQL(string $sql, array $data = null, $onlyExecute = false)\nExécute la requête $sql, avec le tableau de variables \\(data. Si `\\)onlyExecute` est à false, la fonction retourne un tableau de résultat. Les requêtes de modification doivent impérativement avoir cette dernière variable à true.\n\n\n\n\n\n\nSynonyme : public function ecrire(array $row): int\nEnregistre une ligne ($row) dans la base de données. La fonction gère automatiquement l’insertion ou la mise à jour.\nPour les champs géographiques, ceux-ci sont enregistrés avec la fonction ST_GeomFromText.\nRetour : la clé primaire de l’enregistrement traité.\n\n\n\nfunction writeTableNN(string $tablename, string $firstKey, string $secondKey, int $id, $data = array()): void\nSynonyme : function ecrireTableNN(string $tablename, string $firstKey, string $secondKey, int $id, $data = array()): void\nCette fonction traite le cas de l’enregistrement dans le cas d’une table n-n, c’est à dire liée à deux parents. Elle est typiquement utilisée pour traiter les valeurs multiples (sélection des membres dans un groupe, par exemple).\nElle va enregistrer dans $tablename, pour la clé correspondant au parent principal ($firstKey), l’ensemble des valeurs correspondant à la table liée ($secondKey), fournies sous forme de tableau ($data). La fonction va supprimer automatiquement toutes les valeurs pré-existantes qui ne figurent pas dans le tableau fourni.\n\n\n\nfunction updateBinary(int $id, string $fieldName, $data)\nLa fonction va écrire un contenu binaire dans la colonne $fieldName pour l’enregistrement identifié par la clé primaire $id. Dans la pratique, elle utilise la fonction php pg_escape_bytea.\n\n\n\nfunction delete($id = null, bool $purge = false)\nSynonyme : function supprimer($id)\nSupprime l’enregistrement $id. La valeur $purge ne sert à rien, elle est conservée pour des raisons de compatibilité avec les classes CodeIgniter.\n\n\n\nfunction deleteFromField(int $id, string $field)\nSynonyme : function supprimerChamp(int $id, string $field)\nCette fonction est utilisée pour supprimer les enregistrements enfants à partir d’un parent. Elle supprime tous les enregistrements dont le champ $field qui contient la valeur $id.\n\n\n\npublic function read(int $id, bool $getDefault = true, $parentKey = 0): array\nSynonyme : public function lire(int $id, bool $getDefault = true, $parentKey = 0): array\nLlt l’enregistrement dont la clé primaire vaut $id. Si $id vaut 0 ou est vide (nouvel enregistrement), et que $getDefault est positionné à true, le tableau retourné contiendra les valeurs par défaut définies dans le constructeur de la classe. Si $parentKey est défini, la clé étrangère du parent est également positionnée dans les valeurs par défaut.\n\n\n\npublic function getDefaultValues($parentKey = 0): array\nCrée un tableau contenant l’ensemble des valeurs par défaut, pour un nouvel enregistrement. \n\n\n\npublic function readParam(string $sql, array $param = null)\nSynonymes : \npublic function readParamAsPrepared(string $sql, array $param = null)\npublic function lireParam(string $sql, array $param = null)\npublic function lireParamAsPrepared(string $sql, array $param = null)\nRetourne un enregistrement correspondant au code SQL fourni (le premier enregistrement rencontré si une liste est retournée par la requête). Les variables utilisées dans la requête doivent être fournies dans le tableau $param.\n\n\n\npublic function getList(string $order = \"\"): array\nSynonyme : function getListe(string $order = \"\"): array\nExécute un select * sur la table, en rajoutant le cas échéant le terme order by $order si la variable est renseignée.\n\n\n\nfunction getListParam(string $sql, array $param = null): array\nSynonymes :\nfunction getListeParam(string $sql, array $param = null): array\nfunction getListeParamAsPrepared(string $sql, array $param = null): array\nRetourne le résultat de la requête. Les variables utilisées pour celle-ci sont fournies dans le tableau $param.\n\n\n\nfunction getListFromParent(int $parentId, $order = \"\"): array\nRetourne la liste des enregistrements enfants dont la clé étrangère vaut $parentId, triée ou non.\n\n\n\n\n\n\nprotected function formatDatesToDB(array $row): array\nTransforme les dates contenues dans l’enregistrement, en fonction du type (date, date/heure) et du format courant.\n\n\n\nfunction getUUID(): string\nExecute une fonction dans la base de données pour générer un UUID.\n\n\n\nfunction getDateTime(): string\nfunction getDateHeure(): string\n\n\n\nfunction getDate(): string\nfunction getDateJour(): string\n\n\n\nfunction disableMandatoryField(string $name)\nDésactive la valeur champ obligatoire pour un champ. Cette fonction peut être utilisée pour mettre à jour un enregistrement dont on sait par avance que la valeur n’est pas fournie."
  },
  {
    "objectID": "model.html#initialiser-une-classe",
    "href": "model.html#initialiser-une-classe",
    "title": "Gestion des accès aux données stockées en base de données",
    "section": "",
    "text": "Lors de l’initialisation d’une classe d’accès à une table, plusieurs paramètres sont à renseigner :\n\nle nom de la table\nla liste des colonnes avec, pour chacune, si elle doit être fournie (obligatoire), son type, s’il s’agit de la clé primaire de la table, la valeur par défaut en cas de création d’un nouvel enregistrement, et si l’attribut est une clé étrangère vers le parent de l’enregistrement courant\nsi la clé primaire est générée automatiquement ou pas par la base de données.\n\nExemple :\nnamespace App\\Models;\n\nuse Ppci\\Models\\PpciModel;\n\nclass Peche extends PpciModel\n{\n    public array $warning = array();\n\n    public function __construct()\n    {\n        $this-&gt;table = \"peche\";\n        $this-&gt;fields = array(\n            \"peche_id\" =&gt; array(\n                \"type\" =&gt; 1,\n                \"key\" =&gt; 1,\n                \"requis\" =&gt; 1,\n                \"defaultValue\" =&gt; 0\n            ),\n            \"trait_id\" =&gt; array(\n                \"type\" =&gt; 1,\n                \"requis\" =&gt; 1,\n                \"parentAttrib\" =&gt; 1\n            ),\n            \"uuid\" =&gt; array(\n                \"type\" =&gt; 0,\n                \"defaultValue\" =&gt; $this-&gt;getUUID()\n            ),\n        );\n        parent::__construct();\n    }\n}\n\n\n\n\n\n\n\n\n\nAttribut\nValeur\n\n\n\n\ntype\n0 : chaîne de caractères 1: numérique 2: date 3: date-heure 4: champ géographique (Postgis)\n\n\nkey\nSi 1, c’est la clé primaire de la table\n\n\nrequis\nSi 1, l’enregistrement échouera si la colonne n’est pas fournie ou est vide\n\n\nparentAttrib\nSi 1, la colonne est la clé étrangère, dans le cas d’une relation père-fils\n\n\ndefaultValue\nLa valeur par défaut, lors de la création d’un enregistrement.\n\n\n\nPar convention, pour tout nouvel enregistrement, la clé primaire prend la valeur 0.\n\n\n\nLes dates sont automatiquement transformées dans le format courant de la langue utilisée, tant pour les sélections que pour les mises à jour. Lors de l’initialisation de la classe, les tableaux  $this-&gt;dateFields et $this-&gt;datetimeFields sont renseignés à partir des informations déclarées. Il est possible de les compléter ponctuellement avant d’exécuter un select pour que des champs dates externes à la table, dans le cadre de jointures, soient également formatés.\nS’il est nécessaire de désactiver le formatage des date, il suffit d’indiquer :\n$this-&gt;autoformatDate = false;\n\n\n\nPar défaut, avant une mise à jour, les nombres sont traités pour remplacer la virgule par le point. Si ce mécanisme doit être désactivé, il suffit d’indiquer :\n$this-&gt;transformComma = false;\n\n\n\nLa classe intègre nativement la classe Message, qui permet d’envoyer des informations au navigateur ou d’enregistrer des messages d’erreur dans les logs du serveur (syslog). Elle est accessible via $this-&gt;message-&gt;set(...);\nLes erreurs d’exécution déclenchent une exception PpciException."
  },
  {
    "objectID": "model.html#fonctions-génériques-disponibles",
    "href": "model.html#fonctions-génériques-disponibles",
    "title": "Gestion des accès aux données stockées en base de données",
    "section": "",
    "text": "protected function executeQuery(string $sql, array $data = null, $onlyExecute = false)\nSynonyme : public function executeSQL(string $sql, array $data = null, $onlyExecute = false)\nExécute la requête $sql, avec le tableau de variables \\(data. Si `\\)onlyExecute` est à false, la fonction retourne un tableau de résultat. Les requêtes de modification doivent impérativement avoir cette dernière variable à true.\n\n\n\n\n\n\nSynonyme : public function ecrire(array $row): int\nEnregistre une ligne ($row) dans la base de données. La fonction gère automatiquement l’insertion ou la mise à jour.\nPour les champs géographiques, ceux-ci sont enregistrés avec la fonction ST_GeomFromText.\nRetour : la clé primaire de l’enregistrement traité.\n\n\n\nfunction writeTableNN(string $tablename, string $firstKey, string $secondKey, int $id, $data = array()): void\nSynonyme : function ecrireTableNN(string $tablename, string $firstKey, string $secondKey, int $id, $data = array()): void\nCette fonction traite le cas de l’enregistrement dans le cas d’une table n-n, c’est à dire liée à deux parents. Elle est typiquement utilisée pour traiter les valeurs multiples (sélection des membres dans un groupe, par exemple).\nElle va enregistrer dans $tablename, pour la clé correspondant au parent principal ($firstKey), l’ensemble des valeurs correspondant à la table liée ($secondKey), fournies sous forme de tableau ($data). La fonction va supprimer automatiquement toutes les valeurs pré-existantes qui ne figurent pas dans le tableau fourni.\n\n\n\nfunction updateBinary(int $id, string $fieldName, $data)\nLa fonction va écrire un contenu binaire dans la colonne $fieldName pour l’enregistrement identifié par la clé primaire $id. Dans la pratique, elle utilise la fonction php pg_escape_bytea.\n\n\n\nfunction delete($id = null, bool $purge = false)\nSynonyme : function supprimer($id)\nSupprime l’enregistrement $id. La valeur $purge ne sert à rien, elle est conservée pour des raisons de compatibilité avec les classes CodeIgniter.\n\n\n\nfunction deleteFromField(int $id, string $field)\nSynonyme : function supprimerChamp(int $id, string $field)\nCette fonction est utilisée pour supprimer les enregistrements enfants à partir d’un parent. Elle supprime tous les enregistrements dont le champ $field qui contient la valeur $id.\n\n\n\npublic function read(int $id, bool $getDefault = true, $parentKey = 0): array\nSynonyme : public function lire(int $id, bool $getDefault = true, $parentKey = 0): array\nLlt l’enregistrement dont la clé primaire vaut $id. Si $id vaut 0 ou est vide (nouvel enregistrement), et que $getDefault est positionné à true, le tableau retourné contiendra les valeurs par défaut définies dans le constructeur de la classe. Si $parentKey est défini, la clé étrangère du parent est également positionnée dans les valeurs par défaut.\n\n\n\npublic function getDefaultValues($parentKey = 0): array\nCrée un tableau contenant l’ensemble des valeurs par défaut, pour un nouvel enregistrement. \n\n\n\npublic function readParam(string $sql, array $param = null)\nSynonymes : \npublic function readParamAsPrepared(string $sql, array $param = null)\npublic function lireParam(string $sql, array $param = null)\npublic function lireParamAsPrepared(string $sql, array $param = null)\nRetourne un enregistrement correspondant au code SQL fourni (le premier enregistrement rencontré si une liste est retournée par la requête). Les variables utilisées dans la requête doivent être fournies dans le tableau $param.\n\n\n\npublic function getList(string $order = \"\"): array\nSynonyme : function getListe(string $order = \"\"): array\nExécute un select * sur la table, en rajoutant le cas échéant le terme order by $order si la variable est renseignée.\n\n\n\nfunction getListParam(string $sql, array $param = null): array\nSynonymes :\nfunction getListeParam(string $sql, array $param = null): array\nfunction getListeParamAsPrepared(string $sql, array $param = null): array\nRetourne le résultat de la requête. Les variables utilisées pour celle-ci sont fournies dans le tableau $param.\n\n\n\nfunction getListFromParent(int $parentId, $order = \"\"): array\nRetourne la liste des enregistrements enfants dont la clé étrangère vaut $parentId, triée ou non."
  },
  {
    "objectID": "model.html#fonctions-diverses",
    "href": "model.html#fonctions-diverses",
    "title": "Gestion des accès aux données stockées en base de données",
    "section": "",
    "text": "protected function formatDatesToDB(array $row): array\nTransforme les dates contenues dans l’enregistrement, en fonction du type (date, date/heure) et du format courant.\n\n\n\nfunction getUUID(): string\nExecute une fonction dans la base de données pour générer un UUID.\n\n\n\nfunction getDateTime(): string\nfunction getDateHeure(): string\n\n\n\nfunction getDate(): string\nfunction getDateJour(): string\n\n\n\nfunction disableMandatoryField(string $name)\nDésactive la valeur champ obligatoire pour un champ. Cette fonction peut être utilisée pour mettre à jour un enregistrement dont on sait par avance que la valeur n’est pas fournie."
  },
  {
    "objectID": "rights.html",
    "href": "rights.html",
    "title": "Droits d’accès aux modules",
    "section": "",
    "text": "Les droits sont déclarés dans le fichier app/Config/Rights.php. Les droits des modules gérés directement dans Ppci sont déclarés dans vendor/equinton/ppci/src/Config/Rights.php.\nPour tout module (route) qui doit être protégé, une entrée doit être rajoutée dans le tableau rights, ainsi : \nprotected array $rights = [\n    \"storageConditionList\" =&gt; [\"consult\"],\n    \"storageConditionChange\" =&gt; [\"param\", \"collection\"],\n    \"storageConditionWrite\" =&gt; [\"param\", \"collection\"],\n    \"storageConditionDelete\" =&gt; [\"param\", \"collection\"],\nLes droits par défaut gérés par Ppci sont les suivants :\n\nadmin : accès aux modules d’administration\nconsult : consultation des informations\nmanage : gestion au quotidien\nparam : accès aux paramètres du logiciel (rôle de l’administrateur métier)\n\nD’autres droits peuvent être rajoutés dans l’application, comme c’est le cas dans l’exemple ci-dessus avec le droit collection. Ils sont décrits avec les tables acl* du schéma gacl.\nLors de l’accès à un module protégé, les droits de l’utilisateur sont calculés par le filtre RightsFilter (cf. principes.html), et l’accès n’est accordé que si l’utilisateur dispose d’un des droits déclarés dans le tableau rights.\n\n\nLes droits sont gérés dans des tables présentes dans le schéma gacl.\n\nacllogin : liste des logins des utilisateurs. Si un compte est créé dans la base locale\nd’identification (table logingestion), un enregistrement est également créé dans cette table.\naclappli : liste des applications gérées. Il est possible de gérer, à partir de\nla même base de données, plusieurs ensembles de droits, qui utilisent les\nmêmes logins. Dans la pratique, une seule entrée figure dans cette table. La valeur de aclappli doit être identique à la variable de configuration app.GACL_aco.\naclaco : liste des droits déclarés dans l’application ;\naclgroup : liste des groupes contenant les logins, et qui détiennent les droits.\nUn groupe peut hériter d’un autre groupe. Les droits associés au groupe\nparent sont également attribués au groupe hérité ;\nacllogingroup : table permettant de déclarer les logins associés à un groupe ;\naclacl : table décrivant les droits détenus par un groupe.\n\nDans certains cas (identification LDAP ou CAS), et si la reconnaissance automatique des groupes est activée dans la configuration, il n’est pas nécessaire de déclarer les logins dans la table acllogin. C’est l’appartenance à un groupe de l’annuaire, déclaré par ailleurs dans la table aclgroup, qui permettra d’attribuer les droits.\nL’algorithme d’attribution des droits va fonctionner ainsi :\n\nrecherche des groupes auquel appartient le login, soit de manière formelle (déclaration dans la table acllogingroup), soit de manière induite (groupe de l’annuaire déclaré dans la table aclgroup), soit en récupérant les groupes dont hérite le groupe courant où est déclaré le login\npour chacun des groupes d’appartenance, recherche dans la table aclacl des droits attribués aux groupes."
  },
  {
    "objectID": "rights.html#organisation-des-droits-dans-la-base-de-données",
    "href": "rights.html#organisation-des-droits-dans-la-base-de-données",
    "title": "Droits d’accès aux modules",
    "section": "",
    "text": "Les droits sont gérés dans des tables présentes dans le schéma gacl.\n\nacllogin : liste des logins des utilisateurs. Si un compte est créé dans la base locale\nd’identification (table logingestion), un enregistrement est également créé dans cette table.\naclappli : liste des applications gérées. Il est possible de gérer, à partir de\nla même base de données, plusieurs ensembles de droits, qui utilisent les\nmêmes logins. Dans la pratique, une seule entrée figure dans cette table. La valeur de aclappli doit être identique à la variable de configuration app.GACL_aco.\naclaco : liste des droits déclarés dans l’application ;\naclgroup : liste des groupes contenant les logins, et qui détiennent les droits.\nUn groupe peut hériter d’un autre groupe. Les droits associés au groupe\nparent sont également attribués au groupe hérité ;\nacllogingroup : table permettant de déclarer les logins associés à un groupe ;\naclacl : table décrivant les droits détenus par un groupe.\n\nDans certains cas (identification LDAP ou CAS), et si la reconnaissance automatique des groupes est activée dans la configuration, il n’est pas nécessaire de déclarer les logins dans la table acllogin. C’est l’appartenance à un groupe de l’annuaire, déclaré par ailleurs dans la table aclgroup, qui permettra d’attribuer les droits.\nL’algorithme d’attribution des droits va fonctionner ainsi :\n\nrecherche des groupes auquel appartient le login, soit de manière formelle (déclaration dans la table acllogingroup), soit de manière induite (groupe de l’annuaire déclaré dans la table aclgroup), soit en récupérant les groupes dont hérite le groupe courant où est déclaré le login\npour chacun des groupes d’appartenance, recherche dans la table aclacl des droits attribués aux groupes."
  },
  {
    "objectID": "multi-instance.html",
    "href": "multi-instance.html",
    "title": "Gestion du multi-instances",
    "section": "",
    "text": "Créez un dossier dédié à l’instance dans l’arborescence du serveur, par exemple /var/www/app/instancename, puis créez les fichiers nécessaires pour assurer la séparation des instances :\n# Dossier contenant le code de l'application\nAPP=/var/www/app\n# Dossier comprenant les paramètres spécifiques de l'instance\nFOLDER=\"/var/www/instances/instancename\"\nmkdir -P $FOLDER\nchmod g+r $FOLDER\ncd $FOLDER\nmkdir temp\n# Nouvelles cles cryptographiques\nopenssl genpkey -algorithm rsa -out id_app -pkeyopt rsa_keygen_bits:2048\nopenssl rsa -in id_app -pubout -out id_app.pub\n# Recopie du fichier de parametrage\ncp $APP/env .env\n# Mise à niveau des droits\nchmod -R g+r .\nchmod g+w temp\nchown www-data id_app\nle dossier temp est le dossier dans lequel l’application va générer tous les fichiers avant leur envoi au navigateur. Pour éviter les risques de collision entre deux instances, il est vivement recommandé que chacune dispose de son propre espace.\n\n\n\nRajoutez, dans la description du site virtuel (fichier moninstance.conf, dans /etc/apache2/sites-available) :\n&lt;VirtualHost *:443&gt;\n    (...)\n    DocumentRoot /var/www/app\n    setenv envPath /var/www/instances/instancename\n    (...)  \n\n\n\nÉditez le fichier /var/www/instances/instancename/.env :\napp.baseURL = 'https://myinstance.mysociety.com'\nBASE_DIR = \"/var/www/instances/instancename\"\napp.privateKey = ${BASE_DIR}/id_app\napp.pubKey = ${BASE_DIR}/id_app.pub\napp.APP_temp = ${BASE_DIR}/temp\ndatabase.default.hostname = localhost\ndatabase.default.database = dbname_instance\ndatabase.default.username = login_instance\ndatabase.default.password = password_instance\nVérifiez également le mode d’identification par défaut, et adaptez-le le cas échéant.\n\n\n\nSi vous utilisez des scripts qui sont exécutés en ligne de commande, par exemple programmés à horaires réguliers (crontab), vous devrez modifier le script de lancement :\n#!/bin/bash\nexport envPath=/var/www/instances/instancename\ncd $envPath/public\nphp index.php monscript\noù monscript correspond à la route à appeler.\nLa variable envPath est disponible dans $_SERVER.\n\n\n\nLa fin du fichier index.php est modifié ainsi :\n//exit(CodeIgniter\\Boot::bootWeb($paths));\nrequire FCPATH. '../vendor/equinton/ppci/src/BootApp.php';\nexit (CodeIgniter\\BootApp::bootweb($paths));\nEt la classe BootApp contient ce code :\n&lt;?php\n\nnamespace CodeIgniter;\n\nuse CodeIgniter\\Boot;\nuse Config\\Paths;\nuse CodeIgniter\\Config\\DotEnv;\n\nclass BootApp extends Boot {\n\n    protected static function loadDotEnv(Paths $paths): void\n    {\n        require_once $paths-&gt;systemDirectory . '/Config/DotEnv.php';\n        if (is_file($file = $_SERVER[\"envPath\"] . DIRECTORY_SEPARATOR . \".env\") && is_readable($file)) {\n            (new DotEnv($_SERVER[\"envPath\"],\".env\"))-&gt;load();\n        } else {\n            (new DotEnv($paths-&gt;appDirectory . '/../'))-&gt;load();\n        }\n    }\n}\nAttention : l’utilisation d’un fichier .env placé ailleurs qu’à la racine de l’application empêche le fonctionnement des outils de débogage de CodeIgniter (mode développement)."
  },
  {
    "objectID": "multi-instance.html#créer-le-dossier-dédié-à-linstance",
    "href": "multi-instance.html#créer-le-dossier-dédié-à-linstance",
    "title": "Gestion du multi-instances",
    "section": "",
    "text": "Créez un dossier dédié à l’instance dans l’arborescence du serveur, par exemple /var/www/app/instancename, puis créez les fichiers nécessaires pour assurer la séparation des instances :\n# Dossier contenant le code de l'application\nAPP=/var/www/app\n# Dossier comprenant les paramètres spécifiques de l'instance\nFOLDER=\"/var/www/instances/instancename\"\nmkdir -P $FOLDER\nchmod g+r $FOLDER\ncd $FOLDER\nmkdir temp\n# Nouvelles cles cryptographiques\nopenssl genpkey -algorithm rsa -out id_app -pkeyopt rsa_keygen_bits:2048\nopenssl rsa -in id_app -pubout -out id_app.pub\n# Recopie du fichier de parametrage\ncp $APP/env .env\n# Mise à niveau des droits\nchmod -R g+r .\nchmod g+w temp\nchown www-data id_app\nle dossier temp est le dossier dans lequel l’application va générer tous les fichiers avant leur envoi au navigateur. Pour éviter les risques de collision entre deux instances, il est vivement recommandé que chacune dispose de son propre espace."
  },
  {
    "objectID": "multi-instance.html#mettre-à-niveau-du-site-virtuel-apache",
    "href": "multi-instance.html#mettre-à-niveau-du-site-virtuel-apache",
    "title": "Gestion du multi-instances",
    "section": "",
    "text": "Rajoutez, dans la description du site virtuel (fichier moninstance.conf, dans /etc/apache2/sites-available) :\n&lt;VirtualHost *:443&gt;\n    (...)\n    DocumentRoot /var/www/app\n    setenv envPath /var/www/instances/instancename\n    (...)"
  },
  {
    "objectID": "multi-instance.html#modifier-les-paramètres",
    "href": "multi-instance.html#modifier-les-paramètres",
    "title": "Gestion du multi-instances",
    "section": "",
    "text": "Éditez le fichier /var/www/instances/instancename/.env :\napp.baseURL = 'https://myinstance.mysociety.com'\nBASE_DIR = \"/var/www/instances/instancename\"\napp.privateKey = ${BASE_DIR}/id_app\napp.pubKey = ${BASE_DIR}/id_app.pub\napp.APP_temp = ${BASE_DIR}/temp\ndatabase.default.hostname = localhost\ndatabase.default.database = dbname_instance\ndatabase.default.username = login_instance\ndatabase.default.password = password_instance\nVérifiez également le mode d’identification par défaut, et adaptez-le le cas échéant."
  },
  {
    "objectID": "multi-instance.html#adapter-les-scripts-lancés-en-ligne-de-commande",
    "href": "multi-instance.html#adapter-les-scripts-lancés-en-ligne-de-commande",
    "title": "Gestion du multi-instances",
    "section": "",
    "text": "Si vous utilisez des scripts qui sont exécutés en ligne de commande, par exemple programmés à horaires réguliers (crontab), vous devrez modifier le script de lancement :\n#!/bin/bash\nexport envPath=/var/www/instances/instancename\ncd $envPath/public\nphp index.php monscript\noù monscript correspond à la route à appeler.\nLa variable envPath est disponible dans $_SERVER."
  },
  {
    "objectID": "multi-instance.html#technique-modifications-apportées-au-code-pour-gérer-le-multi-instances",
    "href": "multi-instance.html#technique-modifications-apportées-au-code-pour-gérer-le-multi-instances",
    "title": "Gestion du multi-instances",
    "section": "",
    "text": "La fin du fichier index.php est modifié ainsi :\n//exit(CodeIgniter\\Boot::bootWeb($paths));\nrequire FCPATH. '../vendor/equinton/ppci/src/BootApp.php';\nexit (CodeIgniter\\BootApp::bootweb($paths));\nEt la classe BootApp contient ce code :\n&lt;?php\n\nnamespace CodeIgniter;\n\nuse CodeIgniter\\Boot;\nuse Config\\Paths;\nuse CodeIgniter\\Config\\DotEnv;\n\nclass BootApp extends Boot {\n\n    protected static function loadDotEnv(Paths $paths): void\n    {\n        require_once $paths-&gt;systemDirectory . '/Config/DotEnv.php';\n        if (is_file($file = $_SERVER[\"envPath\"] . DIRECTORY_SEPARATOR . \".env\") && is_readable($file)) {\n            (new DotEnv($_SERVER[\"envPath\"],\".env\"))-&gt;load();\n        } else {\n            (new DotEnv($paths-&gt;appDirectory . '/../'))-&gt;load();\n        }\n    }\n}\nAttention : l’utilisation d’un fichier .env placé ailleurs qu’à la racine de l’application empêche le fonctionnement des outils de débogage de CodeIgniter (mode développement)."
  },
  {
    "objectID": "functions.html",
    "href": "functions.html",
    "title": "Fonctions et services",
    "section": "",
    "text": "Les services permettent de conserver la même instance d’une classe tout au long de l’exécution du script. Ils sont décrits dans Ppci\\Config\\Services.\nIls s’appellent de la façon suivante :\n$monService = service ('name');\nLa première fois que le code est appelé, la classe est instanciée. Ensuite, l’instance de classe est fournie, ce qui permet de conserver les mêmes paramètres.\nTrois types de services sont configurés : des services génériques, les services fournissant les paramètres de configuration, et les vues.\n\n\n\n\nCode utilisé systématiquement à l’appel d’une page.\n\n\n\nClasse permettant de stocker des messages, puis de les restituer. Deux fonctions sont utilisables pour les enregistrer :\n\nfunction set(string $value, bool $is_error = false) : stocke un message. S’il s’agit d’une erreur, le message sera ensuite affiché en rouge\nfunction setSyslog($message, $is_error = false) : enregistre un message dans les logs du système. En mode développement, le message est affiché également à l’écran\n\n\n\n\nClasse permettant d’enregistrer une information dans la table gacl.log. Une entrée peut être créée avec la fonction $col-&gt;setLog($login, $module, $commentaire = null). La valeur login peut être récupérée à partir de $_SESSION[\"login\"]. $module représente le nom de la fonction ou de l’appel à enregistrer, et $commentaire un contenu particulier à noter.\n\n\n\nClasse permettant de paramétrer la langue à utiliser. Les libellés peuvent être modifiés avec la fonction setLocale($locale). Par défaut, seuls “fr” et “en” sont actuellement supportés.\n\n\n\n\n\n\nClasse contenant l’ensemble des paramètres stockés dans la table dbparam. Les paramètres sont accessibles avec l’attribut $dbparam-&gt;params[\"nom_parametre\"].\nLes paramètres sont également disponibles dans la variable $_SESSION[\"dbparams\"].\n\n\n\nContient les paramètres généraux de l’application (App\\Config\\App).\n\n\n\nContient les paramètres liés à l’identification (Ppci\\Config\\IdentificationConfig).\n\n\n\n\nLa description des vues peut être consultée ici.\n\n\n\n\nLes fonctions sont chargées automatiquement à partir de ppci/Helpers/ppci_helper.php.\n\ndefaultPage() : affiche la page d’accueil de l’application (sans redirection)\ngetLineFeed() : restitue le code de retour à la ligne en fonction du contexte : serveur web ou ligne de commande\nhtmlDecode($content) : fonction récursive permettant de décoder les caractères html (htmlspecialchars_decode())\nprintA($variable) : affiche le contenu d’une variable. Pour les tableaux, affiche le contenu du tableau. Utilisé pour le débogage\nsetlogRequest($request) : écrit dans la table gacl.log la requête demandée\ntest($var = \"\") : affiche le mot “test” et le numéro de l’occurrence où la fonction a été appelée. Si $var est renseigné, affiche son contenu"
  },
  {
    "objectID": "functions.html#services",
    "href": "functions.html#services",
    "title": "Fonctions et services",
    "section": "",
    "text": "Les services permettent de conserver la même instance d’une classe tout au long de l’exécution du script. Ils sont décrits dans Ppci\\Config\\Services.\nIls s’appellent de la façon suivante :\n$monService = service ('name');\nLa première fois que le code est appelé, la classe est instanciée. Ensuite, l’instance de classe est fournie, ce qui permet de conserver les mêmes paramètres.\nTrois types de services sont configurés : des services génériques, les services fournissant les paramètres de configuration, et les vues.\n\n\n\n\nCode utilisé systématiquement à l’appel d’une page.\n\n\n\nClasse permettant de stocker des messages, puis de les restituer. Deux fonctions sont utilisables pour les enregistrer :\n\nfunction set(string $value, bool $is_error = false) : stocke un message. S’il s’agit d’une erreur, le message sera ensuite affiché en rouge\nfunction setSyslog($message, $is_error = false) : enregistre un message dans les logs du système. En mode développement, le message est affiché également à l’écran\n\n\n\n\nClasse permettant d’enregistrer une information dans la table gacl.log. Une entrée peut être créée avec la fonction $col-&gt;setLog($login, $module, $commentaire = null). La valeur login peut être récupérée à partir de $_SESSION[\"login\"]. $module représente le nom de la fonction ou de l’appel à enregistrer, et $commentaire un contenu particulier à noter.\n\n\n\nClasse permettant de paramétrer la langue à utiliser. Les libellés peuvent être modifiés avec la fonction setLocale($locale). Par défaut, seuls “fr” et “en” sont actuellement supportés.\n\n\n\n\n\n\nClasse contenant l’ensemble des paramètres stockés dans la table dbparam. Les paramètres sont accessibles avec l’attribut $dbparam-&gt;params[\"nom_parametre\"].\nLes paramètres sont également disponibles dans la variable $_SESSION[\"dbparams\"].\n\n\n\nContient les paramètres généraux de l’application (App\\Config\\App).\n\n\n\nContient les paramètres liés à l’identification (Ppci\\Config\\IdentificationConfig).\n\n\n\n\nLa description des vues peut être consultée ici."
  },
  {
    "objectID": "functions.html#fonctions",
    "href": "functions.html#fonctions",
    "title": "Fonctions et services",
    "section": "",
    "text": "Les fonctions sont chargées automatiquement à partir de ppci/Helpers/ppci_helper.php.\n\ndefaultPage() : affiche la page d’accueil de l’application (sans redirection)\ngetLineFeed() : restitue le code de retour à la ligne en fonction du contexte : serveur web ou ligne de commande\nhtmlDecode($content) : fonction récursive permettant de décoder les caractères html (htmlspecialchars_decode())\nprintA($variable) : affiche le contenu d’une variable. Pour les tableaux, affiche le contenu du tableau. Utilisé pour le débogage\nsetlogRequest($request) : écrit dans la table gacl.log la requête demandée\ntest($var = \"\") : affiche le mot “test” et le numéro de l’occurrence où la fonction a été appelée. Si $var est renseigné, affiche son contenu"
  },
  {
    "objectID": "views.html",
    "href": "views.html",
    "title": "Les vues",
    "section": "",
    "text": "Les vues\nL’envoi d’informations au navigateur fait appel à des vues, chacune étant dédiée à un type d’informations (pages web, fichiers pdf, requêtes Ajax, fichiers binaires, etc.). Elles sont disponibles sous forme de services (décrits dans ppci/Config/Services.php), et sont physiquement stockées dans Ppci/Libraries/Views.\nToutes les vues héritent de la classe Ppci\\Libraries\\Views\\DefaultView, qui comprend les fonctions génériques suivantes :\n\nfunction set($value, $variable = \"\") : affecte un contenu (nommé ou non, si variable est renseigné) à la vue\nfunction get($variable = \"\") : récupère le contenu d’une variable ou le contenu affecté\nfunction encodehtml($data) : fonction récursive d’encodage en HTML des variables\nfunction send($param = \"\") : déclenche l’envoi des informations. Cette fonction est systématiquement réécrite dans chaque vue.\n\n\nAffichage des pages\n$view = service (\"Smarty\");\nLes pages web sont générées avec le moteur de templates Smarty. Les modèles sont stockés :\n\nd’une part dans Ppci/Views/templates/ppci, qui comprend toutes les pages gérées par Ppci, ainsi que la page par défaut (main.html)\nd’autre part dans App/Views/templates, pour les pages spécifiques de l’application.\n\nAu moment du déclenchement de l’affichage, la classe va :\n\nencoder les variables en HTML, sauf celles qui sont référencées dans le tableau $view-&gt;htmlVars\ngénérer le jeton CSRF\nafficher les messages stockés dans la classe Message\ngénérer le menu de l’application\nrajouter divers contenus génériques, comme le titre de l’application.\n\n\n\nEnvoi d’un fichier binaire au navigateur\n$view = service (\"BinaryView\");\nLa classe permet d’envoyer le fichier soit “en ligne”, soit en “attachement”. Elle peut soit envoyer un fichier à partir de son adresse dans le serveur, soit un fichier déjà ouvert (handle). Elle va également rechercher le type MIME si celui-ci n’est pas fourni.\nPour fonctionner, il est nécessaire d’indiquer des paramètres particuliers :\n$param = array(\n        \"filename\" =&gt; \"\", /* nom du fichier tel qu'il apparaitra dans le navigateur */\n        \"disposition\" =&gt; \"attachment\", /* attachment : le fichier est telecharge, inline : le fichier est affiche */\n        \"tmp_name\" =&gt; \"\", /* emplacement du fichier dans le serveur */\n        \"content_type\" =&gt; \"\", /* type mime */\n        \"is_reference\" =&gt; false, /* if true, tmp_name contains the handle of the opened file */\n        \"handle\" =&gt; 0);\nsetParam(?array $param);\n\n\nEnvoi d’un fichier\n$view = service (\"FileView\");\nLe fonctionnement est assez semblable à BinaryView, à ceci près que cela ne travaille qu’à partir d’un fichier existant. le type MIME peut également être recherché automatiquement s’il n’est pas indiqué.\n$param = array(\n        \"filename\" =&gt; \"export.txt\", /* nom du fichier tel qu'il apparaitra dans le navigateur */\n        \"disposition\" =&gt; \"attachment\", /* attachment : le fichier est telecharge, inline : le fichier est affiche */\n        \"content_type\" =&gt; \"\", /* type mime */\n        \"tmp_name\" =&gt; \"\", /* Name of the file to send */\n    );\n\n\nRequête Ajax\n$view = service (\"AjaxView\");\nVue utilisée pour répondre à une requête Ajax. Le contenu, qui est fourni par défaut sous forme de tableau (contenu Json possible en positionnant la variable is_json à true), est encodé en html puis transformé en chaîne JSON avant d’être envoyé au navigateur.\n\n\nEnvoi d’un fichier CSV\n$view = service (\"CsvView\");\nCette vue va permettre de générer un fichier CSV à partir d’un tableau ($data[][]). La génération et l’envoi du fichier est réalisé avec la fonction :\nfunction send($filename = \"\", $delimiter = \"\")\nLe nom du fichier peut être généré automatiquement. Le délimiteur peut être le point-virgule, la virgule ou la tabulation (indiquer ). La première ligne d’entête est générée à partir des clés du premier enregistrement du tableau.\n\n\nEnvoi d’un fichier JSON\n$view = service (\"JsonFileView\");\nLa vue génère un fichier dans le navigateur, avec un fonctionnement proche de la vue Ajax. Si les données sont fournies à la classe sous forme de tableau, celles-ci sont encodées en html avant transformation en Json.\n\n\nEnvoi d’un fichier PDF\n$view = service (\"PdfView\");\nTransfert un fichier PDF, soit directement pour être affiché, soit en fichier attaché. Même fonctionnement que la vue FileView.\n\n\nEnvoi un contenu arbitraire au navigateur\n$view = service (\"DisplayView\");\nC’est une vue qui transmet au navigateur un contenu quelconque, sans encodage ni type MIME."
  },
  {
    "objectID": "smarty.html",
    "href": "smarty.html",
    "title": "Affichage des pages web",
    "section": "",
    "text": "Les pages web sont générées avec le moteur de templates Smarty ([https://www.smarty.net/). Les modèles sont stockés à deux endroits :\n\nvendors/equinton/ppci/src/Views/templates/ppci, qui contient :\n\nla page principale de l’application main.html, la seule page appelée\nl’entête (header.tpl), qui comprend le menu, et le bas de page (footer.tpl)\nle chargement des bibliothèques javascript génériques (main_js.tpl), dont bootstrap 3, datatables, etc.\ntoutes les templates nécessaires pour la gestion des droits et des utilisateurs, plus quelques pages communes à l’ensemble des applications (module d’interrogation sql, par exemple)\nles modèles de mails (sous-dossier mail)\n\napp/Views/templates : les modèles spécifiques de l’application, dont :\n\nla page d’accueil : main.tpl\nle chargement des librairies javascript spécifiques : app_js.tpl\nles pages À propos about_fr.tpl et about_en.tpl\n\n\nLe moteur Smarty va préparer des pages PHP lors de l’opération de compilation. Ces pages sont stockées dans le dossier writable/templates_c.\n\n\nBootstrap 3 a été compilé en utilisant les couleurs de la charte graphique de l’ex Irstea. Des styles CSS complémentaires sont disponibles dans le fichier public/display/CSS/bootstrap-prototypephp.css.\n\n\n\nLes images sont en principe stockées dans le dossier public/display/images.\nLa plupart des bibliothèques Javascript sont gérées par npm, et sont stockées dans public/display/node-modules. Si des scripts complémentaires sont nécessaires (et non intégrés dans les templates Smarty), vous les retrouverez dans le dossier public/display/javascript.\n\n\n\nL’affichage des pages HTML est confié à la vue SmartyPpci, qui peut être instanciée ainsi :\n$view = service (\"Smarty\");\nConsultez la page views.html pour le détail de son fonctionnement.\n\n\n\nLa plupart des formulaires sont construits ainsi :\n&lt;form class=\"form-horizontal\" id=\"appliForm\" method=\"post\" action=\"appliChange\"&gt;\n    &lt;input type=\"hidden\" name=\"aclappli_id\" value=\"{$data.aclappli_id}\"&gt;\n    &lt;input type=\"hidden\" name=\"moduleBase\" value=\"appli\"&gt;\n    &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"appli\" class=\"control-label col-md-4\"&gt;&lt;span class=\"red\"&gt;*&lt;/span&gt; \n                {t}Nom de l'application :{/t}\n        &lt;/label&gt;\n        &lt;div class=\"col-md-8\"&gt;\n            &lt;input id=\"appli\" type=\"text\" name=\"appli\" class=\"form-control\" value=\"{$data.appli}\"\n                    autofocus required&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"applidetail\" class=\"control-label col-md-4\"&gt;{t}Description :{/t} &lt;/label&gt;\n        &lt;div class=\"col-md-8\"&gt;\n            &lt;input id=\"applidetail\" type=\"text\" class=\"form-control\" name=\"applidetail\"\n                    value=\"{$data.applidetail}\"&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"form-group center\"&gt;\n        &lt;button type=\"submit\" class=\"btn btn-primary button-valid\"&gt;{t}Valider{/t}&lt;/button&gt;\n        {if $data.aclappli_id &gt; 0 }\n        &lt;button class=\"btn btn-danger button-delete\"&gt;{t}Supprimer{/t}&lt;/button&gt;\n        {/if}\n    &lt;/div&gt;\n    {$csrf}\n&lt;/form&gt;\nDans la balise form, l’action correspond à la route à appeler. La variable moduleBase comprend le radical de la route : l’appui sur le bouton supprimer (classe button-delete) va modifier la route en la remplaçant par le contenu de moduleBase concaténé à Delete.\nLa plupart des classes sont celles fournies par Bootstrap 3.\nLa variable {$csrf} contient le champ &lt;input type=\"hidden\" name=\"csrf_app_name\" value=\"xxxxxx\"&gt; généré par CodeIgniter et utilisé pour prévenir les attaques de type cross script request forgery.\n\n\n\nLes tableaux, dans leur immense majorité, utilisent le composant Datatables pour leur affichage. Voici un exemple typique d’appel :\n&lt;table id=\"appliListe\" class=\"table table-bordered table-hover datatable display\" data-order='[[ 0, \"asc\" ]]'&gt;\nLa classe datatable est décrite dans le template main_js.tpl. Elle contient l’initialisation du composant Datatables avec la gestion des traductions et une pré-programmation des fonctions proposées. Plusieurs classes permettent rapidement de gérer les différentes fonctionnalités activables :\n\n\n\n\n\n\n\n\n\n\nclasse\nRecherche\nPagination\nTri\nBoutons d’exportation\n\n\n\n\ndatatable\n\nX\nX\n\n\n\ndatatable-nopaging-nosearching\n\n\nX\n\n\n\ndatatable-searching\nX\nX\nX\n\n\n\ndatatable-nopaging\nX\n\nX\n\n\n\ndatatable-nopaging-nosort\nX\n\n\n\n\n\ndatatable-nosort\n\nX\n\n\n\n\ndatatable-export\nX\n\nX\nX\n\n\ndatatable-export-paging\nX\nX\nX\nX\n\n\n\nLes tableaux utilisent le composant moment pour pouvoir gérer les dates.\n\n\n\n\nnombre : contrôle de la saisie de nombres entiers\ntaux : contrôle de la saisie de nombres décimaux (séparateur : point)\nuuid : vérification de champs contenant un identifiant de type UUID\ndatepicker : sélection d’une date\ndatetimepicker : sélection d’une date/heure\ntimepicker : sélection d’une heure (hh:mm:ss)\ntextarea-edit : zone de texte multiligne (textarea) avec gestion des tabulations pour obtenir des retraits du texte\nconfirm : affichage d’une boite de confirmation sur le clic ou l’appui d’une touche\n\nDeux plus, deux fonctions complémentaires sont disponibles :\n\nencodeHtml(content) : encode en HTML une chaîne de caractères. C’est une fonction utilisée pour encoder une information récupérée par une requête Ajax\noperationConfirm() : affiche une boite de dialogue pour confirmer l’opération à exécuter.\n\n\n\n\nLes traductions des libellés sont assurés par la bibliothèque smarty-gettext. Les libellés à traduire doivent être compris entre les balises {t} et {/t}.\nPour plus de détail sur la gestion des traductions, consultez cette page.\n\n\n\n\nLe menu est construit dynamiquement en prenant en compte les droits de l’utilisateur. Il est décrit dans le fichier app/Config/menu.xml, et est structuré ainsi :\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;menu xmlns:its=\"http://www.w3.org/2005/11/its\" its:version=\"2.0\"&gt;\n    &lt;its:rules version=\"2.0\"&gt;\n        &lt;its:translateRule selector=\"//item/@label\" translate=\"yes\" /&gt;\n        &lt;its:translateRule selector=\"//item/@tooltip\" translate=\"yes\" /&gt;\n    &lt;/its:rules&gt;\n\n    &lt;item module=\"manage\" label=\"Gestion\" tooltip=\"Gestion\"&gt;\n        &lt;item divider='1' droits=\"param\" /&gt;\n        &lt;item module=\"requestList\" label=\"Requêtes SQL\" tooltip=\"Exécution de requêtes SQL dans la base de données\" droits=\"param\" /&gt;\n    &lt;/item&gt;\n&lt;/menu&gt;\nLes commandes translateRule sont utilisées pour la génération des traductions. Chaque entrée de menu peut contenir un sous-menu : dans l’exemple ci-dessus, le premier niveau (module=manage) contient deux entrées.\nPour chaque entrée, il est possible d’indiquer :\n\nmodule : le nom de la route (appellation CodeIgniter) qui doit être appelée\nlabel : le libellé qui est affiché\ntooltip : le texte qui s’affiche au survol\ndroits : les droits dont doit disposer l’utilisateur pour que l’entrée du menu soit affichée\nonlynoconnect=“1” : l’entrée n’est affichée que si l’utilisateur n’est pas connecté (utilisé pour afficher le bouton de connexion, notamment)\nloginrequis=“1” : l’entrée n’est affichée que si l’utilisateur est connecté\n\nSeuls les trois premiers attributs sont obligatoires.\nIl est également possible de tracer une ligne de séparation en ajoutant l’attribut divider=“1” (avec ou sans droits).\nLe menu est stocké en variable de session sous forme de liste (attributs &lt;ul&gt;&lt;li&gt;), et est généré à chaque changement d’état de l’utilisateur (connexion, déconnexion)."
  },
  {
    "objectID": "smarty.html#principe-général",
    "href": "smarty.html#principe-général",
    "title": "Affichage des pages web",
    "section": "",
    "text": "Les pages web sont générées avec le moteur de templates Smarty ([https://www.smarty.net/). Les modèles sont stockés à deux endroits :\n\nvendors/equinton/ppci/src/Views/templates/ppci, qui contient :\n\nla page principale de l’application main.html, la seule page appelée\nl’entête (header.tpl), qui comprend le menu, et le bas de page (footer.tpl)\nle chargement des bibliothèques javascript génériques (main_js.tpl), dont bootstrap 3, datatables, etc.\ntoutes les templates nécessaires pour la gestion des droits et des utilisateurs, plus quelques pages communes à l’ensemble des applications (module d’interrogation sql, par exemple)\nles modèles de mails (sous-dossier mail)\n\napp/Views/templates : les modèles spécifiques de l’application, dont :\n\nla page d’accueil : main.tpl\nle chargement des librairies javascript spécifiques : app_js.tpl\nles pages À propos about_fr.tpl et about_en.tpl\n\n\nLe moteur Smarty va préparer des pages PHP lors de l’opération de compilation. Ces pages sont stockées dans le dossier writable/templates_c.\n\n\nBootstrap 3 a été compilé en utilisant les couleurs de la charte graphique de l’ex Irstea. Des styles CSS complémentaires sont disponibles dans le fichier public/display/CSS/bootstrap-prototypephp.css.\n\n\n\nLes images sont en principe stockées dans le dossier public/display/images.\nLa plupart des bibliothèques Javascript sont gérées par npm, et sont stockées dans public/display/node-modules. Si des scripts complémentaires sont nécessaires (et non intégrés dans les templates Smarty), vous les retrouverez dans le dossier public/display/javascript.\n\n\n\nL’affichage des pages HTML est confié à la vue SmartyPpci, qui peut être instanciée ainsi :\n$view = service (\"Smarty\");\nConsultez la page views.html pour le détail de son fonctionnement.\n\n\n\nLa plupart des formulaires sont construits ainsi :\n&lt;form class=\"form-horizontal\" id=\"appliForm\" method=\"post\" action=\"appliChange\"&gt;\n    &lt;input type=\"hidden\" name=\"aclappli_id\" value=\"{$data.aclappli_id}\"&gt;\n    &lt;input type=\"hidden\" name=\"moduleBase\" value=\"appli\"&gt;\n    &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"appli\" class=\"control-label col-md-4\"&gt;&lt;span class=\"red\"&gt;*&lt;/span&gt; \n                {t}Nom de l'application :{/t}\n        &lt;/label&gt;\n        &lt;div class=\"col-md-8\"&gt;\n            &lt;input id=\"appli\" type=\"text\" name=\"appli\" class=\"form-control\" value=\"{$data.appli}\"\n                    autofocus required&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"applidetail\" class=\"control-label col-md-4\"&gt;{t}Description :{/t} &lt;/label&gt;\n        &lt;div class=\"col-md-8\"&gt;\n            &lt;input id=\"applidetail\" type=\"text\" class=\"form-control\" name=\"applidetail\"\n                    value=\"{$data.applidetail}\"&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"form-group center\"&gt;\n        &lt;button type=\"submit\" class=\"btn btn-primary button-valid\"&gt;{t}Valider{/t}&lt;/button&gt;\n        {if $data.aclappli_id &gt; 0 }\n        &lt;button class=\"btn btn-danger button-delete\"&gt;{t}Supprimer{/t}&lt;/button&gt;\n        {/if}\n    &lt;/div&gt;\n    {$csrf}\n&lt;/form&gt;\nDans la balise form, l’action correspond à la route à appeler. La variable moduleBase comprend le radical de la route : l’appui sur le bouton supprimer (classe button-delete) va modifier la route en la remplaçant par le contenu de moduleBase concaténé à Delete.\nLa plupart des classes sont celles fournies par Bootstrap 3.\nLa variable {$csrf} contient le champ &lt;input type=\"hidden\" name=\"csrf_app_name\" value=\"xxxxxx\"&gt; généré par CodeIgniter et utilisé pour prévenir les attaques de type cross script request forgery.\n\n\n\nLes tableaux, dans leur immense majorité, utilisent le composant Datatables pour leur affichage. Voici un exemple typique d’appel :\n&lt;table id=\"appliListe\" class=\"table table-bordered table-hover datatable display\" data-order='[[ 0, \"asc\" ]]'&gt;\nLa classe datatable est décrite dans le template main_js.tpl. Elle contient l’initialisation du composant Datatables avec la gestion des traductions et une pré-programmation des fonctions proposées. Plusieurs classes permettent rapidement de gérer les différentes fonctionnalités activables :\n\n\n\n\n\n\n\n\n\n\nclasse\nRecherche\nPagination\nTri\nBoutons d’exportation\n\n\n\n\ndatatable\n\nX\nX\n\n\n\ndatatable-nopaging-nosearching\n\n\nX\n\n\n\ndatatable-searching\nX\nX\nX\n\n\n\ndatatable-nopaging\nX\n\nX\n\n\n\ndatatable-nopaging-nosort\nX\n\n\n\n\n\ndatatable-nosort\n\nX\n\n\n\n\ndatatable-export\nX\n\nX\nX\n\n\ndatatable-export-paging\nX\nX\nX\nX\n\n\n\nLes tableaux utilisent le composant moment pour pouvoir gérer les dates.\n\n\n\n\nnombre : contrôle de la saisie de nombres entiers\ntaux : contrôle de la saisie de nombres décimaux (séparateur : point)\nuuid : vérification de champs contenant un identifiant de type UUID\ndatepicker : sélection d’une date\ndatetimepicker : sélection d’une date/heure\ntimepicker : sélection d’une heure (hh:mm:ss)\ntextarea-edit : zone de texte multiligne (textarea) avec gestion des tabulations pour obtenir des retraits du texte\nconfirm : affichage d’une boite de confirmation sur le clic ou l’appui d’une touche\n\nDeux plus, deux fonctions complémentaires sont disponibles :\n\nencodeHtml(content) : encode en HTML une chaîne de caractères. C’est une fonction utilisée pour encoder une information récupérée par une requête Ajax\noperationConfirm() : affiche une boite de dialogue pour confirmer l’opération à exécuter.\n\n\n\n\nLes traductions des libellés sont assurés par la bibliothèque smarty-gettext. Les libellés à traduire doivent être compris entre les balises {t} et {/t}.\nPour plus de détail sur la gestion des traductions, consultez cette page."
  },
  {
    "objectID": "smarty.html#gestion-du-menu",
    "href": "smarty.html#gestion-du-menu",
    "title": "Affichage des pages web",
    "section": "",
    "text": "Le menu est construit dynamiquement en prenant en compte les droits de l’utilisateur. Il est décrit dans le fichier app/Config/menu.xml, et est structuré ainsi :\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;menu xmlns:its=\"http://www.w3.org/2005/11/its\" its:version=\"2.0\"&gt;\n    &lt;its:rules version=\"2.0\"&gt;\n        &lt;its:translateRule selector=\"//item/@label\" translate=\"yes\" /&gt;\n        &lt;its:translateRule selector=\"//item/@tooltip\" translate=\"yes\" /&gt;\n    &lt;/its:rules&gt;\n\n    &lt;item module=\"manage\" label=\"Gestion\" tooltip=\"Gestion\"&gt;\n        &lt;item divider='1' droits=\"param\" /&gt;\n        &lt;item module=\"requestList\" label=\"Requêtes SQL\" tooltip=\"Exécution de requêtes SQL dans la base de données\" droits=\"param\" /&gt;\n    &lt;/item&gt;\n&lt;/menu&gt;\nLes commandes translateRule sont utilisées pour la génération des traductions. Chaque entrée de menu peut contenir un sous-menu : dans l’exemple ci-dessus, le premier niveau (module=manage) contient deux entrées.\nPour chaque entrée, il est possible d’indiquer :\n\nmodule : le nom de la route (appellation CodeIgniter) qui doit être appelée\nlabel : le libellé qui est affiché\ntooltip : le texte qui s’affiche au survol\ndroits : les droits dont doit disposer l’utilisateur pour que l’entrée du menu soit affichée\nonlynoconnect=“1” : l’entrée n’est affichée que si l’utilisateur n’est pas connecté (utilisé pour afficher le bouton de connexion, notamment)\nloginrequis=“1” : l’entrée n’est affichée que si l’utilisateur est connecté\n\nSeuls les trois premiers attributs sont obligatoires.\nIl est également possible de tracer une ligne de séparation en ajoutant l’attribut divider=“1” (avec ou sans droits).\nLe menu est stocké en variable de session sous forme de liste (attributs &lt;ul&gt;&lt;li&gt;), et est généré à chaque changement d’état de l’utilisateur (connexion, déconnexion)."
  },
  {
    "objectID": "libraries.html",
    "href": "libraries.html",
    "title": "Bibliothèques",
    "section": "",
    "text": "Le code “actif” de l’application, c’est à dire celui qui enchaîne les actions, est décrit dans les bibliothèques (librairies). En général, on retrouve une librairie par table, mais ce n’est pas systématique.\nLes librairies héritent systématiquement de PpciLibrary, et contiennent en général les fonction suivantes :\n\nlist : affichage de la liste des enregistrements de la table\ndisplay : affichage du détail d’un enregistrement\nchange : affichage de la page de modification\nwrite : écriture en base de données\ndelete : suppression de l’enregistrement.\n\nSelon le cas, write et delete renvoient soit vers display, soit vers list et, en cas de problème, la fonction recharge la page change.\nDans certains cas, notamment quand les fonctions peuvent être appelées depuis des endroits différents dans l’application, les fonctions renvoient simplement la valeur true ou  false, et c’est le contrôleur qui se chargera d’appeler la fonction d’affichage, notamment après les opérations d’enregistrement.\n\n\nElle gère l’accès direct à quelques services :\n\n$this-&gt;message : affichage de messages à l’écran et enregistrement de messages techniques dans Syslog\n$this-&gt;appConfig : accès aux paramètres de configuration stockés dans app/Config/App.php ou mis à jour par l’intermédiaire de .env\n$this-&gt;log : enregistrement de traces dans la table gacl.log de la base de données.\n\nPour qu’elle fonctionne correctement, elle doit être initialisée ainsi : \nfunction __construct()\n    {\n        parent::__construct();\n        $this-&gt;dataclass = new ModelsBorrower();\n        $this-&gt;keyName = \"borrower_id\";\n        if (isset($_REQUEST[$this-&gt;keyName])) {\n            $this-&gt;id = $_REQUEST[$this-&gt;keyName];\n        }\n    }\n$this-&gt;dataclass doit être une classe héritée de PpciModel. \nElle dispose également de fonctions génériques, qui permettent de simplifier l’écriture des classes dans l’application. Celles-ci déclenchent systématiquement une exception PpciException en cas d’erreur rencontrée.\n\n\nfunction dataRead($id, $smartyPage, $idParent = 0)\nLa fonction appelle $this-&gt;dataclass-&gt;read ($id, true, $idParent), affecte le tableau de données lu à la variable $data, puis déclenche l’affichage de la page $smartyPage. Elle retourne le tableau $data à la fonction appelante.\n\n\n\nfunction dataWrite(array $data, bool $isPartOfTransaction = false)\nÉcrit les données $data dans la table gérée par $this-&gt;dataclass (appel à la fonction write). Si l’indicateur de transaction n’est pas activé, un message informant de l’exécution de la commande est envoyé, et une trace est enregistrée dans la table log.\n\n\n\nfunction dataDelete($id, bool $isPartOfTransaction = false)\nSupprime l’enregistrement identifié par $id, et affiche un message pour informer de la réussite de l’opération si l’indicateur de transaction n’est pas activé.\n\n\n\n\nDans le cas où plusieurs écritures concommittantes sont nécessaires, il est possible d’activer les transactions, gérées par CodeIgniter, avec les commandes suivantes :\ntry {\n   /*\n    * Start transaction\n    */\n   $db = $this-&gt;dataclass-&gt;db;\n   $db-&gt;transBegin();\n   (...)\n   $db-&gt;transCommit();\n   } catch (PpciException $ie) {\n     if ($db-&gt;transEnabled) {\n     $db-&gt;transRollback();\n     (...)\n   }\n:::"
  },
  {
    "objectID": "libraries.html#la-classe-ppcilibrary",
    "href": "libraries.html#la-classe-ppcilibrary",
    "title": "Bibliothèques",
    "section": "",
    "text": "Elle gère l’accès direct à quelques services :\n\n$this-&gt;message : affichage de messages à l’écran et enregistrement de messages techniques dans Syslog\n$this-&gt;appConfig : accès aux paramètres de configuration stockés dans app/Config/App.php ou mis à jour par l’intermédiaire de .env\n$this-&gt;log : enregistrement de traces dans la table gacl.log de la base de données.\n\nPour qu’elle fonctionne correctement, elle doit être initialisée ainsi : \nfunction __construct()\n    {\n        parent::__construct();\n        $this-&gt;dataclass = new ModelsBorrower();\n        $this-&gt;keyName = \"borrower_id\";\n        if (isset($_REQUEST[$this-&gt;keyName])) {\n            $this-&gt;id = $_REQUEST[$this-&gt;keyName];\n        }\n    }\n$this-&gt;dataclass doit être une classe héritée de PpciModel. \nElle dispose également de fonctions génériques, qui permettent de simplifier l’écriture des classes dans l’application. Celles-ci déclenchent systématiquement une exception PpciException en cas d’erreur rencontrée.\n\n\nfunction dataRead($id, $smartyPage, $idParent = 0)\nLa fonction appelle $this-&gt;dataclass-&gt;read ($id, true, $idParent), affecte le tableau de données lu à la variable $data, puis déclenche l’affichage de la page $smartyPage. Elle retourne le tableau $data à la fonction appelante.\n\n\n\nfunction dataWrite(array $data, bool $isPartOfTransaction = false)\nÉcrit les données $data dans la table gérée par $this-&gt;dataclass (appel à la fonction write). Si l’indicateur de transaction n’est pas activé, un message informant de l’exécution de la commande est envoyé, et une trace est enregistrée dans la table log.\n\n\n\nfunction dataDelete($id, bool $isPartOfTransaction = false)\nSupprime l’enregistrement identifié par $id, et affiche un message pour informer de la réussite de l’opération si l’indicateur de transaction n’est pas activé."
  },
  {
    "objectID": "libraries.html#traitement-des-transactions",
    "href": "libraries.html#traitement-des-transactions",
    "title": "Bibliothèques",
    "section": "",
    "text": "Dans le cas où plusieurs écritures concommittantes sont nécessaires, il est possible d’activer les transactions, gérées par CodeIgniter, avec les commandes suivantes :\ntry {\n   /*\n    * Start transaction\n    */\n   $db = $this-&gt;dataclass-&gt;db;\n   $db-&gt;transBegin();\n   (...)\n   $db-&gt;transCommit();\n   } catch (PpciException $ie) {\n     if ($db-&gt;transEnabled) {\n     $db-&gt;transRollback();\n     (...)\n   }\n:::"
  },
  {
    "objectID": "installation.html",
    "href": "installation.html",
    "title": "Installation",
    "section": "",
    "text": "L’installation ne peut s’effectuer que dans un dossier vide. L’exemple est donné ici pour une migration vers otolithe2.\n\n\nDans le dossier de niveau supérieur :\ncomposer create-project codeigniter4/appstarter otolithe2  \ncd otolithe2\ncomposer require equinton/ppci\n\n\n\nDifférents fichiers fournis par CodeIgniter doivent être adaptés pour le support de PPCI. Dans le dossier de l’application, à la racine, lancez le script :\nvendor/equinton/ppci/install/install.sh\nLe script va :\n\nrecopier les fichiers nécessaires pour le fonctionnement de l’application dans les différents dossiers :\n\nparamètres dans app/Config\nlibrairies dans app/Libraries (classes par défaut)\ndossier display dans public, et chargement des classes Javascript nécessaires via npm\n\ncréer le dossier writable/temp, et donner les droits en écriture à www-data sur l’ensemble de writable\ngénérer le fichier .env, comprenant les paramètres par défaut d’instanciation\ncréer les clés privée/publique utilisées pour les opérations cryptographiques.\n\n\n\n\n\n\nÉditez le fichier .env, à la racine de l’application, et renseignez impérativement les entrées suivantes :\nCI_ENVIRONMENT = development\napp.baseURL = 'https://myapp.mysociety.com'\n\ndatabase.default.DBDriver = Postgre\ndatabase.default.DBPrefix =\ndatabase.default.port = 5432\ndatabase.default.charset = utf8\ndatabase.default.hostname = localhost\ndatabase.default.database = dbname\ndatabase.default.username = login\ndatabase.default.password = password\ndatabase.default.searchpath = public,app,gacl\n\n\n\nC’est le fichier qui contient les paramètres par défaut de l’application. Il s’agit d’une classe PHP, dont les variables suivantes peuvent être modifiées :\n$dbversion = \"1.0\"; // version de la base de données\n$GACL_aco = \"app\"; // code de l'application dans la gestion des droits\n$version = \"v1.0.0\" ; // Version du logiciel. Elle doit correspondre à une des versions créées dans Github ou Gitlab\n$versionDate = \"01/01/2024\"; //Date de la version\n$APP_help_address =\"\"; //lien vers la création de tickets ou vers la page donnant accès à l'aide\n$copyright = \"\"; //Copyright de l'application\n$APPLI_release = []; // Tableau permettant d'interroger soit Github, soit un serveur Gitlab, pour obtenir les informations concernant la dernière version publiée\n\n\n\n\nConnectez-vous à votre serveur Postgresql avec psql, puis créez votre base de données :\ncreate user applogin inherit login password  'appPassword';\ncreate database app owner applogin;\n\\c app applogin\n\\i vendor/equinton/ppci/install/create.sql\nLe script va créer deux schémas : app pour les tables de l’application, et gacl pour la gestion des droits. Deux tables vont être créées dans le schéma app, nécessaires au fonctionnement de Ppci.\nLa première connexion à l’application utilise le login admin, mot de passe password."
  },
  {
    "objectID": "installation.html#installation-de-codeigniter-et-de-ppci",
    "href": "installation.html#installation-de-codeigniter-et-de-ppci",
    "title": "Installation",
    "section": "",
    "text": "Dans le dossier de niveau supérieur :\ncomposer create-project codeigniter4/appstarter otolithe2  \ncd otolithe2\ncomposer require equinton/ppci"
  },
  {
    "objectID": "installation.html#configuration-du-support-de-ppci",
    "href": "installation.html#configuration-du-support-de-ppci",
    "title": "Installation",
    "section": "",
    "text": "Différents fichiers fournis par CodeIgniter doivent être adaptés pour le support de PPCI. Dans le dossier de l’application, à la racine, lancez le script :\nvendor/equinton/ppci/install/install.sh\nLe script va :\n\nrecopier les fichiers nécessaires pour le fonctionnement de l’application dans les différents dossiers :\n\nparamètres dans app/Config\nlibrairies dans app/Libraries (classes par défaut)\ndossier display dans public, et chargement des classes Javascript nécessaires via npm\n\ncréer le dossier writable/temp, et donner les droits en écriture à www-data sur l’ensemble de writable\ngénérer le fichier .env, comprenant les paramètres par défaut d’instanciation\ncréer les clés privée/publique utilisées pour les opérations cryptographiques."
  },
  {
    "objectID": "installation.html#paramétrage-initial",
    "href": "installation.html#paramétrage-initial",
    "title": "Installation",
    "section": "",
    "text": "Éditez le fichier .env, à la racine de l’application, et renseignez impérativement les entrées suivantes :\nCI_ENVIRONMENT = development\napp.baseURL = 'https://myapp.mysociety.com'\n\ndatabase.default.DBDriver = Postgre\ndatabase.default.DBPrefix =\ndatabase.default.port = 5432\ndatabase.default.charset = utf8\ndatabase.default.hostname = localhost\ndatabase.default.database = dbname\ndatabase.default.username = login\ndatabase.default.password = password\ndatabase.default.searchpath = public,app,gacl\n\n\n\nC’est le fichier qui contient les paramètres par défaut de l’application. Il s’agit d’une classe PHP, dont les variables suivantes peuvent être modifiées :\n$dbversion = \"1.0\"; // version de la base de données\n$GACL_aco = \"app\"; // code de l'application dans la gestion des droits\n$version = \"v1.0.0\" ; // Version du logiciel. Elle doit correspondre à une des versions créées dans Github ou Gitlab\n$versionDate = \"01/01/2024\"; //Date de la version\n$APP_help_address =\"\"; //lien vers la création de tickets ou vers la page donnant accès à l'aide\n$copyright = \"\"; //Copyright de l'application\n$APPLI_release = []; // Tableau permettant d'interroger soit Github, soit un serveur Gitlab, pour obtenir les informations concernant la dernière version publiée"
  },
  {
    "objectID": "installation.html#création-de-la-base-de-données",
    "href": "installation.html#création-de-la-base-de-données",
    "title": "Installation",
    "section": "",
    "text": "Connectez-vous à votre serveur Postgresql avec psql, puis créez votre base de données :\ncreate user applogin inherit login password  'appPassword';\ncreate database app owner applogin;\n\\c app applogin\n\\i vendor/equinton/ppci/install/create.sql\nLe script va créer deux schémas : app pour les tables de l’application, et gacl pour la gestion des droits. Deux tables vont être créées dans le schéma app, nécessaires au fonctionnement de Ppci.\nLa première connexion à l’application utilise le login admin, mot de passe password."
  },
  {
    "objectID": "controllers.html",
    "href": "controllers.html",
    "title": "Contrôleurs",
    "section": "",
    "text": "Contrôleurs\nLes contrôleurs, première étape du traitement d’une route, héritent de la classe PpciController. Celle-ci appelle automatiquement la fonction d’initialisation function initController( RequestInterface $request, ResponseInterface $response, LoggerInterface $logger) et charge le service message et la configuration App dans $this-&gt;config.\nVoici un exemple typique d’implémentation :\nclass Borrower extends PpciController\n{\n    protected $lib;\n    function __construct()\n    {\n        $this-&gt;lib = new LibrariesBorrower();\n    }\n    function list()\n    {\n        return $this-&gt;lib-&gt;list();\n    }\n    function display()\n    {\n        return $this-&gt;lib-&gt;display();\n    }\n    function change()\n    {\n        return $this-&gt;lib-&gt;change();\n    }\n    function write()\n    {\n        return $this-&gt;lib-&gt;write();\n    }\n    function delete()\n    {\n        return $this-&gt;lib-&gt;delete();\n    }\n}"
  },
  {
    "objectID": "principes.html",
    "href": "principes.html",
    "title": "Enchaînement lors de l’appel d’une page",
    "section": "",
    "text": "Les filtres sont déclarés dans le fichier app/Config/Filters.php.\n\n\nVérification du jeton CSRF, présent dans tous les formulaires Smarty. Le filtre doit être inactivé pour les appels des API, par exemple ainsi :\n'csrf' =&gt; ['except' =&gt; [\n                'apiv1sampleWrite',\n                'apiv1sampleDelete',\n                'apiv1movementWrite',\n                'apiv1sampleList'\n            ]],\n\n\n\nVérifie l’encodage des caractères transmis depuis le navigateur\n\n\n\nLance PpciInit:init() :\n\nAvant le démarrage de la session : exécute le script App/Libraries/BeforeSession::index(), pour charger au besoin des classes avant le démarrage de la session. En principe, c’est obsolète pour CodeIgniter.\ndémarre la session\nhelper(‘ppci’) : charge les fonctions génériques de PPCI\ninitialise les messages qui ont été transmis avant une redirection\nmet à jour la locale et le fichier des traductions\ninitialise la connexion à la base de données\npurge les logs (table gacl.log). Les logs de plus d’un an sont supprimées (paramètres app.logDuration)\n\n\n\n\nVérifie la version de la base de données (table dbversion). Si la version déclarée dans la variable app.dbversion n’est pas présente dans la table, , le filtre renvoie vers la page d’accueil (appel de la fonction defaultPage()) et affiche un message d’erreur. Le filtre devrait être désactivé pour les appels des API et pour les scripts lancés en ligne de commande.\n\n\n\nFiltre optionnel, qui va comparer la version déclarée dans la variable app.version à celle qui est connue comme version courante dans le dépôt Github ou Gitlab. Pour que le filtre fonctionne, il faut que la variable app.checkRelease soit positionnée à 1, et que le tableau app.APPLI_release soit correctement configuré.\n\n\n\n\nrecherche les droits nécessaires dans :\n\nApp/Config/Rights\nPpci/Config/Rights\n\ns’il existe des droits demandés, le filtre vérifie si le login existe ou non. S’il n’existe pas, déclenche la procédure de connexion (Ppci/Libraries/Login-&gt;getLogin())\nvérifie que l’utilisateur dispose des droits nécessaires\n\n\n\n\n\nrecherche si le module appelé nécessite le droit admin dans Ppci/Config/Rights\nen cas de module d’administration :\n\nvérifie à quand remonte la dernière identification TOTP ou le dernier appel à un module d’administration\nsi la durée est &gt; 10’ :\n\nsi le compte n’a pas activé le TOTP, affichage de l’écran de création du code TOTP\nsinon déclenche la saisie du code TOTP\n\n\n\nL’utilisation du TOTP est désactivable (non conseillé en production) avec le paramètre IdentificationConfig\\disableTotpAdmin=1.\nLa durée de la session admin peut être modifiée avec le paramètre IdentificationConfig\\adminSessionDuration=600. La durée est exprimée en secondes.\n\n\n\n\nLes contrôleurs doivent hériter de Ppci/Controllers/PpciController, qui va récupérer depuis FlashData les variables $_GET, $_REQUEST, $_POST et $_SESSION[\"lastGet\"].\n\n\n\nLes contrôleurs font appel aux librairies, qui peuvent hériter de Ppci\\Libraries\\PpciLibrary. Cette classe propose :\n\ndes paramètres pré-positionnés :\n\nprotected PpciModel $dataClass; : classe permettant de manipuler les informations stockées dans une table\n$this-&gt;message = service('MessagePpci'); : classe permettant d’afficher les messages à l’écran ou de les enregistrer dans les logs du serveur\n$this-&gt;appConfig = config(\"App\"); : paramètres généraux de l’application\n$this-&gt;log = service(\"Log\"); : enregistrement des actions dans la table gacl.log\n\ndes fonctions génériques pour manipuler les données :\n\ndataRead($id, $smartyPage, $idParent = 0) : lit les informations d’un enregistrement dans la classe $dataClass, et génère la vue Smarty\ndataWrite(array $data, bool $isPartOfTransaction = false) : écrit les informations dans la base de données\ndataDelete($id, bool $isPartOfTransaction = false) : supprime un enregistrement\n\n\n\n\n\nL’envoi d’informations au navigateur fait appel à des vues, chacune étant dédiée à un type d’informations (pages web, fichiers pdf, requêtes Ajax, fichiers binaires, etc.). Elles sont disponibles sous forme de services (décrits dans ppci/Config/Services.php), et sont physiquement stockées dans Ppci/Libraries/Views.\nLe détail des vues peut être consulté ici."
  },
  {
    "objectID": "principes.html#filtres",
    "href": "principes.html#filtres",
    "title": "Enchaînement lors de l’appel d’une page",
    "section": "",
    "text": "Les filtres sont déclarés dans le fichier app/Config/Filters.php.\n\n\nVérification du jeton CSRF, présent dans tous les formulaires Smarty. Le filtre doit être inactivé pour les appels des API, par exemple ainsi :\n'csrf' =&gt; ['except' =&gt; [\n                'apiv1sampleWrite',\n                'apiv1sampleDelete',\n                'apiv1movementWrite',\n                'apiv1sampleList'\n            ]],\n\n\n\nVérifie l’encodage des caractères transmis depuis le navigateur\n\n\n\nLance PpciInit:init() :\n\nAvant le démarrage de la session : exécute le script App/Libraries/BeforeSession::index(), pour charger au besoin des classes avant le démarrage de la session. En principe, c’est obsolète pour CodeIgniter.\ndémarre la session\nhelper(‘ppci’) : charge les fonctions génériques de PPCI\ninitialise les messages qui ont été transmis avant une redirection\nmet à jour la locale et le fichier des traductions\ninitialise la connexion à la base de données\npurge les logs (table gacl.log). Les logs de plus d’un an sont supprimées (paramètres app.logDuration)\n\n\n\n\nVérifie la version de la base de données (table dbversion). Si la version déclarée dans la variable app.dbversion n’est pas présente dans la table, , le filtre renvoie vers la page d’accueil (appel de la fonction defaultPage()) et affiche un message d’erreur. Le filtre devrait être désactivé pour les appels des API et pour les scripts lancés en ligne de commande.\n\n\n\nFiltre optionnel, qui va comparer la version déclarée dans la variable app.version à celle qui est connue comme version courante dans le dépôt Github ou Gitlab. Pour que le filtre fonctionne, il faut que la variable app.checkRelease soit positionnée à 1, et que le tableau app.APPLI_release soit correctement configuré.\n\n\n\n\nrecherche les droits nécessaires dans :\n\nApp/Config/Rights\nPpci/Config/Rights\n\ns’il existe des droits demandés, le filtre vérifie si le login existe ou non. S’il n’existe pas, déclenche la procédure de connexion (Ppci/Libraries/Login-&gt;getLogin())\nvérifie que l’utilisateur dispose des droits nécessaires\n\n\n\n\n\nrecherche si le module appelé nécessite le droit admin dans Ppci/Config/Rights\nen cas de module d’administration :\n\nvérifie à quand remonte la dernière identification TOTP ou le dernier appel à un module d’administration\nsi la durée est &gt; 10’ :\n\nsi le compte n’a pas activé le TOTP, affichage de l’écran de création du code TOTP\nsinon déclenche la saisie du code TOTP\n\n\n\nL’utilisation du TOTP est désactivable (non conseillé en production) avec le paramètre IdentificationConfig\\disableTotpAdmin=1.\nLa durée de la session admin peut être modifiée avec le paramètre IdentificationConfig\\adminSessionDuration=600. La durée est exprimée en secondes."
  },
  {
    "objectID": "principes.html#appel-du-contrôleur",
    "href": "principes.html#appel-du-contrôleur",
    "title": "Enchaînement lors de l’appel d’une page",
    "section": "",
    "text": "Les contrôleurs doivent hériter de Ppci/Controllers/PpciController, qui va récupérer depuis FlashData les variables $_GET, $_REQUEST, $_POST et $_SESSION[\"lastGet\"]."
  },
  {
    "objectID": "principes.html#appel-des-librairies",
    "href": "principes.html#appel-des-librairies",
    "title": "Enchaînement lors de l’appel d’une page",
    "section": "",
    "text": "Les contrôleurs font appel aux librairies, qui peuvent hériter de Ppci\\Libraries\\PpciLibrary. Cette classe propose :\n\ndes paramètres pré-positionnés :\n\nprotected PpciModel $dataClass; : classe permettant de manipuler les informations stockées dans une table\n$this-&gt;message = service('MessagePpci'); : classe permettant d’afficher les messages à l’écran ou de les enregistrer dans les logs du serveur\n$this-&gt;appConfig = config(\"App\"); : paramètres généraux de l’application\n$this-&gt;log = service(\"Log\"); : enregistrement des actions dans la table gacl.log\n\ndes fonctions génériques pour manipuler les données :\n\ndataRead($id, $smartyPage, $idParent = 0) : lit les informations d’un enregistrement dans la classe $dataClass, et génère la vue Smarty\ndataWrite(array $data, bool $isPartOfTransaction = false) : écrit les informations dans la base de données\ndataDelete($id, bool $isPartOfTransaction = false) : supprime un enregistrement"
  },
  {
    "objectID": "principes.html#les-différentes-vues",
    "href": "principes.html#les-différentes-vues",
    "title": "Enchaînement lors de l’appel d’une page",
    "section": "",
    "text": "L’envoi d’informations au navigateur fait appel à des vues, chacune étant dédiée à un type d’informations (pages web, fichiers pdf, requêtes Ajax, fichiers binaires, etc.). Elles sont disponibles sous forme de services (décrits dans ppci/Config/Services.php), et sont physiquement stockées dans Ppci/Libraries/Views.\nLe détail des vues peut être consulté ici."
  }
]