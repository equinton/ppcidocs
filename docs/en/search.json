[
  {
    "objectID": "legal_notice.html",
    "href": "legal_notice.html",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "",
    "text": "Nom du site : documentation PPCI\nURL complète du site : https://equinton.github.io/ppcidocs/"
  },
  {
    "objectID": "legal_notice.html#identification-du-site",
    "href": "legal_notice.html#identification-du-site",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "",
    "text": "Nom du site : documentation PPCI\nURL complète du site : https://equinton.github.io/ppcidocs/"
  },
  {
    "objectID": "legal_notice.html#éditeurs-du-site",
    "href": "legal_notice.html#éditeurs-du-site",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "Éditeur(s) du site",
    "text": "Éditeur(s) du site\nINRAE - Institut national de recherche pour l’agriculture, l’alimentation et l’environnement\nINRAE est un établissement public à caractère scientifique et technologique. Il a son siège au 147, rue de l’université – 75338 Paris cedex 07. Ses statuts sont publiés dans le code rural et de la pêche maritime (articles R831-1 et suivants).\nIl est représenté par son Président Directeur général, M. Philippe MAUGUIN.\nContact mail: web@inrae.fr - contact téléphonique: 01 42 75 90 00"
  },
  {
    "objectID": "legal_notice.html#numéros-didentification",
    "href": "legal_notice.html#numéros-didentification",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "Numéros d’identification",
    "text": "Numéros d’identification\nINRAE SIREN: 180070039\nCode APE: 7219Z\nNuméro de TVA intracommunautaire: FR 57 1800700039"
  },
  {
    "objectID": "legal_notice.html#publication-du-site",
    "href": "legal_notice.html#publication-du-site",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "Publication du site",
    "text": "Publication du site\nNom du directeur de publication : M. Philippe MAUGUIN\nNom du responsable de rédaction : Éric Quinton\nWebmaster du site : Éric Quinton"
  },
  {
    "objectID": "legal_notice.html#hébergeur-du-site",
    "href": "legal_notice.html#hébergeur-du-site",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "Hébergeur du site",
    "text": "Hébergeur du site\nINRAE Établissement public à caractère scientifique et technologique 147, rue de l’université – 75338 Paris cedex 07 01 42 75 90 00\nCopyright © 2024 - All rights reserved. Author: Éric Quinton for EABX-INRAE. Documentation distributed under license  CC-BY"
  },
  {
    "objectID": "partners.html#list-of-financial-partners",
    "href": "partners.html#list-of-financial-partners",
    "title": "Partners",
    "section": "List of Financial partners",
    "text": "List of Financial partners"
  },
  {
    "objectID": "identification.html",
    "href": "identification.html",
    "title": "Identification management",
    "section": "",
    "text": "PPCI offers several mechanisms for managing user identification:\n\nstorage of accounts in the database (BDD)\nidentification with an LDAP server (LDAP)\nidentification with a Common Access Service (CAS) server\nidentification with an OpenID Connect (OIDC) server\nidentification provided by the web server, to use Shibboleth mechanisms (Apache Mellon mode, for example) (HEADER)\nmixed mechanisms, using third-party servers and database storage for accounts not otherwise managed:\n\nLDAP-BDD: identification test with the LDAP directory, and if unsuccessful, with the database.\nCAS-BDD and OIDC-BDD: a button can be used to select identification with the server in question.\n\n\nIn addition, users can activate dual TOTP identification. This is compulsory to access the administration modules.\nNote that LDAP identification is now considered obsolete. It is better to use OIDC or CAS services, where available.\n\n\n\n\nParameters are defined in Ppci\\ConfigIdentificationConfig.\n\nCONNECTION_max_attempts : if the connection fails (default 5), the account will be blocked for the time specified in :\n\nCONNECTION_blocking_duration (default 600 seconds). Note that attempting to connect during this period resets the counter to zero\n\nAPP_passwordMinLength : minimum password length.\nAPPLI_lostPassword : if set to 1 (default), the user will be able to ask for their password to be reset, provided their email address is entered\ntokenIdentityValidity : validity period of the token generated during the BDD or LDAP connection, to avoid having to re-identify during the day. By default, 10 hours.\n\n\n\n\nVariables are defined in Ppci\\Config\\IdentificationConfig.LDAP.\n\naddress : LDAP server address\nport : connection port\nrdn : login account for directory queries, if required\nbasedn : account search base\nuser_attrib : attribute containing the user’s identifier (uid)\nv3 : version 3 of the directory, set by default to true\ntls : set to true to activate the tls connection\nupn_suffix : upn suffix, necessary in some cases for Active Directory\ngroupSupport : if set to true, groups will be retrieved from the directory to feed the rights management module\ngroupAttrib : name of the attribute containing the user’s groups\ncommonNameAttrib : name of the attribute containing the common name\nmailAttrib : name of the attribute containing the email\nattributgroupname : name of the attribute containing the group name\nattributloginname : name of the attribute containing the uid member\nbasedngroup : groups search path\ntimeout : directory search time-out (set to 2 seconds by default)\nldapnoanonymous : if set to true, querying the directory to retrieve groups requires a connection\n\nldaplogin : connection login\nldappassword : associated password\n\n\n\n\n\nAn icon has been added to the button used to activate identification with the CAS or OIDC server: Ppci\\Config\\IdentificationConfig.identificationLogo = \"${FRONT_DIR}/favicon.png\"\n\n\n\n\nParameters are defined in Ppci\\Config\\IdentificationConfig.XX, where XX must be replaced by CAS, OIDC or HEADER.\nGeneric parameters:\n\nmail : attribute containing the email\nfirstname : attribute containing the first name\nlastname : attribute containing the last name\nname : attribute containing the common name\ngroups : attribute containing user membership groups\ngetGroups : if set to 1 (default), the user groups supplied by the identification server are processed\n\n\n\n\naddress : CAS server address, by example: monserveur.society.com\nuri : identification access folder. Default setting : /cas\nport : default: 443\ndebug : f set to true or 1, traces are stored in the file writable/logs/cas.log\nCApath : path to the certificate used to validate the CAS server. If it is not entered, the CAS server will not be verified (not recommended for production use).\n\n\n\n\n\nname : provider code\nprovider : provider web address (must start with https://)\nclientId : code furnished by the provider\nclientSecret : secret key furnished by the provider\nscopeGroup : OIDC scope name which contains the secondary attributes (default : affectation)\n\n\n\n\n\nlogin : name of the $_SERVER attribute containing the login, returned by the Apache server\norganizationGranted : table containing the code or name of authorised organisations. If this table is filled in, and if a new user does not belong to one of the organisations indicated (organization attribute), their account will not be created.\ngroupsGranted : table containing the list of authorised groups. If a user logs in for the first time and their group (or one of their groups) is on the list of authorised groups, their account will be activated automatically. If not, the account will be deactivated and an email will be sent to the administrators inviting them to activate the account.\n\n\n\n\n\nThe parameters can be accessed from Ppci\\Config\\IdentificationConfig.\n\nadminSessionDuration : period during which the identification remains valid for access to the administration modules. Default: 10’.\ndisableTotpToAdmin : if set to 1, disables dual-identification for access to administration modules. Should not be used in production!"
  },
  {
    "objectID": "identification.html#specific-parameters-for-each-type-of-identification",
    "href": "identification.html#specific-parameters-for-each-type-of-identification",
    "title": "Identification management",
    "section": "",
    "text": "Parameters are defined in Ppci\\ConfigIdentificationConfig.\n\nCONNECTION_max_attempts : if the connection fails (default 5), the account will be blocked for the time specified in :\n\nCONNECTION_blocking_duration (default 600 seconds). Note that attempting to connect during this period resets the counter to zero\n\nAPP_passwordMinLength : minimum password length.\nAPPLI_lostPassword : if set to 1 (default), the user will be able to ask for their password to be reset, provided their email address is entered\ntokenIdentityValidity : validity period of the token generated during the BDD or LDAP connection, to avoid having to re-identify during the day. By default, 10 hours.\n\n\n\n\nVariables are defined in Ppci\\Config\\IdentificationConfig.LDAP.\n\naddress : LDAP server address\nport : connection port\nrdn : login account for directory queries, if required\nbasedn : account search base\nuser_attrib : attribute containing the user’s identifier (uid)\nv3 : version 3 of the directory, set by default to true\ntls : set to true to activate the tls connection\nupn_suffix : upn suffix, necessary in some cases for Active Directory\ngroupSupport : if set to true, groups will be retrieved from the directory to feed the rights management module\ngroupAttrib : name of the attribute containing the user’s groups\ncommonNameAttrib : name of the attribute containing the common name\nmailAttrib : name of the attribute containing the email\nattributgroupname : name of the attribute containing the group name\nattributloginname : name of the attribute containing the uid member\nbasedngroup : groups search path\ntimeout : directory search time-out (set to 2 seconds by default)\nldapnoanonymous : if set to true, querying the directory to retrieve groups requires a connection\n\nldaplogin : connection login\nldappassword : associated password\n\n\n\n\n\nAn icon has been added to the button used to activate identification with the CAS or OIDC server: Ppci\\Config\\IdentificationConfig.identificationLogo = \"${FRONT_DIR}/favicon.png\""
  },
  {
    "objectID": "identification.html#identification-on-dedicated-servers-header-cas-oidc",
    "href": "identification.html#identification-on-dedicated-servers-header-cas-oidc",
    "title": "Identification management",
    "section": "",
    "text": "Parameters are defined in Ppci\\Config\\IdentificationConfig.XX, where XX must be replaced by CAS, OIDC or HEADER.\nGeneric parameters:\n\nmail : attribute containing the email\nfirstname : attribute containing the first name\nlastname : attribute containing the last name\nname : attribute containing the common name\ngroups : attribute containing user membership groups\ngetGroups : if set to 1 (default), the user groups supplied by the identification server are processed\n\n\n\n\naddress : CAS server address, by example: monserveur.society.com\nuri : identification access folder. Default setting : /cas\nport : default: 443\ndebug : f set to true or 1, traces are stored in the file writable/logs/cas.log\nCApath : path to the certificate used to validate the CAS server. If it is not entered, the CAS server will not be verified (not recommended for production use).\n\n\n\n\n\nname : provider code\nprovider : provider web address (must start with https://)\nclientId : code furnished by the provider\nclientSecret : secret key furnished by the provider\nscopeGroup : OIDC scope name which contains the secondary attributes (default : affectation)\n\n\n\n\n\nlogin : name of the $_SERVER attribute containing the login, returned by the Apache server\norganizationGranted : table containing the code or name of authorised organisations. If this table is filled in, and if a new user does not belong to one of the organisations indicated (organization attribute), their account will not be created.\ngroupsGranted : table containing the list of authorised groups. If a user logs in for the first time and their group (or one of their groups) is on the list of authorised groups, their account will be activated automatically. If not, the account will be deactivated and an email will be sent to the administrators inviting them to activate the account."
  },
  {
    "objectID": "identification.html#managing-access-to-administration-modules",
    "href": "identification.html#managing-access-to-administration-modules",
    "title": "Identification management",
    "section": "",
    "text": "The parameters can be accessed from Ppci\\Config\\IdentificationConfig.\n\nadminSessionDuration : period during which the identification remains valid for access to the administration modules. Default: 10’.\ndisableTotpToAdmin : if set to 1, disables dual-identification for access to administration modules. Should not be used in production!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "",
    "text": "PrototypePHP for CodeIgniter (PPCI) is a port of the framework https://github.com/equinton/prototypephp developed in the 2000s to write various web applications, including Collec-Science.\nTo facilitate web application maintenance, PrototypePHP was ported to CodeIgniter in 2024. It takes the form of an additional component. It uses most of CodeIgniter’s features (routes, filters, services, database access, parameter management, etc.), with the exception of :\n\nweb page display, which remains the responsibility of the Smarty template engine\nidentification and rights management, where PPCI is much richer in terms of functionalities, such as support for multiple identification mechanisms (database, LDAP, CAS, OIDC, TOTP, etc.) or rights management.\n\nThe component is distributed under MIT licence.\nThe English version of this documentation is translated with DeepL.com (free version)"
  },
  {
    "objectID": "command-line.html",
    "href": "command-line.html",
    "title": "Run on the command line",
    "section": "",
    "text": "In CodeIgniter, with the PPCI module, the .env file is loaded automatically, taking into account the contents of the $_SERVER[‘envPath’] variable, with this code:\nif (is_file($file = $_SERVER[\"envPath\"] . DIRECTORY_SEPARATOR . \".env\") && is_readable($file)) {\n    (new CodeIgniter\\Config\\DotEnv($_SERVER[\"envPath\"],\".env\"))-&gt;load();\nIn a script, to transfer the value of envPath to the variable $_SERVER and enable the .env file to be loaded, you need to add the line :\nexport envPath=\"/var/www/instances/instancename\"\nHere’s an example of how it can be used, simply to display the contents of the $_SERVER[‘envPath’] variable:\nPHP file:\n&lt;?php\necho $_SERVER[\"envPath\"].PHP_EOL;\nScript test.sh used to trigger it:\n#!/bin/bash\nexport envPath=/var/www/instances/instancename\ncd $envPath/public\nphp index.php myroute\nwhere myroute corresponds to the route to be called.\nDeclare the route in app/Config/Routes.php (don’t forget the corresponding controller), then run the script:\n./test.sh\n/var/www/instances/instancename"
  },
  {
    "objectID": "command-line.html#transfer-the-name-of-the-.env-file-to-be-used",
    "href": "command-line.html#transfer-the-name-of-the-.env-file-to-be-used",
    "title": "Run on the command line",
    "section": "",
    "text": "In CodeIgniter, with the PPCI module, the .env file is loaded automatically, taking into account the contents of the $_SERVER[‘envPath’] variable, with this code:\nif (is_file($file = $_SERVER[\"envPath\"] . DIRECTORY_SEPARATOR . \".env\") && is_readable($file)) {\n    (new CodeIgniter\\Config\\DotEnv($_SERVER[\"envPath\"],\".env\"))-&gt;load();\nIn a script, to transfer the value of envPath to the variable $_SERVER and enable the .env file to be loaded, you need to add the line :\nexport envPath=\"/var/www/instances/instancename\"\nHere’s an example of how it can be used, simply to display the contents of the $_SERVER[‘envPath’] variable:\nPHP file:\n&lt;?php\necho $_SERVER[\"envPath\"].PHP_EOL;\nScript test.sh used to trigger it:\n#!/bin/bash\nexport envPath=/var/www/instances/instancename\ncd $envPath/public\nphp index.php myroute\nwhere myroute corresponds to the route to be called.\nDeclare the route in app/Config/Routes.php (don’t forget the corresponding controller), then run the script:\n./test.sh\n/var/www/instances/instancename"
  },
  {
    "objectID": "functions.html",
    "href": "functions.html",
    "title": "Functions and services",
    "section": "",
    "text": "Services allow the same instance of a class to be maintained throughout the execution of the script. They are described in Ppci\\Config\\Services.\n$monService = service ('name');\nThe first time the code is called, the class is instantiated. Then, the class instance is provided, which means that the same parameters can be used.\nThree types of service are configured: generic services, services providing configuration parameters, and views.\n\n\n\n\nCode used systematically when a page is called.\n\n\n\nClass used to store messages and then retrieve them. Two functions can be used to store them:\n\nfunction set(string $value, bool $is_error = false): stores a message. If it is an error, the message will then be displayed in red.\nfunction setSyslog($message, $is_error = false): stores a message in the system logs. In development mode, the message is also displayed on the screen\n\n\n\n\nClass used to record information in the gacl.log table. An entry can be created with the function $col-&gt;setLog($login, $module, $comment = null). The login value can be retrieved from $_SESSION[‘login’]. $module represents the name of the function or call to be logged, and $comment a particular content to be noted.\n\n\n\nClass used to set the language to be used. The labels can be modified using the setLocale($locale) function. By default, only ‘fr’ and ‘en’ are currently supported.\n\n\n\n\n\n\nClass containing all the parameters stored in the dbparam table. Parameters can be accessed using the $dbparam-&gt;params[‘parameter_name’] attribute.\nParameters are also available in the $_SESSION[‘dbparams’] variable.\n\n\n\nContains the general settings for the application (App\\Config\\App).\n\n\n\nContains identification-related settings (Ppci\\ConfigIdentificationConfig).\n\n\n\n\nThe description of the views can be consulted here.\n\n\n\n\nFunctions are loaded automatically from ppci/Helpers/ppci_helper.php.\n\ndefaultPage(): displays the application’s home page (without redirection)\ngetLineFeed(): returns the linefeed code depending on the context: web server or command line\nhtmlDecode($content): recursive function for decoding html characters (htmlspecialchars_decode())\nprintA($variable): displays the contents of a variable. For arrays, displays the contents of the array. Used for debugging\nsetlogRequest($request): writes the requested request to the gacl.log table.\ntest($var = ‘’): displays the word ‘test’ and the number of the occurrence where the function was called. If $var is filled in, displays its contents"
  },
  {
    "objectID": "functions.html#services-1",
    "href": "functions.html#services-1",
    "title": "Functions and services",
    "section": "",
    "text": "Services allow the same instance of a class to be maintained throughout the execution of the script. They are described in Ppci\\Config\\Services.\n$monService = service ('name');\nThe first time the code is called, the class is instantiated. Then, the class instance is provided, which means that the same parameters can be used.\nThree types of service are configured: generic services, services providing configuration parameters, and views.\n\n\n\n\nCode used systematically when a page is called.\n\n\n\nClass used to store messages and then retrieve them. Two functions can be used to store them:\n\nfunction set(string $value, bool $is_error = false): stores a message. If it is an error, the message will then be displayed in red.\nfunction setSyslog($message, $is_error = false): stores a message in the system logs. In development mode, the message is also displayed on the screen\n\n\n\n\nClass used to record information in the gacl.log table. An entry can be created with the function $col-&gt;setLog($login, $module, $comment = null). The login value can be retrieved from $_SESSION[‘login’]. $module represents the name of the function or call to be logged, and $comment a particular content to be noted.\n\n\n\nClass used to set the language to be used. The labels can be modified using the setLocale($locale) function. By default, only ‘fr’ and ‘en’ are currently supported.\n\n\n\n\n\n\nClass containing all the parameters stored in the dbparam table. Parameters can be accessed using the $dbparam-&gt;params[‘parameter_name’] attribute.\nParameters are also available in the $_SESSION[‘dbparams’] variable.\n\n\n\nContains the general settings for the application (App\\Config\\App).\n\n\n\nContains identification-related settings (Ppci\\ConfigIdentificationConfig).\n\n\n\n\nThe description of the views can be consulted here."
  },
  {
    "objectID": "functions.html#functions",
    "href": "functions.html#functions",
    "title": "Functions and services",
    "section": "",
    "text": "Functions are loaded automatically from ppci/Helpers/ppci_helper.php.\n\ndefaultPage(): displays the application’s home page (without redirection)\ngetLineFeed(): returns the linefeed code depending on the context: web server or command line\nhtmlDecode($content): recursive function for decoding html characters (htmlspecialchars_decode())\nprintA($variable): displays the contents of a variable. For arrays, displays the contents of the array. Used for debugging\nsetlogRequest($request): writes the requested request to the gacl.log table.\ntest($var = ‘’): displays the word ‘test’ and the number of the occurrence where the function was called. If $var is filled in, displays its contents"
  },
  {
    "objectID": "controllers.html",
    "href": "controllers.html",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "",
    "text": "Controllers, the first stage in processing a route, inherit from the PpciController class. This automatically calls the initialization function function initController( RequestInterface $request, ResponseInterface $response, LoggerInterface $logger) and loads the message service and the App configuration into $this-&gt;config.\nHere is a typical implementation example:\nclass Borrower extends PpciController\n{\n    protected $lib;\n    function __construct()\n    {\n        $this-&gt;lib = new LibrariesBorrower();\n    }\n    function list()\n    {\n        return $this-&gt;lib-&gt;list();\n    }\n    function display()\n    {\n        return $this-&gt;lib-&gt;display();\n    }\n    function change()\n    {\n        return $this-&gt;lib-&gt;change();\n    }\n    function write()\n    {\n        return $this-&gt;lib-&gt;write();\n    }\n    function delete()\n    {\n        return $this-&gt;lib-&gt;delete();\n    }\n}"
  },
  {
    "objectID": "installation.html",
    "href": "installation.html",
    "title": "Installation",
    "section": "",
    "text": "Installation can only be carried out in an empty folder. The example is given here for a migration to otolithe2.\n\n\nIn the top level folder :\ncomposer create-project codeigniter4/appstarter otolithe2  \ncd otolithe2\ncomposer require equinton/ppci\n\n\n\nVarious files supplied by CodeIgniter must be adapted for PPCI support.\nIn the application folder, at the root, run the script :\nvendor/equinton/ppci/install/install.sh\nThe script will :\n\ncopy the files needed to run the application into the various folders:\n\nparameters in app/Config\nlibraries in app/Libraries (default classes)\nthe display folder in public, and loading the necessary Javascript classes via npm.\n\ncreate the writable/temp folder, and give www-data write access to all writable files\ngenerate the .env file, including the default instantiation parameters\ncreate the private/public keys used for cryptographic operations.\n\n\n\n\n\n\nEdit the .env file, at the root of the application, and fill in the following entries:\nCI_ENVIRONMENT = development\napp.baseURL = 'https://myapp.mysociety.com'\n\ndatabase.default.DBDriver = Postgre\ndatabase.default.DBPrefix =\ndatabase.default.port = 5432\ndatabase.default.charset = utf8\ndatabase.default.hostname = localhost\ndatabase.default.database = dbname\ndatabase.default.username = login\ndatabase.default.password = password\ndatabase.default.searchpath = public,app,gacl\n\n\n\nThis is the file containing the application’s default parameters. It is a PHP class, whose following variables can be modified:\n$dbversion = ‘1.0’; // database version\n$GACL_aco = ‘app’; // application code for rights management\n$version = ‘v1.0.0’; // Software version. This must correspond to one of the versions created in Github or Gitlab\n$versionDate = ‘01/01/2024’; //Version date\n$APP_help_address =‘’; //link to ticket creation or help page\n$copyright = ‘’; //Copyright of the application\n$APPLI_release = []; //Table used to query either Github or a Gitlab server to obtain information about the latest version released\n\n\n\n\nConnect to your Postgresql server with psql, then create your database:\ncreate user applogin inherit login password ‘appPassword’;\ncreate database app owner applogin;\n\\c app applogin\n\\vendor/equinton/ppci/install/create.sql\nThe script will create two schemas: app for the application tables, and gacl for rights management.\nTwo tables will be created in the app schema, which are needed for Ppci to work.\nThe first connection to the application uses the login admin, password password."
  },
  {
    "objectID": "installation.html#installing-codeigniter-and-ppci",
    "href": "installation.html#installing-codeigniter-and-ppci",
    "title": "Installation",
    "section": "",
    "text": "In the top level folder :\ncomposer create-project codeigniter4/appstarter otolithe2  \ncd otolithe2\ncomposer require equinton/ppci"
  },
  {
    "objectID": "installation.html#configuring-ppci-support",
    "href": "installation.html#configuring-ppci-support",
    "title": "Installation",
    "section": "",
    "text": "Various files supplied by CodeIgniter must be adapted for PPCI support.\nIn the application folder, at the root, run the script :\nvendor/equinton/ppci/install/install.sh\nThe script will :\n\ncopy the files needed to run the application into the various folders:\n\nparameters in app/Config\nlibraries in app/Libraries (default classes)\nthe display folder in public, and loading the necessary Javascript classes via npm.\n\ncreate the writable/temp folder, and give www-data write access to all writable files\ngenerate the .env file, including the default instantiation parameters\ncreate the private/public keys used for cryptographic operations."
  },
  {
    "objectID": "installation.html#paramétrage-initial",
    "href": "installation.html#paramétrage-initial",
    "title": "Installation",
    "section": "Paramétrage initial",
    "text": "Paramétrage initial\n\nFichier .env\nÉditez le fichier .env, à la racine de l’application, et renseignez impérativement les entrées suivantes :\nThe script will :\n\ncopy the files needed to run the application into the various folders:\n\nparameters in app/Config\nlibraries in app/Libraries (default classes)\nthe display folder in public, and loading the necessary Javascript classes via npm.\n\ncreate the writable/temp folder, and give www-data write access to all writable files\ngenerate the .env file, including the default instantiation parameters\ncreate the private/public keys used for cryptographic operations."
  },
  {
    "objectID": "installation.html#création-de-la-base-de-données",
    "href": "installation.html#création-de-la-base-de-données",
    "title": "Installation",
    "section": "Création de la base de données",
    "text": "Création de la base de données\nConnectez-vous à votre serveur Postgresql avec psql, puis créez votre base de données :\ncreate user applogin inherit login password  'appPassword';\ncreate database app owner applogin;\n\\c app applogin\n\\i vendor/equinton/ppci/install/create.sql\nLe script va créer deux schémas : app pour les tables de l’application, et gacl pour la gestion des droits. Deux tables vont être créées dans le schéma app, nécessaires au fonctionnement de Ppci.\nLa première connexion à l’application utilise le login admin, mot de passe password."
  },
  {
    "objectID": "installation.html#installation-de-codeigniter-et-de-ppci",
    "href": "installation.html#installation-de-codeigniter-et-de-ppci",
    "title": "Installation",
    "section": "",
    "text": "Dans le dossier de niveau supérieur :"
  },
  {
    "objectID": "installation.html#configuration-du-support-de-ppci",
    "href": "installation.html#configuration-du-support-de-ppci",
    "title": "Installation",
    "section": "Configuration du support de PPCI",
    "text": "Configuration du support de PPCI\nDifférents fichiers fournis par CodeIgniter doivent être adaptés pour le support de PPCI. Dans le dossier de l’application, à la racine, lancez le script :"
  },
  {
    "objectID": "installation.html#initial-setup",
    "href": "installation.html#initial-setup",
    "title": "Installation",
    "section": "",
    "text": "Edit the .env file, at the root of the application, and fill in the following entries:\nCI_ENVIRONMENT = development\napp.baseURL = 'https://myapp.mysociety.com'\n\ndatabase.default.DBDriver = Postgre\ndatabase.default.DBPrefix =\ndatabase.default.port = 5432\ndatabase.default.charset = utf8\ndatabase.default.hostname = localhost\ndatabase.default.database = dbname\ndatabase.default.username = login\ndatabase.default.password = password\ndatabase.default.searchpath = public,app,gacl\n\n\n\nThis is the file containing the application’s default parameters. It is a PHP class, whose following variables can be modified:\n$dbversion = ‘1.0’; // database version\n$GACL_aco = ‘app’; // application code for rights management\n$version = ‘v1.0.0’; // Software version. This must correspond to one of the versions created in Github or Gitlab\n$versionDate = ‘01/01/2024’; //Version date\n$APP_help_address =‘’; //link to ticket creation or help page\n$copyright = ‘’; //Copyright of the application\n$APPLI_release = []; //Table used to query either Github or a Gitlab server to obtain information about the latest version released"
  },
  {
    "objectID": "installation.html#creating-the-database",
    "href": "installation.html#creating-the-database",
    "title": "Installation",
    "section": "",
    "text": "Connect to your Postgresql server with psql, then create your database:\ncreate user applogin inherit login password ‘appPassword’;\ncreate database app owner applogin;\n\\c app applogin\n\\vendor/equinton/ppci/install/create.sql\nThe script will create two schemas: app for the application tables, and gacl for rights management.\nTwo tables will be created in the app schema, which are needed for Ppci to work.\nThe first connection to the application uses the login admin, password password."
  },
  {
    "objectID": "migration.html",
    "href": "migration.html",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Create a different folder from the one containing the initial code of the application to be migrated, for example app2, then, from the lower-level directory:\ncomposer create-project codeigniter4/appstarter app2\ncd app2\ncomposer require equinton/ppci\nvendor/equinton/ppci/install/install.sh\nThen edit the .env file, and update the necessary parameters (CI_ENVIRONMENT, app.baseURL and the database connection parameters).\n\n\n\nHere is an example configuration:\n&lt;VirtualHost *:80&gt;\n    ServerName app2.local\n    ServerPath /app2.local\n    RewriteEngine On\n    RewriteRule ^ https://app2.local%{REQUEST_URI} [R]\n&lt;/VirtualHost&gt;\n&lt;VirtualHost *:443&gt;\n    ServerName app2.local\n    ServerPath /app2.local\n    SSLEngine on\n    SSLCertificateFile  /etc/ssl/certs/server.crt\n    SSLCertificateKeyFile /etc/ssl/private/server.key\n    SSLCACertificateFile /etc/ssl/certs/cacert.crt\n    DocumentRoot /var/www/app2/public \n&lt;/VirtualHost&gt;\n&lt;Directory /var/www/app2/public&gt;\n    &lt;LimitExcept GET POST&gt;\n        Deny from all\n    &lt;/LimitExcept&gt;\n    Options -Indexes FollowSymLinks MultiViews\n    Header unset ETag\n    Header set Cache-Control \"max-age=0, no-cache, no-store, must-revalidate, private\"\n    Header set Pragma \"no-cache\"\n    Header set X-Frame-Options \"DENY\"\n    Header set X-XSS-Protection \"1; mode=block\"\n    Header set X-Content-Type-Options \"nosniff\"\n    Header always set Strict-Transport-Security \"max-age=63072000; includeSubdomains;\"\n    Header always set Content-Security-Policy \"default-src 'self' ; script-src blob: * 'self' 'unsafe-inline' 'unsafe-eval'; connect-src data: blob: filesystem: *.tile.openstreetmap.org 'self' ; img-src 'self' data: blob: *.openstreetmap.org ; style-src 'self' 'unsafe-inline' ;\"\n    &lt;FilesMatch \"\\.(ico|flv|jpg|jpeg|png|gif|js|css|svg)$\"&gt;\n        Header set Cache-Control \"max-age=604800, private\"\n    &lt;/FilesMatch&gt;\n&lt;FilesMatch \".*openstreetmap.*\\.png$\"&gt;\n    Header set Cache-Control \"max-age=2592000, public\"\n&lt;/FilesMatch&gt;\n    Require all granted\n    AllowOverride all\n    RewriteEngine On\n    RewriteBase /\n    RewriteCond \"/%{REQUEST_FILENAME}\" !-f\n    RewriteCond \"/%{REQUEST_FILENAME}\" !-d\n    RewriteRule \"(.*)\" \"/index.php?$1\" [PT,QSA]\n&lt;/Directory&gt;\n\n\n\nEdit the vendor/equinton/ppci/migration/updatedb.sql file, and check the first line (set search_path), replacing app with the name of the schema containing the data.\nThen run the sql file.\n\n\n\nEdit the app/Config/menu.xml file, and add the necessary entries.\n\n\n\nCopy the Smarty templates from display/templates into app/Views/templates, keeping the sub-folder organisation, except for the root files and the framework sub-folder.\n\n\nIn this folder, replace all the labels (filter on *tpl) :\n\n&lt;/form&gt; with {$csrf}&lt;/form&gt; to add the CSRF token in forms\ndroits with rights\n.gestion by .manage\ndatatable\" by datatable display”\ndatatable-nopaging-nosearching by datatable-nopaging-nosearching display\ndatatable-searching by datatable-searching display\ndatatable-nopaging-nosearching by datatable-nopaging-nosearching display\ndatatable-nopaging by datatable-nopaging display\ndatatable-nopaging-nosort by datatable-nopaging-nosort display\ndatatable-nosort by datatable-nosort display\ndatatable-export by datatable-export display\ndatatable-export-paging by datatable-export-paging display.\n\nDelete\n\nindex.php?module=\n\n\n\n\nGo back to all the links (look for the a href tags) and replace the first & with ?.\nChange all the form actions so that they look like this:\n&lt;form class=‘form-horizontal’ id=‘formName’ method=‘post’ action=‘moduleWrite’&gt;\n&lt;input type=‘hidden’ name=‘moduleBase’ value=‘module’&gt;\nThe action field can be removed. However, the moduleBase field must be retained: it is used to create the moduleDelete action via the javascript script in main_js.tpl.\n\n\n\n\nCopy the files from modules/classes to app/Models.\n\n\nThese can be carried out using search/replace.\n\nreplace :\n&lt;?php by &lt;?php namespace App\\Models;use Ppci\\Models\\PpciModel;, with line breaks;\nextends ObjetBDD with extends PpciModel ;\n(public function __construct().*) by public function __construct(), ticking regular expression ;\n$this-&gt;columns by $this-&gt;fields ;\nfunction ecrire by function write;\nfunction lire by function read\nreplace parent::ecrire with parent::write.\n(parent::__construct().*) by parent::__construct(), checking regular expression ;\n$this-&gt;auto_id = 0 by $this-&gt;useAutoIncrement = false\nauto_date = 0 by autoFormatDate = false\ndelete :\n\n$this-&gt;auto_id = 1;\n$param[‘fullDescription’] = 1;\n$this-&gt;param = $param;\n\n\n\n\n\n\nrename the file name, for example espece.class.php to espece.php ;\nin SQL queries, modify variables by adding : at the end: :id must become :id: ;\nfor tables containing geographical data (fields with type=4), modify the queries or create the read() functions to add st_astext() for the fields concerned;\ndate transformations for fields not present in the table must be rewritten according to this scheme:\n\n$this-&gt;dateFields[] = ‘peche_date’;\n$this-&gt;datetimeFields[] = ‘peche_datetime’;\n\nif the utf8_encode function is used, it must be replaced by :\n\n$data = mb_convert_encoding($data, ‘UTF-8’, ‘ISO-8859-15, ISO-8859-1, Windows-1252’);\nThe function processes strings or arrays indiscriminately.\n\n\n\n\nCopy all the modules into app/Libraries. They need to be transformed into classes.\n\n\nReplace :\n\n&lt;?php by:\n\n&lt;?php \nnamespace App\\Libraries;\n\nuse Ppci\\Libraries\\PpciException;\nuse Ppci\\Libraries\\PpciLibrary;\nuse Ppci\\Models\\PpciModel;\n\nclass Xx extends PpciLibrary { \n    /**\n     * @var xx\n     */\n    protected PpciModel $dataclass;\n    private $keyName;\n\n    function __construct()\n    {\n        parent::__construct();\n        $this-&gt;dataclass = new XXX();\n        $keyName = \"xxx_id\";\n        if (isset($_REQUEST[$this-&gt;keyName])) {\n            $this-&gt;id = $_REQUEST[$this-&gt;keyName];\n        }\n    }\n\ndataRead($dataclass, by $this-&gt;dataRead(\ndataDelete($dataclass, by $this-&gt;dataDelete(\ncase \"list\": by function list(){$vue=service('Smarty'); (line feed)\ncase \"display\": by function display(){$vue=service('Smarty'); (line feed)\ncase \"change\": by function change(){$vue=service('Smarty'); (line feed)\ncase \"write\": by:\n\n    function write() {\n    try {\n            $this-&gt;id = $this-&gt;dataWrite($_REQUEST);\n            if ($this-&gt;id &gt; 0) {\n                $_REQUEST[$this-&gt;keyName] = $this-&gt;id;\n                return $this-&gt;display();\n            } else {\n                return $this-&gt;change();\n            }\n        } catch (PpciException) {\n            return $this-&gt;change();\n        }\n    }\n\ncase \"delete\": by function delete(){\ncase \" by function\n\": by () {\nbreak; by } : functions close\n$dataclass by $this-&gt;dataclass\n$id by $this-&gt;id\n$vue by $this-&gt;vue\n$this-&gt;dataDelete($this-&gt;id); by\n\n        try {\n            $this-&gt;dataDelete($this-&gt;id);\n            return $this-&gt;list();\n        } catch (PpciException $e) {\n            return $this-&gt;change();\n        }\n\n$this-&gt;dataWrite( $_REQUEST ); by\n\n        try {\n            $this-&gt;id = $this-&gt;dataWrite($_REQUEST);\n            $_REQUEST[\"xx_id\"] = $this-&gt;id;\n            return $this-&gt;list();\n        } catch (PpciException $e) {\n            return $this-&gt;change();\n        }\n\n$message-&gt; by $this-&gt;message-&gt;\n\nand delete:\n\nswitch ($t_module[\"param\"]) {\n$bdd, $ObjetBDDParam\n\n\n\n\nReplace :\n\n$bdd-&gt;beginTransaction(); by :\n\n$db = $this-&gt;dataclass-&gt;db;\n$db-&gt;transBegin();\n\nreplace $bdd-&gt;commit(); by $db-&gt;transCommit();\nreplace $bdd-&gt;rollback(); by :\n\nif ($db-&gt;transEnabled) {\n    $db-&gt;transRollback();\n}\n\n\n\n\nRun the following command:\nphp vendor/equinton/ppci/migration/actionsParse.php ../app/param/actions.xml\nThe script will read the old actions.xml file, and prepare two contents:\n\nthe first is intended to be inserted into the app\\Config\\Rights class, and contains the list of rights required to run a module\nthe second contains a prototype of the routes for executing the modules. The content must be inserted into app/Config/Routes.php.\n\n\n\n\nUse an automatic search function to replace gestion with manage.\n\n\n\nRun the script :\nphp vendor/equinton/ppci/migration/generateController.php app/Config/Routes.php app/Controllers/\nThe program will read the routes defined, then create the corresponding controllers, grouping the routes by module.\nThe controllers include calls to functions from the corresponding library (same name).\n\n\n\n\nAdd a filter to perform the operations described in modules/common.php ;\nif necessary, fill in the App\\Libraries\\Postlogin class, to perform specific operations after connection.\n\n\n\n\nPpci translations are provided by default. To avoid losing everything, you need to merge them with the old translations:\nmsgmerge app/Language/locales/lang.po ../oldapp/locales/en.po -o app/Language/locales/lang.po\ncd app/Language/locales\n./generate_po.sh\n./compile.sh\n\n\n\nEdit the following files:\n\napp/Config/news.txt for news in French\napp/Config/newsen.txt for news in English\n\nAlso edit the following templates:\n\napp/Views/templates/about_fr.tpl\napp/Views/templates/about_en.tpl"
  },
  {
    "objectID": "migration.html#install-codeigniter-and-ppci",
    "href": "migration.html#install-codeigniter-and-ppci",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Create a different folder from the one containing the initial code of the application to be migrated, for example app2, then, from the lower-level directory:\ncomposer create-project codeigniter4/appstarter app2\ncd app2\ncomposer require equinton/ppci\nvendor/equinton/ppci/install/install.sh\nThen edit the .env file, and update the necessary parameters (CI_ENVIRONMENT, app.baseURL and the database connection parameters)."
  },
  {
    "objectID": "migration.html#create-a-new-vhost-in-apache",
    "href": "migration.html#create-a-new-vhost-in-apache",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Here is an example configuration:\n&lt;VirtualHost *:80&gt;\n    ServerName app2.local\n    ServerPath /app2.local\n    RewriteEngine On\n    RewriteRule ^ https://app2.local%{REQUEST_URI} [R]\n&lt;/VirtualHost&gt;\n&lt;VirtualHost *:443&gt;\n    ServerName app2.local\n    ServerPath /app2.local\n    SSLEngine on\n    SSLCertificateFile  /etc/ssl/certs/server.crt\n    SSLCertificateKeyFile /etc/ssl/private/server.key\n    SSLCACertificateFile /etc/ssl/certs/cacert.crt\n    DocumentRoot /var/www/app2/public \n&lt;/VirtualHost&gt;\n&lt;Directory /var/www/app2/public&gt;\n    &lt;LimitExcept GET POST&gt;\n        Deny from all\n    &lt;/LimitExcept&gt;\n    Options -Indexes FollowSymLinks MultiViews\n    Header unset ETag\n    Header set Cache-Control \"max-age=0, no-cache, no-store, must-revalidate, private\"\n    Header set Pragma \"no-cache\"\n    Header set X-Frame-Options \"DENY\"\n    Header set X-XSS-Protection \"1; mode=block\"\n    Header set X-Content-Type-Options \"nosniff\"\n    Header always set Strict-Transport-Security \"max-age=63072000; includeSubdomains;\"\n    Header always set Content-Security-Policy \"default-src 'self' ; script-src blob: * 'self' 'unsafe-inline' 'unsafe-eval'; connect-src data: blob: filesystem: *.tile.openstreetmap.org 'self' ; img-src 'self' data: blob: *.openstreetmap.org ; style-src 'self' 'unsafe-inline' ;\"\n    &lt;FilesMatch \"\\.(ico|flv|jpg|jpeg|png|gif|js|css|svg)$\"&gt;\n        Header set Cache-Control \"max-age=604800, private\"\n    &lt;/FilesMatch&gt;\n&lt;FilesMatch \".*openstreetmap.*\\.png$\"&gt;\n    Header set Cache-Control \"max-age=2592000, public\"\n&lt;/FilesMatch&gt;\n    Require all granted\n    AllowOverride all\n    RewriteEngine On\n    RewriteBase /\n    RewriteCond \"/%{REQUEST_FILENAME}\" !-f\n    RewriteCond \"/%{REQUEST_FILENAME}\" !-d\n    RewriteRule \"(.*)\" \"/index.php?$1\" [PT,QSA]\n&lt;/Directory&gt;"
  },
  {
    "objectID": "migration.html#update-the-database",
    "href": "migration.html#update-the-database",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Edit the vendor/equinton/ppci/migration/updatedb.sql file, and check the first line (set search_path), replacing app with the name of the schema containing the data.\nThen run the sql file."
  },
  {
    "objectID": "migration.html#upgrade-menu",
    "href": "migration.html#upgrade-menu",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Edit the app/Config/menu.xml file, and add the necessary entries."
  },
  {
    "objectID": "migration.html#add-smarty-templates",
    "href": "migration.html#add-smarty-templates",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Copy the Smarty templates from display/templates into app/Views/templates, keeping the sub-folder organisation, except for the root files and the framework sub-folder.\n\n\nIn this folder, replace all the labels (filter on *tpl) :\n\n&lt;/form&gt; with {$csrf}&lt;/form&gt; to add the CSRF token in forms\ndroits with rights\n.gestion by .manage\ndatatable\" by datatable display”\ndatatable-nopaging-nosearching by datatable-nopaging-nosearching display\ndatatable-searching by datatable-searching display\ndatatable-nopaging-nosearching by datatable-nopaging-nosearching display\ndatatable-nopaging by datatable-nopaging display\ndatatable-nopaging-nosort by datatable-nopaging-nosort display\ndatatable-nosort by datatable-nosort display\ndatatable-export by datatable-export display\ndatatable-export-paging by datatable-export-paging display.\n\nDelete\n\nindex.php?module=\n\n\n\n\nGo back to all the links (look for the a href tags) and replace the first & with ?.\nChange all the form actions so that they look like this:\n&lt;form class=‘form-horizontal’ id=‘formName’ method=‘post’ action=‘moduleWrite’&gt;\n&lt;input type=‘hidden’ name=‘moduleBase’ value=‘module’&gt;\nThe action field can be removed. However, the moduleBase field must be retained: it is used to create the moduleDelete action via the javascript script in main_js.tpl."
  },
  {
    "objectID": "migration.html#rewriting-models",
    "href": "migration.html#rewriting-models",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Copy the files from modules/classes to app/Models.\n\n\nThese can be carried out using search/replace.\n\nreplace :\n&lt;?php by &lt;?php namespace App\\Models;use Ppci\\Models\\PpciModel;, with line breaks;\nextends ObjetBDD with extends PpciModel ;\n(public function __construct().*) by public function __construct(), ticking regular expression ;\n$this-&gt;columns by $this-&gt;fields ;\nfunction ecrire by function write;\nfunction lire by function read\nreplace parent::ecrire with parent::write.\n(parent::__construct().*) by parent::__construct(), checking regular expression ;\n$this-&gt;auto_id = 0 by $this-&gt;useAutoIncrement = false\nauto_date = 0 by autoFormatDate = false\ndelete :\n\n$this-&gt;auto_id = 1;\n$param[‘fullDescription’] = 1;\n$this-&gt;param = $param;\n\n\n\n\n\n\nrename the file name, for example espece.class.php to espece.php ;\nin SQL queries, modify variables by adding : at the end: :id must become :id: ;\nfor tables containing geographical data (fields with type=4), modify the queries or create the read() functions to add st_astext() for the fields concerned;\ndate transformations for fields not present in the table must be rewritten according to this scheme:\n\n$this-&gt;dateFields[] = ‘peche_date’;\n$this-&gt;datetimeFields[] = ‘peche_datetime’;\n\nif the utf8_encode function is used, it must be replaced by :\n\n$data = mb_convert_encoding($data, ‘UTF-8’, ‘ISO-8859-15, ISO-8859-1, Windows-1252’);\nThe function processes strings or arrays indiscriminately."
  },
  {
    "objectID": "migration.html#réécriture-des-librairies",
    "href": "migration.html#réécriture-des-librairies",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Recopier l’ensemble des modules dans app/Libraries. Il faut les transformer en classes.\n\n\nRemplacer :\n\n&lt;?php par :\n\n&lt;?php \nnamespace App\\Libraries;\n\nuse Ppci\\Libraries\\PpciException;\nuse Ppci\\Libraries\\PpciLibrary;\nuse Ppci\\Models\\PpciModel;\n\nclass Xx extends PpciLibrary { \n    /**\n     * @var xx\n     */\n    protected PpciModel $dataclass;\n    private $keyName;\n\n    function __construct()\n    {\n        parent::__construct();\n        $this-&gt;dataClass = new XXX();\n        $keyName = \"xxx_id\";\n        if (isset($_REQUEST[$this-&gt;keyName])) {\n            $this-&gt;id = $_REQUEST[$this-&gt;keyName];\n        }\n    }\n\ndataRead($dataClass, par $this-&gt;dataRead(\ndataDelete($dataClass, par $this-&gt;dataDelete(\ncase \"list\": par function list(){$vue=service('Smarty'); (saut de ligne)\ncase \"display\": par function display(){$vue=service('Smarty'); (saut de ligne)\ncase \"change\": par function change(){$vue=service('Smarty'); (saut de ligne)\ncase \"write\": par\n\n    function write() {\n    try {\n            $this-&gt;id = $this-&gt;dataWrite($_REQUEST);\n            if ($this-&gt;id &gt; 0) {\n                $_REQUEST[$this-&gt;keyName] = $this-&gt;id;\n                return $this-&gt;display();\n            } else {\n                return $this-&gt;change();\n            }\n        } catch (PpciException) {\n            return $this-&gt;change();\n        }\n    }\n\ncase \"delete\": par function delete(){\ncase \" par function\n\": par () {\nbreak; par } : fermeture des fonctions\n$dataclass par $this-&gt;dataClass\n$id par $this-&gt;id\n$vue par $this-&gt;vue\n$this-&gt;dataDelete($this-&gt;id); par\n\n        try {\n            $this-&gt;dataDelete($this-&gt;id);\n            return $this-&gt;list();\n        } catch (PpciException $e) {\n            return $this-&gt;change();\n        }\n\n$this-&gt;dataWrite( $_REQUEST ); par\n\n        try {\n            $this-&gt;id = $this-&gt;dataWrite($_REQUEST);\n            $_REQUEST[\"xx_id\"] = $this-&gt;id;\n            return $this-&gt;list();\n        } catch (PpciException $e) {\n            return $this-&gt;change();\n        }\n\n$message-&gt; par $this-&gt;message-&gt;\n\net suppression de :\n\nswitch ($t_module[\"param\"]) {\n$bdd, $ObjetBDDParam\n\n:::"
  },
  {
    "objectID": "migration.html#rewriting-libraries",
    "href": "migration.html#rewriting-libraries",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Copy all the modules into app/Libraries. They need to be transformed into classes.\n\n\nReplace :\n\n&lt;?php by:\n\n&lt;?php \nnamespace App\\Libraries;\n\nuse Ppci\\Libraries\\PpciException;\nuse Ppci\\Libraries\\PpciLibrary;\nuse Ppci\\Models\\PpciModel;\n\nclass Xx extends PpciLibrary { \n    /**\n     * @var xx\n     */\n    protected PpciModel $dataclass;\n    private $keyName;\n\n    function __construct()\n    {\n        parent::__construct();\n        $this-&gt;dataclass = new XXX();\n        $keyName = \"xxx_id\";\n        if (isset($_REQUEST[$this-&gt;keyName])) {\n            $this-&gt;id = $_REQUEST[$this-&gt;keyName];\n        }\n    }\n\ndataRead($dataclass, by $this-&gt;dataRead(\ndataDelete($dataclass, by $this-&gt;dataDelete(\ncase \"list\": by function list(){$vue=service('Smarty'); (line feed)\ncase \"display\": by function display(){$vue=service('Smarty'); (line feed)\ncase \"change\": by function change(){$vue=service('Smarty'); (line feed)\ncase \"write\": by:\n\n    function write() {\n    try {\n            $this-&gt;id = $this-&gt;dataWrite($_REQUEST);\n            if ($this-&gt;id &gt; 0) {\n                $_REQUEST[$this-&gt;keyName] = $this-&gt;id;\n                return $this-&gt;display();\n            } else {\n                return $this-&gt;change();\n            }\n        } catch (PpciException) {\n            return $this-&gt;change();\n        }\n    }\n\ncase \"delete\": by function delete(){\ncase \" by function\n\": by () {\nbreak; by } : functions close\n$dataclass by $this-&gt;dataclass\n$id by $this-&gt;id\n$vue by $this-&gt;vue\n$this-&gt;dataDelete($this-&gt;id); by\n\n        try {\n            $this-&gt;dataDelete($this-&gt;id);\n            return $this-&gt;list();\n        } catch (PpciException $e) {\n            return $this-&gt;change();\n        }\n\n$this-&gt;dataWrite( $_REQUEST ); by\n\n        try {\n            $this-&gt;id = $this-&gt;dataWrite($_REQUEST);\n            $_REQUEST[\"xx_id\"] = $this-&gt;id;\n            return $this-&gt;list();\n        } catch (PpciException $e) {\n            return $this-&gt;change();\n        }\n\n$message-&gt; by $this-&gt;message-&gt;\n\nand delete:\n\nswitch ($t_module[\"param\"]) {\n$bdd, $ObjetBDDParam\n\n\n\n\nReplace :\n\n$bdd-&gt;beginTransaction(); by :\n\n$db = $this-&gt;dataclass-&gt;db;\n$db-&gt;transBegin();\n\nreplace $bdd-&gt;commit(); by $db-&gt;transCommit();\nreplace $bdd-&gt;rollback(); by :\n\nif ($db-&gt;transEnabled) {\n    $db-&gt;transRollback();\n}"
  },
  {
    "objectID": "migration.html#generate-the-routes-and-rights-needed-to-run-the-modules",
    "href": "migration.html#generate-the-routes-and-rights-needed-to-run-the-modules",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Run the following command:\nphp vendor/equinton/ppci/migration/actionsParse.php ../app/param/actions.xml\nThe script will read the old actions.xml file, and prepare two contents:\n\nthe first is intended to be inserted into the app\\Config\\Rights class, and contains the list of rights required to run a module\nthe second contains a prototype of the routes for executing the modules. The content must be inserted into app/Config/Routes.php."
  },
  {
    "objectID": "migration.html#rename-the-gestion-right-to-manage.",
    "href": "migration.html#rename-the-gestion-right-to-manage.",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Use an automatic search function to replace gestion with manage."
  },
  {
    "objectID": "migration.html#add-controllers",
    "href": "migration.html#add-controllers",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Run the script :\nphp vendor/equinton/ppci/migration/generateController.php app/Config/Routes.php app/Controllers/\nThe program will read the routes defined, then create the corresponding controllers, grouping the routes by module.\nThe controllers include calls to functions from the corresponding library (same name)."
  },
  {
    "objectID": "migration.html#add-a-filter-for-generic-startup-operations",
    "href": "migration.html#add-a-filter-for-generic-startup-operations",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Add a filter to perform the operations described in modules/common.php ;\nif necessary, fill in the App\\Libraries\\Postlogin class, to perform specific operations after connection."
  },
  {
    "objectID": "migration.html#retrieving-translations",
    "href": "migration.html#retrieving-translations",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Ppci translations are provided by default. To avoid losing everything, you need to merge them with the old translations:\nmsgmerge app/Language/locales/lang.po ../oldapp/locales/en.po -o app/Language/locales/lang.po\ncd app/Language/locales\n./generate_po.sh\n./compile.sh"
  },
  {
    "objectID": "migration.html#upgrade-readme-and-about",
    "href": "migration.html#upgrade-readme-and-about",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Edit the following files:\n\napp/Config/news.txt for news in French\napp/Config/newsen.txt for news in English\n\nAlso edit the following templates:\n\napp/Views/templates/about_fr.tpl\napp/Views/templates/about_en.tpl"
  },
  {
    "objectID": "multi-instance.html",
    "href": "multi-instance.html",
    "title": "Multi-instance management",
    "section": "",
    "text": "Create an instance folder in the server tree, for example /var/www/app/instancename, then create the files needed to keep the instances separate:\n# Folder containing the application code\nAPP=/var/www/app\n# Folder containing the specific parameters of the instance\nFOLDER=\"/var/www/instances/instancename\"\nmkdir -P $FOLDER\nchmod g+r $FOLDER\ncd $FOLDER\nmkdir temp\n# New cryptographic keys\nopenssl genpkey -algorithm rsa -out id_app -pkeyopt rsa_keygen_bits:2048\nopenssl rsa -in id_app -pubout -out id_app.pub\n# Copy the configuration file\ncp $APP/env .env\n# Upgrade rights\nchmod -R g+r .\nchmod g+w temp\nchown www-data id_app\nthe temp folder is the folder in which the application will generate all the files before sending them to the browser. To avoid the risk of collision between two instances, it is strongly recommended that each has its own space.\n\n\n\nIn the virtual site description (myinstance.conf file, in /etc/apache2/sites-available), add :\n&lt;VirtualHost *:443&gt;\n(...)\nDocumentRoot /var/www/app\nsetenv envPath /var/www/instances/instancename\n(...) \n\n\n\nEdit the /var/www/instances/instancename/.env file:\napp.baseURL = ‘https://myinstance.mysociety.com’\nBASE_DIR = ‘/var/www/instances/instancename\napp.privateKey = ${BASE_DIR}/id_app\napp.pubKey = ${BASE_DIR}/id_app.pub\napp.APP_temp = ${BASE_DIR}/temp\ndatabase.default.hostname = localhost\ndatabase.default.database = dbname_instance\ndatabase.default.username = login_instance\ndatabase.default.password = password_instance\nAlso check the default login mode, and adapt it if necessary.\n\n\n\nIf you use scripts that are run from the command line, for example scripts that are scheduled to run at regular times (crontab), you will need to modify the script loader:\n#!/bin/bash\nexport envPath=/var/www/instances/instancename\ncd $envPath/public\nphp index.php myscript\nwhere myscript is the route to call.\nThe envPath variable is available in $_SERVER.\n\n\n\nThe end of the index.php file is modified as follows:\n//exit(CodeIgniter\\Boot::bootWeb($paths));\nrequire FCPATH. '../vendor/equinton/ppci/src/BootApp.php';\nexit (CodeIgniter\\BootApp::bootweb($paths));\nAnd the BootApp class contains this code:\n&lt;?php\n\nnamespace CodeIgniter;\n\nuse CodeIgniter\\Boot;\nuse Config\\Paths;\nuse CodeIgniter\\Config\\DotEnv;\n\nclass BootApp extends Boot {\n\n    protected static function loadDotEnv(Paths $paths): void\n    {\n        require_once $paths-&gt;systemDirectory . '/Config/DotEnv.php';\n        if (is_file($file = $_SERVER[\"envPath\"] . DIRECTORY_SEPARATOR . \".env\") && is_readable($file)) {\n            (new DotEnv($_SERVER[\"envPath\"],\".env\"))-&gt;load();\n        } else {\n            (new DotEnv($paths-&gt;appDirectory . '/../'))-&gt;load();\n        }\n    }\n}\nWarning: the use of an .env file placed elsewhere than at the root of the application prevents CodeIgniter’s debugging tools from working (development mode)."
  },
  {
    "objectID": "multi-instance.html#create-the-dedicated-instance-folder",
    "href": "multi-instance.html#create-the-dedicated-instance-folder",
    "title": "Multi-instance management",
    "section": "",
    "text": "Create an instance folder in the server tree, for example /var/www/app/instancename, then create the files needed to keep the instances separate:\n# Folder containing the application code\nAPP=/var/www/app\n# Folder containing the specific parameters of the instance\nFOLDER=\"/var/www/instances/instancename\"\nmkdir -P $FOLDER\nchmod g+r $FOLDER\ncd $FOLDER\nmkdir temp\n# New cryptographic keys\nopenssl genpkey -algorithm rsa -out id_app -pkeyopt rsa_keygen_bits:2048\nopenssl rsa -in id_app -pubout -out id_app.pub\n# Copy the configuration file\ncp $APP/env .env\n# Upgrade rights\nchmod -R g+r .\nchmod g+w temp\nchown www-data id_app\nthe temp folder is the folder in which the application will generate all the files before sending them to the browser. To avoid the risk of collision between two instances, it is strongly recommended that each has its own space."
  },
  {
    "objectID": "multi-instance.html#upgrading-the-apache-virtual-site",
    "href": "multi-instance.html#upgrading-the-apache-virtual-site",
    "title": "Multi-instance management",
    "section": "",
    "text": "In the virtual site description (myinstance.conf file, in /etc/apache2/sites-available), add :\n&lt;VirtualHost *:443&gt;\n(...)\nDocumentRoot /var/www/app\nsetenv envPath /var/www/instances/instancename\n(...)"
  },
  {
    "objectID": "multi-instance.html#modifying-the-parameters",
    "href": "multi-instance.html#modifying-the-parameters",
    "title": "Multi-instance management",
    "section": "",
    "text": "Edit the /var/www/instances/instancename/.env file:\napp.baseURL = ‘https://myinstance.mysociety.com’\nBASE_DIR = ‘/var/www/instances/instancename\napp.privateKey = ${BASE_DIR}/id_app\napp.pubKey = ${BASE_DIR}/id_app.pub\napp.APP_temp = ${BASE_DIR}/temp\ndatabase.default.hostname = localhost\ndatabase.default.database = dbname_instance\ndatabase.default.username = login_instance\ndatabase.default.password = password_instance\nAlso check the default login mode, and adapt it if necessary."
  },
  {
    "objectID": "multi-instance.html#adapt-scripts-run-on-the-command-line",
    "href": "multi-instance.html#adapt-scripts-run-on-the-command-line",
    "title": "Multi-instance management",
    "section": "",
    "text": "If you use scripts that are run from the command line, for example scripts that are scheduled to run at regular times (crontab), you will need to modify the script loader:\n#!/bin/bash\nexport envPath=/var/www/instances/instancename\ncd $envPath/public\nphp index.php myscript\nwhere myscript is the route to call.\nThe envPath variable is available in $_SERVER."
  },
  {
    "objectID": "multi-instance.html#technical-changes-made-to-the-code-to-manage-multi-instances",
    "href": "multi-instance.html#technical-changes-made-to-the-code-to-manage-multi-instances",
    "title": "Multi-instance management",
    "section": "",
    "text": "The end of the index.php file is modified as follows:\n//exit(CodeIgniter\\Boot::bootWeb($paths));\nrequire FCPATH. '../vendor/equinton/ppci/src/BootApp.php';\nexit (CodeIgniter\\BootApp::bootweb($paths));\nAnd the BootApp class contains this code:\n&lt;?php\n\nnamespace CodeIgniter;\n\nuse CodeIgniter\\Boot;\nuse Config\\Paths;\nuse CodeIgniter\\Config\\DotEnv;\n\nclass BootApp extends Boot {\n\n    protected static function loadDotEnv(Paths $paths): void\n    {\n        require_once $paths-&gt;systemDirectory . '/Config/DotEnv.php';\n        if (is_file($file = $_SERVER[\"envPath\"] . DIRECTORY_SEPARATOR . \".env\") && is_readable($file)) {\n            (new DotEnv($_SERVER[\"envPath\"],\".env\"))-&gt;load();\n        } else {\n            (new DotEnv($paths-&gt;appDirectory . '/../'))-&gt;load();\n        }\n    }\n}\nWarning: the use of an .env file placed elsewhere than at the root of the application prevents CodeIgniter’s debugging tools from working (development mode)."
  }
]