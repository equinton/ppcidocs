[
  {
    "objectID": "legal_notice.html",
    "href": "legal_notice.html",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "",
    "text": "Nom du site : documentation PPCI\nURL complète du site : https://equinton.github.io/ppcidocs/"
  },
  {
    "objectID": "legal_notice.html#identification-du-site",
    "href": "legal_notice.html#identification-du-site",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "",
    "text": "Nom du site : documentation PPCI\nURL complète du site : https://equinton.github.io/ppcidocs/"
  },
  {
    "objectID": "legal_notice.html#éditeurs-du-site",
    "href": "legal_notice.html#éditeurs-du-site",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "Éditeur(s) du site",
    "text": "Éditeur(s) du site\nINRAE - Institut national de recherche pour l’agriculture, l’alimentation et l’environnement\nINRAE est un établissement public à caractère scientifique et technologique. Il a son siège au 147, rue de l’université – 75338 Paris cedex 07. Ses statuts sont publiés dans le code rural et de la pêche maritime (articles R831-1 et suivants).\nIl est représenté par son Président Directeur général, M. Philippe MAUGUIN.\nContact mail: web@inrae.fr - contact téléphonique: 01 42 75 90 00"
  },
  {
    "objectID": "legal_notice.html#numéros-didentification",
    "href": "legal_notice.html#numéros-didentification",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "Numéros d’identification",
    "text": "Numéros d’identification\nINRAE SIREN: 180070039\nCode APE: 7219Z\nNuméro de TVA intracommunautaire: FR 57 1800700039"
  },
  {
    "objectID": "legal_notice.html#publication-du-site",
    "href": "legal_notice.html#publication-du-site",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "Publication du site",
    "text": "Publication du site\nNom du directeur de publication : M. Philippe MAUGUIN\nNom du responsable de rédaction : Éric Quinton\nWebmaster du site : Éric Quinton"
  },
  {
    "objectID": "legal_notice.html#hébergeur-du-site",
    "href": "legal_notice.html#hébergeur-du-site",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "Hébergeur du site",
    "text": "Hébergeur du site\nINRAE Établissement public à caractère scientifique et technologique 147, rue de l’université – 75338 Paris cedex 07 01 42 75 90 00\nCopyright © 2024 - All rights reserved. Author: Éric Quinton for EABX-INRAE. Documentation distributed under license  CC-BY"
  },
  {
    "objectID": "migration.html",
    "href": "migration.html",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Create a different folder from the one containing the initial code of the application to be migrated, for example app2, then, from the lower-level directory:\ncomposer create-project codeigniter4/appstarter app2\ncd app2\ncomposer require equinton/ppci\nvendor/equinton/ppci/install/install.sh\nThen edit the .env file, and update the necessary parameters (CI_ENVIRONMENT, app.baseURL and the database connection parameters).\n\n\n\nHere is an example configuration:\n&lt;VirtualHost *:80&gt;\n    ServerName app2.local\n    ServerPath /app2.local\n    RewriteEngine On\n    RewriteRule ^ https://app2.local%{REQUEST_URI} [R]\n&lt;/VirtualHost&gt;\n&lt;VirtualHost *:443&gt;\n    ServerName app2.local\n    ServerPath /app2.local\n    SSLEngine on\n    SSLCertificateFile  /etc/ssl/certs/server.crt\n    SSLCertificateKeyFile /etc/ssl/private/server.key\n    SSLCACertificateFile /etc/ssl/certs/cacert.crt\n    DocumentRoot /var/www/app2/public \n&lt;/VirtualHost&gt;\n&lt;Directory /var/www/app2/public&gt;\n    &lt;LimitExcept GET POST&gt;\n        Deny from all\n    &lt;/LimitExcept&gt;\n    Options -Indexes FollowSymLinks MultiViews\n    Header unset ETag\n    Header set Cache-Control \"max-age=0, no-cache, no-store, must-revalidate, private\"\n    Header set Pragma \"no-cache\"\n    Header set X-Frame-Options \"DENY\"\n    Header set X-XSS-Protection \"1; mode=block\"\n    Header set X-Content-Type-Options \"nosniff\"\n    Header always set Strict-Transport-Security \"max-age=63072000; includeSubdomains;\"\n    Header always set Content-Security-Policy \"default-src 'self' ; script-src blob: * 'self' 'unsafe-inline' 'unsafe-eval'; connect-src data: blob: filesystem: *.tile.openstreetmap.org 'self' ; img-src 'self' data: blob: *.openstreetmap.org ; style-src 'self' 'unsafe-inline' ;\"\n    &lt;FilesMatch \"\\.(ico|flv|jpg|jpeg|png|gif|js|css|svg)$\"&gt;\n        Header set Cache-Control \"max-age=604800, private\"\n    &lt;/FilesMatch&gt;\n&lt;FilesMatch \".*openstreetmap.*\\.png$\"&gt;\n    Header set Cache-Control \"max-age=2592000, public\"\n&lt;/FilesMatch&gt;\n    Require all granted\n    AllowOverride all\n    RewriteEngine On\n    RewriteBase /\n    RewriteCond \"/%{REQUEST_FILENAME}\" !-f\n    RewriteCond \"/%{REQUEST_FILENAME}\" !-d\n    RewriteRule \"(.*)\" \"/index.php?$1\" [PT,QSA]\n&lt;/Directory&gt;\n\n\n\nEdit the vendor/equinton/ppci/migration/updatedb.sql file, and check the first line (set search_path), replacing app with the name of the schema containing the data.\nThen run the sql file.\n\n\n\nEdit the app/Config/menu.xml file, and add the necessary entries.\n\n\n\nCopy the Smarty templates from display/templates into app/Views/templates, keeping the sub-folder organisation, except for the root files and the framework sub-folder.\n\n\nIn this folder, replace all the labels (filter on *tpl) :\n\n&lt;/form&gt; with {$csrf}&lt;/form&gt; to add the CSRF token in forms\ndroits with rights\n.gestion by .manage\ndatatable\" by datatable display”\ndatatable-nopaging-nosearching by datatable-nopaging-nosearching display\ndatatable-searching by datatable-searching display\ndatatable-nopaging-nosearching by datatable-nopaging-nosearching display\ndatatable-nopaging by datatable-nopaging display\ndatatable-nopaging-nosort by datatable-nopaging-nosort display\ndatatable-nosort by datatable-nosort display\ndatatable-export by datatable-export display\ndatatable-export-paging by datatable-export-paging display.\n\nDelete\n\nindex.php?module=\n\n\n\n\nGo back to all the links (look for the a href tags) and replace the first & with ?.\nChange all the form actions so that they look like this:\n&lt;form class=‘form-horizontal’ id=‘formName’ method=‘post’ action=‘moduleWrite’&gt;\n&lt;input type=‘hidden’ name=‘moduleBase’ value=‘module’&gt;\nThe action field can be removed. However, the moduleBase field must be retained: it is used to create the moduleDelete action via the javascript script in main_js.tpl.\n\n\n\n\nCopy the files from modules/classes to app/Models.\n\n\nThese can be carried out using search/replace.\n\nreplace :\n&lt;?php by &lt;?php namespace App\\Models;use Ppci\\Models\\PpciModel;, with line breaks;\nextends ObjetBDD with extends PpciModel ;\n(public function __construct().*) by public function __construct(), ticking regular expression ;\n$this-&gt;columns by $this-&gt;fields ;\nfunction ecrire by function write;\nfunction lire by function read\nreplace parent::ecrire with parent::write.\n(parent::__construct().*) by parent::__construct(), checking regular expression ;\n$this-&gt;auto_id = 0 by $this-&gt;useAutoIncrement = false\nauto_date = 0 by autoFormatDate = false\ndelete :\n\n$this-&gt;auto_id = 1;\n$param[‘fullDescription’] = 1;\n$this-&gt;param = $param;\n\n\n\n\n\n\nrename the file name, for example espece.class.php to espece.php ;\nin SQL queries, modify variables by adding : at the end: :id must become :id: ;\nfor tables containing geographical data (fields with type=4), modify the queries or create the read() functions to add st_astext() for the fields concerned;\ndate transformations for fields not present in the table must be rewritten according to this scheme:\n\n$this-&gt;dateFields[] = ‘peche_date’;\n$this-&gt;datetimeFields[] = ‘peche_datetime’;\n\nif the utf8_encode function is used, it must be replaced by :\n\n$data = mb_convert_encoding($data, ‘UTF-8’, ‘ISO-8859-15, ISO-8859-1, Windows-1252’);\nThe function processes strings or arrays indiscriminately.\n\n\n\n\nCopy all the modules into app/Libraries. They need to be transformed into classes.\n\n\nReplace :\n\n&lt;?php by:\n\n&lt;?php \nnamespace App\\Libraries;\n\nuse Ppci\\Libraries\\PpciException;\nuse Ppci\\Libraries\\PpciLibrary;\nuse Ppci\\Models\\PpciModel;\n\nclass Xx extends PpciLibrary { \n    /**\n     * @var xx\n     */\n    protected PpciModel $dataclass;\n    private $keyName;\n\n    function __construct()\n    {\n        parent::__construct();\n        $this-&gt;dataclass = new XXX();\n        $keyName = \"xxx_id\";\n        if (isset($_REQUEST[$this-&gt;keyName])) {\n            $this-&gt;id = $_REQUEST[$this-&gt;keyName];\n        }\n    }\n\ndataRead($dataclass, by $this-&gt;dataRead(\ndataDelete($dataclass, by $this-&gt;dataDelete(\ncase \"list\": by function list(){$vue=service('Smarty'); (line feed)\ncase \"display\": by function display(){$vue=service('Smarty'); (line feed)\ncase \"change\": by function change(){$vue=service('Smarty'); (line feed)\ncase \"write\": by:\n\n    function write() {\n    try {\n            $this-&gt;id = $this-&gt;dataWrite($_REQUEST);\n            if ($this-&gt;id &gt; 0) {\n                $_REQUEST[$this-&gt;keyName] = $this-&gt;id;\n                return $this-&gt;display();\n            } else {\n                return $this-&gt;change();\n            }\n        } catch (PpciException) {\n            return $this-&gt;change();\n        }\n    }\n\ncase \"delete\": by function delete(){\ncase \" by function\n\": by () {\nbreak; by } : functions close\n$dataclass by $this-&gt;dataclass\n$id by $this-&gt;id\n$vue by $this-&gt;vue\n$this-&gt;dataDelete($this-&gt;id); by\n\n        try {\n            $this-&gt;dataDelete($this-&gt;id);\n            return $this-&gt;list();\n        } catch (PpciException $e) {\n            return $this-&gt;change();\n        }\n\n$this-&gt;dataWrite( $_REQUEST ); by\n\n        try {\n            $this-&gt;id = $this-&gt;dataWrite($_REQUEST);\n            $_REQUEST[\"xx_id\"] = $this-&gt;id;\n            return $this-&gt;list();\n        } catch (PpciException $e) {\n            return $this-&gt;change();\n        }\n\n$message-&gt; by $this-&gt;message-&gt;\n\nand delete:\n\nswitch ($t_module[\"param\"]) {\n$bdd, $ObjetBDDParam\n\n\n\n\nReplace :\n\n$bdd-&gt;beginTransaction(); by :\n\n$db = $this-&gt;dataclass-&gt;db;\n$db-&gt;transBegin();\n\nreplace $bdd-&gt;commit(); by $db-&gt;transCommit();\nreplace $bdd-&gt;rollback(); by :\n\nif ($db-&gt;transEnabled) {\n    $db-&gt;transRollback();\n}\n\n\n\n\nRun the following command:\nphp vendor/equinton/ppci/migration/actionsParse.php ../app/param/actions.xml\nThe script will read the old actions.xml file, and prepare two contents:\n\nthe first is intended to be inserted into the app\\Config\\Rights class, and contains the list of rights required to run a module\nthe second contains a prototype of the routes for executing the modules. The content must be inserted into app/Config/Routes.php.\n\n\n\n\nUse an automatic search function to replace gestion with manage.\n\n\n\nRun the script :\nphp vendor/equinton/ppci/migration/generateController.php app/Config/Routes.php app/Controllers/\nThe program will read the routes defined, then create the corresponding controllers, grouping the routes by module.\nThe controllers include calls to functions from the corresponding library (same name).\n\n\n\n\nAdd a filter to perform the operations described in modules/common.php ;\nif necessary, fill in the App\\Libraries\\Postlogin class, to perform specific operations after connection.\n\n\n\n\nPpci translations are provided by default. To avoid losing everything, you need to merge them with the old translations:\nmsgmerge app/Language/locales/lang.po ../oldapp/locales/en.po -o app/Language/locales/lang.po\ncd app/Language/locales\n./generate_po.sh\n./compile.sh\n\n\n\nEdit the following files:\n\napp/Config/news.txt for news in French\napp/Config/newsen.txt for news in English\n\nAlso edit the following templates:\n\napp/Views/templates/about_fr.tpl\napp/Views/templates/about_en.tpl"
  },
  {
    "objectID": "migration.html#install-codeigniter-and-ppci",
    "href": "migration.html#install-codeigniter-and-ppci",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Create a different folder from the one containing the initial code of the application to be migrated, for example app2, then, from the lower-level directory:\ncomposer create-project codeigniter4/appstarter app2\ncd app2\ncomposer require equinton/ppci\nvendor/equinton/ppci/install/install.sh\nThen edit the .env file, and update the necessary parameters (CI_ENVIRONMENT, app.baseURL and the database connection parameters)."
  },
  {
    "objectID": "migration.html#create-a-new-vhost-in-apache",
    "href": "migration.html#create-a-new-vhost-in-apache",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Here is an example configuration:\n&lt;VirtualHost *:80&gt;\n    ServerName app2.local\n    ServerPath /app2.local\n    RewriteEngine On\n    RewriteRule ^ https://app2.local%{REQUEST_URI} [R]\n&lt;/VirtualHost&gt;\n&lt;VirtualHost *:443&gt;\n    ServerName app2.local\n    ServerPath /app2.local\n    SSLEngine on\n    SSLCertificateFile  /etc/ssl/certs/server.crt\n    SSLCertificateKeyFile /etc/ssl/private/server.key\n    SSLCACertificateFile /etc/ssl/certs/cacert.crt\n    DocumentRoot /var/www/app2/public \n&lt;/VirtualHost&gt;\n&lt;Directory /var/www/app2/public&gt;\n    &lt;LimitExcept GET POST&gt;\n        Deny from all\n    &lt;/LimitExcept&gt;\n    Options -Indexes FollowSymLinks MultiViews\n    Header unset ETag\n    Header set Cache-Control \"max-age=0, no-cache, no-store, must-revalidate, private\"\n    Header set Pragma \"no-cache\"\n    Header set X-Frame-Options \"DENY\"\n    Header set X-XSS-Protection \"1; mode=block\"\n    Header set X-Content-Type-Options \"nosniff\"\n    Header always set Strict-Transport-Security \"max-age=63072000; includeSubdomains;\"\n    Header always set Content-Security-Policy \"default-src 'self' ; script-src blob: * 'self' 'unsafe-inline' 'unsafe-eval'; connect-src data: blob: filesystem: *.tile.openstreetmap.org 'self' ; img-src 'self' data: blob: *.openstreetmap.org ; style-src 'self' 'unsafe-inline' ;\"\n    &lt;FilesMatch \"\\.(ico|flv|jpg|jpeg|png|gif|js|css|svg)$\"&gt;\n        Header set Cache-Control \"max-age=604800, private\"\n    &lt;/FilesMatch&gt;\n&lt;FilesMatch \".*openstreetmap.*\\.png$\"&gt;\n    Header set Cache-Control \"max-age=2592000, public\"\n&lt;/FilesMatch&gt;\n    Require all granted\n    AllowOverride all\n    RewriteEngine On\n    RewriteBase /\n    RewriteCond \"/%{REQUEST_FILENAME}\" !-f\n    RewriteCond \"/%{REQUEST_FILENAME}\" !-d\n    RewriteRule \"(.*)\" \"/index.php?$1\" [PT,QSA]\n&lt;/Directory&gt;"
  },
  {
    "objectID": "migration.html#update-the-database",
    "href": "migration.html#update-the-database",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Edit the vendor/equinton/ppci/migration/updatedb.sql file, and check the first line (set search_path), replacing app with the name of the schema containing the data.\nThen run the sql file."
  },
  {
    "objectID": "migration.html#upgrade-menu",
    "href": "migration.html#upgrade-menu",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Edit the app/Config/menu.xml file, and add the necessary entries."
  },
  {
    "objectID": "migration.html#add-smarty-templates",
    "href": "migration.html#add-smarty-templates",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Copy the Smarty templates from display/templates into app/Views/templates, keeping the sub-folder organisation, except for the root files and the framework sub-folder.\n\n\nIn this folder, replace all the labels (filter on *tpl) :\n\n&lt;/form&gt; with {$csrf}&lt;/form&gt; to add the CSRF token in forms\ndroits with rights\n.gestion by .manage\ndatatable\" by datatable display”\ndatatable-nopaging-nosearching by datatable-nopaging-nosearching display\ndatatable-searching by datatable-searching display\ndatatable-nopaging-nosearching by datatable-nopaging-nosearching display\ndatatable-nopaging by datatable-nopaging display\ndatatable-nopaging-nosort by datatable-nopaging-nosort display\ndatatable-nosort by datatable-nosort display\ndatatable-export by datatable-export display\ndatatable-export-paging by datatable-export-paging display.\n\nDelete\n\nindex.php?module=\n\n\n\n\nGo back to all the links (look for the a href tags) and replace the first & with ?.\nChange all the form actions so that they look like this:\n&lt;form class=‘form-horizontal’ id=‘formName’ method=‘post’ action=‘moduleWrite’&gt;\n&lt;input type=‘hidden’ name=‘moduleBase’ value=‘module’&gt;\nThe action field can be removed. However, the moduleBase field must be retained: it is used to create the moduleDelete action via the javascript script in main_js.tpl."
  },
  {
    "objectID": "migration.html#rewriting-models",
    "href": "migration.html#rewriting-models",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Copy the files from modules/classes to app/Models.\n\n\nThese can be carried out using search/replace.\n\nreplace :\n&lt;?php by &lt;?php namespace App\\Models;use Ppci\\Models\\PpciModel;, with line breaks;\nextends ObjetBDD with extends PpciModel ;\n(public function __construct().*) by public function __construct(), ticking regular expression ;\n$this-&gt;columns by $this-&gt;fields ;\nfunction ecrire by function write;\nfunction lire by function read\nreplace parent::ecrire with parent::write.\n(parent::__construct().*) by parent::__construct(), checking regular expression ;\n$this-&gt;auto_id = 0 by $this-&gt;useAutoIncrement = false\nauto_date = 0 by autoFormatDate = false\ndelete :\n\n$this-&gt;auto_id = 1;\n$param[‘fullDescription’] = 1;\n$this-&gt;param = $param;\n\n\n\n\n\n\nrename the file name, for example espece.class.php to espece.php ;\nin SQL queries, modify variables by adding : at the end: :id must become :id: ;\nfor tables containing geographical data (fields with type=4), modify the queries or create the read() functions to add st_astext() for the fields concerned;\ndate transformations for fields not present in the table must be rewritten according to this scheme:\n\n$this-&gt;dateFields[] = ‘peche_date’;\n$this-&gt;datetimeFields[] = ‘peche_datetime’;\n\nif the utf8_encode function is used, it must be replaced by :\n\n$data = mb_convert_encoding($data, ‘UTF-8’, ‘ISO-8859-15, ISO-8859-1, Windows-1252’);\nThe function processes strings or arrays indiscriminately."
  },
  {
    "objectID": "migration.html#rewriting-libraries",
    "href": "migration.html#rewriting-libraries",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Copy all the modules into app/Libraries. They need to be transformed into classes.\n\n\nReplace :\n\n&lt;?php by:\n\n&lt;?php \nnamespace App\\Libraries;\n\nuse Ppci\\Libraries\\PpciException;\nuse Ppci\\Libraries\\PpciLibrary;\nuse Ppci\\Models\\PpciModel;\n\nclass Xx extends PpciLibrary { \n    /**\n     * @var xx\n     */\n    protected PpciModel $dataclass;\n    private $keyName;\n\n    function __construct()\n    {\n        parent::__construct();\n        $this-&gt;dataclass = new XXX();\n        $keyName = \"xxx_id\";\n        if (isset($_REQUEST[$this-&gt;keyName])) {\n            $this-&gt;id = $_REQUEST[$this-&gt;keyName];\n        }\n    }\n\ndataRead($dataclass, by $this-&gt;dataRead(\ndataDelete($dataclass, by $this-&gt;dataDelete(\ncase \"list\": by function list(){$vue=service('Smarty'); (line feed)\ncase \"display\": by function display(){$vue=service('Smarty'); (line feed)\ncase \"change\": by function change(){$vue=service('Smarty'); (line feed)\ncase \"write\": by:\n\n    function write() {\n    try {\n            $this-&gt;id = $this-&gt;dataWrite($_REQUEST);\n            if ($this-&gt;id &gt; 0) {\n                $_REQUEST[$this-&gt;keyName] = $this-&gt;id;\n                return $this-&gt;display();\n            } else {\n                return $this-&gt;change();\n            }\n        } catch (PpciException) {\n            return $this-&gt;change();\n        }\n    }\n\ncase \"delete\": by function delete(){\ncase \" by function\n\": by () {\nbreak; by } : functions close\n$dataclass by $this-&gt;dataclass\n$id by $this-&gt;id\n$vue by $this-&gt;vue\n$this-&gt;dataDelete($this-&gt;id); by\n\n        try {\n            $this-&gt;dataDelete($this-&gt;id);\n            return $this-&gt;list();\n        } catch (PpciException $e) {\n            return $this-&gt;change();\n        }\n\n$this-&gt;dataWrite( $_REQUEST ); by\n\n        try {\n            $this-&gt;id = $this-&gt;dataWrite($_REQUEST);\n            $_REQUEST[\"xx_id\"] = $this-&gt;id;\n            return $this-&gt;list();\n        } catch (PpciException $e) {\n            return $this-&gt;change();\n        }\n\n$message-&gt; by $this-&gt;message-&gt;\n\nand delete:\n\nswitch ($t_module[\"param\"]) {\n$bdd, $ObjetBDDParam\n\n\n\n\nReplace :\n\n$bdd-&gt;beginTransaction(); by :\n\n$db = $this-&gt;dataclass-&gt;db;\n$db-&gt;transBegin();\n\nreplace $bdd-&gt;commit(); by $db-&gt;transCommit();\nreplace $bdd-&gt;rollback(); by :\n\nif ($db-&gt;transEnabled) {\n    $db-&gt;transRollback();\n}"
  },
  {
    "objectID": "migration.html#generate-the-routes-and-rights-needed-to-run-the-modules",
    "href": "migration.html#generate-the-routes-and-rights-needed-to-run-the-modules",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Run the following command:\nphp vendor/equinton/ppci/migration/actionsParse.php ../app/param/actions.xml\nThe script will read the old actions.xml file, and prepare two contents:\n\nthe first is intended to be inserted into the app\\Config\\Rights class, and contains the list of rights required to run a module\nthe second contains a prototype of the routes for executing the modules. The content must be inserted into app/Config/Routes.php."
  },
  {
    "objectID": "migration.html#rename-the-gestion-right-to-manage.",
    "href": "migration.html#rename-the-gestion-right-to-manage.",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Use an automatic search function to replace gestion with manage."
  },
  {
    "objectID": "migration.html#add-controllers",
    "href": "migration.html#add-controllers",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Run the script :\nphp vendor/equinton/ppci/migration/generateController.php app/Config/Routes.php app/Controllers/\nThe program will read the routes defined, then create the corresponding controllers, grouping the routes by module.\nThe controllers include calls to functions from the corresponding library (same name)."
  },
  {
    "objectID": "migration.html#add-a-filter-for-generic-startup-operations",
    "href": "migration.html#add-a-filter-for-generic-startup-operations",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Add a filter to perform the operations described in modules/common.php ;\nif necessary, fill in the App\\Libraries\\Postlogin class, to perform specific operations after connection."
  },
  {
    "objectID": "migration.html#retrieving-translations",
    "href": "migration.html#retrieving-translations",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Ppci translations are provided by default. To avoid losing everything, you need to merge them with the old translations:\nmsgmerge app/Language/locales/lang.po ../oldapp/locales/en.po -o app/Language/locales/lang.po\ncd app/Language/locales\n./generate_po.sh\n./compile.sh"
  },
  {
    "objectID": "migration.html#upgrade-readme-and-about",
    "href": "migration.html#upgrade-readme-and-about",
    "title": "Migration from PrototypePhp",
    "section": "",
    "text": "Edit the following files:\n\napp/Config/news.txt for news in French\napp/Config/newsen.txt for news in English\n\nAlso edit the following templates:\n\napp/Views/templates/about_fr.tpl\napp/Views/templates/about_en.tpl"
  },
  {
    "objectID": "partners.html#list-of-financial-partners",
    "href": "partners.html#list-of-financial-partners",
    "title": "Partners",
    "section": "List of Financial partners",
    "text": "List of Financial partners"
  },
  {
    "objectID": "identification.html",
    "href": "identification.html",
    "title": "Identification management",
    "section": "",
    "text": "PPCI offers several mechanisms for managing user identification:\n\nstorage of accounts in the database (BDD)\nidentification with an LDAP server (LDAP)\nidentification with a Common Access Service (CAS) server\nidentification with an OpenID Connect (OIDC) server\nidentification provided by the web server, to use Shibboleth mechanisms (Apache Mellon mode, for example) (HEADER)\nmixed mechanisms, using third-party servers and database storage for accounts not otherwise managed:\n\nLDAP-BDD: identification test with the LDAP directory, and if unsuccessful, with the database.\nCAS-BDD and OIDC-BDD: a button can be used to select identification with the server in question.\n\n\nIn addition, users can activate dual TOTP identification. This is compulsory to access the administration modules.\nNote that LDAP identification is now considered obsolete. It is better to use OIDC or CAS services, where available.\n\n\n\n\nParameters are defined in Ppci\\ConfigIdentificationConfig.\n\nCONNECTION_max_attempts : if the connection fails (default 5), the account will be blocked for the time specified in :\n\nCONNECTION_blocking_duration (default 600 seconds). Note that attempting to connect during this period resets the counter to zero\n\nAPP_passwordMinLength : minimum password length.\nAPPLI_lostPassword : if set to 1 (default), the user will be able to ask for their password to be reset, provided their email address is entered\ntokenIdentityValidity : validity period of the token generated during the BDD or LDAP connection, to avoid having to re-identify during the day. By default, 10 hours.\n\n\n\n\nVariables are defined in Ppci\\Config\\IdentificationConfig.LDAP.\n\naddress : LDAP server address\nport : connection port\nrdn : login account for directory queries, if required\nbasedn : account search base\nuser_attrib : attribute containing the user’s identifier (uid)\nv3 : version 3 of the directory, set by default to true\ntls : set to true to activate the tls connection\nupn_suffix : upn suffix, necessary in some cases for Active Directory\ngroupSupport : if set to true, groups will be retrieved from the directory to feed the rights management module\ngroupAttrib : name of the attribute containing the user’s groups\ncommonNameAttrib : name of the attribute containing the common name\nmailAttrib : name of the attribute containing the email\nattributgroupname : name of the attribute containing the group name\nattributloginname : name of the attribute containing the uid member\nbasedngroup : groups search path\ntimeout : directory search time-out (set to 2 seconds by default)\nldapnoanonymous : if set to true, querying the directory to retrieve groups requires a connection\n\nldaplogin : connection login\nldappassword : associated password\n\n\n\n\n\nAn icon has been added to the button used to activate identification with the CAS or OIDC server: Ppci\\Config\\IdentificationConfig.identificationLogo = \"${FRONT_DIR}/favicon.png\"\n\n\n\n\nParameters are defined in Ppci\\Config\\IdentificationConfig.XX, where XX must be replaced by CAS, OIDC or HEADER.\nGeneric parameters:\n\nmail : attribute containing the email\nfirstname : attribute containing the first name\nlastname : attribute containing the last name\nname : attribute containing the common name\ngroups : attribute containing user membership groups\ngetGroups : if set to 1 (default), the user groups supplied by the identification server are processed\n\n\n\n\naddress : CAS server address, by example: monserveur.society.com\nuri : identification access folder. Default setting : /cas\nport : default: 443\ndebug : f set to true or 1, traces are stored in the file writable/logs/cas.log\nCApath : path to the certificate used to validate the CAS server. If it is not entered, the CAS server will not be verified (not recommended for production use).\n\n\n\n\n\nname : provider code\nprovider : provider web address (must start with https://)\nclientId : code furnished by the provider\nclientSecret : secret key furnished by the provider\nscopeGroup : OIDC scope name which contains the secondary attributes (default : affectation)\n\n\n\n\n\nlogin : name of the $_SERVER attribute containing the login, returned by the Apache server\norganizationGranted : table containing the code or name of authorised organisations. If this table is filled in, and if a new user does not belong to one of the organisations indicated (organization attribute), their account will not be created.\ngroupsGranted : table containing the list of authorised groups. If a user logs in for the first time and their group (or one of their groups) is on the list of authorised groups, their account will be activated automatically. If not, the account will be deactivated and an email will be sent to the administrators inviting them to activate the account.\n\n\n\n\n\nThe parameters can be accessed from Ppci\\Config\\IdentificationConfig.\n\nadminSessionDuration : period during which the identification remains valid for access to the administration modules. Default: 10’.\ndisableTotpToAdmin : if set to 1, disables dual-identification for access to administration modules. Should not be used in production!"
  },
  {
    "objectID": "identification.html#specific-parameters-for-each-type-of-identification",
    "href": "identification.html#specific-parameters-for-each-type-of-identification",
    "title": "Identification management",
    "section": "",
    "text": "Parameters are defined in Ppci\\ConfigIdentificationConfig.\n\nCONNECTION_max_attempts : if the connection fails (default 5), the account will be blocked for the time specified in :\n\nCONNECTION_blocking_duration (default 600 seconds). Note that attempting to connect during this period resets the counter to zero\n\nAPP_passwordMinLength : minimum password length.\nAPPLI_lostPassword : if set to 1 (default), the user will be able to ask for their password to be reset, provided their email address is entered\ntokenIdentityValidity : validity period of the token generated during the BDD or LDAP connection, to avoid having to re-identify during the day. By default, 10 hours.\n\n\n\n\nVariables are defined in Ppci\\Config\\IdentificationConfig.LDAP.\n\naddress : LDAP server address\nport : connection port\nrdn : login account for directory queries, if required\nbasedn : account search base\nuser_attrib : attribute containing the user’s identifier (uid)\nv3 : version 3 of the directory, set by default to true\ntls : set to true to activate the tls connection\nupn_suffix : upn suffix, necessary in some cases for Active Directory\ngroupSupport : if set to true, groups will be retrieved from the directory to feed the rights management module\ngroupAttrib : name of the attribute containing the user’s groups\ncommonNameAttrib : name of the attribute containing the common name\nmailAttrib : name of the attribute containing the email\nattributgroupname : name of the attribute containing the group name\nattributloginname : name of the attribute containing the uid member\nbasedngroup : groups search path\ntimeout : directory search time-out (set to 2 seconds by default)\nldapnoanonymous : if set to true, querying the directory to retrieve groups requires a connection\n\nldaplogin : connection login\nldappassword : associated password\n\n\n\n\n\nAn icon has been added to the button used to activate identification with the CAS or OIDC server: Ppci\\Config\\IdentificationConfig.identificationLogo = \"${FRONT_DIR}/favicon.png\""
  },
  {
    "objectID": "identification.html#identification-on-dedicated-servers-header-cas-oidc",
    "href": "identification.html#identification-on-dedicated-servers-header-cas-oidc",
    "title": "Identification management",
    "section": "",
    "text": "Parameters are defined in Ppci\\Config\\IdentificationConfig.XX, where XX must be replaced by CAS, OIDC or HEADER.\nGeneric parameters:\n\nmail : attribute containing the email\nfirstname : attribute containing the first name\nlastname : attribute containing the last name\nname : attribute containing the common name\ngroups : attribute containing user membership groups\ngetGroups : if set to 1 (default), the user groups supplied by the identification server are processed\n\n\n\n\naddress : CAS server address, by example: monserveur.society.com\nuri : identification access folder. Default setting : /cas\nport : default: 443\ndebug : f set to true or 1, traces are stored in the file writable/logs/cas.log\nCApath : path to the certificate used to validate the CAS server. If it is not entered, the CAS server will not be verified (not recommended for production use).\n\n\n\n\n\nname : provider code\nprovider : provider web address (must start with https://)\nclientId : code furnished by the provider\nclientSecret : secret key furnished by the provider\nscopeGroup : OIDC scope name which contains the secondary attributes (default : affectation)\n\n\n\n\n\nlogin : name of the $_SERVER attribute containing the login, returned by the Apache server\norganizationGranted : table containing the code or name of authorised organisations. If this table is filled in, and if a new user does not belong to one of the organisations indicated (organization attribute), their account will not be created.\ngroupsGranted : table containing the list of authorised groups. If a user logs in for the first time and their group (or one of their groups) is on the list of authorised groups, their account will be activated automatically. If not, the account will be deactivated and an email will be sent to the administrators inviting them to activate the account."
  },
  {
    "objectID": "identification.html#managing-access-to-administration-modules",
    "href": "identification.html#managing-access-to-administration-modules",
    "title": "Identification management",
    "section": "",
    "text": "The parameters can be accessed from Ppci\\Config\\IdentificationConfig.\n\nadminSessionDuration : period during which the identification remains valid for access to the administration modules. Default: 10’.\ndisableTotpToAdmin : if set to 1, disables dual-identification for access to administration modules. Should not be used in production!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "",
    "text": "PrototypePHP for CodeIgniter (PPCI) is a port of the framework https://github.com/equinton/prototypephp developed in the 2000s to write various web applications, including Collec-Science.\nTo facilitate web application maintenance, PrototypePHP was ported to CodeIgniter in 2024. It takes the form of an additional component. It uses most of CodeIgniter’s features (routes, filters, services, database access, parameter management, etc.), with the exception of :\n\nweb page display, which remains the responsibility of the Smarty template engine\nidentification and rights management, where PPCI is much richer in terms of functionalities, such as support for multiple identification mechanisms (database, LDAP, CAS, OIDC, TOTP, etc.) or rights management.\n\nThe component is distributed under MIT licence.\nThe English version of this documentation is translated with DeepL.com (free version)"
  },
  {
    "objectID": "parameters.html",
    "href": "parameters.html",
    "title": "Application parameters",
    "section": "",
    "text": "The parameters are defined in two files: app/Config/App.php and vendor/equinton/ppci/src/Config/IdentificationConfig.php.\nWhile they can all be modified during each implementation using the .env file at the root of the application, some should not be modified using this mechanism.\nParameters in the .env file are prefixed with either app. or Ppci\\Config\\IdentificationConfig., depending on their origin. The env file contains all the variables that can be modified when an instance of the software is implemented.\n\n\n\n\n\n\n\n\n\n\n\nParameter (with the radical used in the .env file)\nDescription\nDefault value\nModifiable in .env\n\n\n\n\napp.baseURL\nInstance address\n\nmandatory\n\n\nBASE_DIR\nvariable used in .env, to indicate the path to the application\ne.g. “/var/www/collec2”\nmandatory\n\n\nFRONT_DIR\nvariable used in .env, to indicate the path to the public folder, the base of web pages\n${BASE_DIR}/public\nin principle, no\n\n\napp.defaultLocale\nDefault language in the instance\nfr\npossible\n\n\napp.supportedLocales\nLanguages ​​managed by the application\n[‘fr’,‘en’]\npossible, provided that other languages ​​are integrated into the framework\n\n\napp.version\nApplication version\n\nnever\n\n\napp.versionDate\nVersion creation date\n\nnever\n\n\napp.dbversion\nDatabase version. The version must also exist in the database dbversion table\n\nnever\n\n\ndatabaseSchemaFile\nPath where the png describing the database tables is placed\ne.g.: ROOTPATH ​​. “documentation/collec-schema.png”\nnever\n\n\napp.logDuration\nDuration, in days, to keep logs in the logs table\n365\npossible\n\n\napp.privateKey\nlocation of the private key used for encryption or decryption operations\ne.g., ${BASE_DIR}/id_collec\npossible\n\n\napp.pubKey\nlocation of the public key used for encryption or decryption operations\ne.g. ${BASE_DIR}/id_collec.pub\npossible\n\n\nsession.expiration\nSession duration, in seconds\n14400 (4 hours)\npossible\n\n\napp.APPLI_absolute_session\nMaximum session duration, in seconds\n36000 (10 hours)\npossible\n\n\nlogger.threshold\nError trigger threshold\n4\nnever\n\n\napp.APP_mail\napplication email\nmail@mysociety.com\nmandatory\n\n\napp.MAIL_enabled\nIf set to 1, sending emails is enabled\n1\npossible\n\n\napp.MAIL_param.from\nsame as APP_mail\nmail@mysociety.com\nmandatory\n\n\napp.MAIL_param.mailDebug\nIf set to 1, display the content of the email on the screen instead of sending it\n0\ndevelopment only\n\n\napp.checkRelease\nIf set to 1, queries the GIT server (Github or Gitlab) for the latest version available, and if the version is different from the one saved (app.version), displays a message on the screen. The specific parameters for querying are described in the App.php file\n0\npossible\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\nDescription\nDefault\nCan be changed in .env\n\n\n\n\ndatabase.default.hostname\nserver name or address\nlocalhost\nyes\n\n\ndatabase.default.database\ndatabase name\n\nyes\n\n\ndatabase.default.username\nlogin account name\n\nyes\n\n\ndatabase.default.password\nassociated password\n\nyes\n\n\ndatabase.default.DBDriver\ndriver name\nPostgre\nno\n\n\ndatabase.default.port\nconnection port\n5432\nyes\n\n\ndatabase.default.searchpath\ncomma-separated list of schemas used in the database\ne.g. col,gacl,public\nnormally no\n\n\ndatabase.default.charset\ncharacter set used in the database\nutf8\nnever\n\n\n\n\n\n\nSee the identification page."
  },
  {
    "objectID": "parameters.html#generic-parameters",
    "href": "parameters.html#generic-parameters",
    "title": "Application parameters",
    "section": "",
    "text": "Parameter (with the radical used in the .env file)\nDescription\nDefault value\nModifiable in .env\n\n\n\n\napp.baseURL\nInstance address\n\nmandatory\n\n\nBASE_DIR\nvariable used in .env, to indicate the path to the application\ne.g. “/var/www/collec2”\nmandatory\n\n\nFRONT_DIR\nvariable used in .env, to indicate the path to the public folder, the base of web pages\n${BASE_DIR}/public\nin principle, no\n\n\napp.defaultLocale\nDefault language in the instance\nfr\npossible\n\n\napp.supportedLocales\nLanguages ​​managed by the application\n[‘fr’,‘en’]\npossible, provided that other languages ​​are integrated into the framework\n\n\napp.version\nApplication version\n\nnever\n\n\napp.versionDate\nVersion creation date\n\nnever\n\n\napp.dbversion\nDatabase version. The version must also exist in the database dbversion table\n\nnever\n\n\ndatabaseSchemaFile\nPath where the png describing the database tables is placed\ne.g.: ROOTPATH ​​. “documentation/collec-schema.png”\nnever\n\n\napp.logDuration\nDuration, in days, to keep logs in the logs table\n365\npossible\n\n\napp.privateKey\nlocation of the private key used for encryption or decryption operations\ne.g., ${BASE_DIR}/id_collec\npossible\n\n\napp.pubKey\nlocation of the public key used for encryption or decryption operations\ne.g. ${BASE_DIR}/id_collec.pub\npossible\n\n\nsession.expiration\nSession duration, in seconds\n14400 (4 hours)\npossible\n\n\napp.APPLI_absolute_session\nMaximum session duration, in seconds\n36000 (10 hours)\npossible\n\n\nlogger.threshold\nError trigger threshold\n4\nnever\n\n\napp.APP_mail\napplication email\nmail@mysociety.com\nmandatory\n\n\napp.MAIL_enabled\nIf set to 1, sending emails is enabled\n1\npossible\n\n\napp.MAIL_param.from\nsame as APP_mail\nmail@mysociety.com\nmandatory\n\n\napp.MAIL_param.mailDebug\nIf set to 1, display the content of the email on the screen instead of sending it\n0\ndevelopment only\n\n\napp.checkRelease\nIf set to 1, queries the GIT server (Github or Gitlab) for the latest version available, and if the version is different from the one saved (app.version), displays a message on the screen. The specific parameters for querying are described in the App.php file\n0\npossible"
  },
  {
    "objectID": "parameters.html#database-connection-parameters",
    "href": "parameters.html#database-connection-parameters",
    "title": "Application parameters",
    "section": "",
    "text": "Parameter\nDescription\nDefault\nCan be changed in .env\n\n\n\n\ndatabase.default.hostname\nserver name or address\nlocalhost\nyes\n\n\ndatabase.default.database\ndatabase name\n\nyes\n\n\ndatabase.default.username\nlogin account name\n\nyes\n\n\ndatabase.default.password\nassociated password\n\nyes\n\n\ndatabase.default.DBDriver\ndriver name\nPostgre\nno\n\n\ndatabase.default.port\nconnection port\n5432\nyes\n\n\ndatabase.default.searchpath\ncomma-separated list of schemas used in the database\ne.g. col,gacl,public\nnormally no\n\n\ndatabase.default.charset\ncharacter set used in the database\nutf8\nnever"
  },
  {
    "objectID": "parameters.html#settings-related-to-user-identification",
    "href": "parameters.html#settings-related-to-user-identification",
    "title": "Application parameters",
    "section": "",
    "text": "See the identification page."
  },
  {
    "objectID": "command-line.html",
    "href": "command-line.html",
    "title": "Run on the command line",
    "section": "",
    "text": "In CodeIgniter, with the PPCI module, the .env file is loaded automatically, taking into account the contents of the $_SERVER[‘envPath’] variable, with this code:\nif (is_file($file = $_SERVER[\"envPath\"] . DIRECTORY_SEPARATOR . \".env\") && is_readable($file)) {\n    (new CodeIgniter\\Config\\DotEnv($_SERVER[\"envPath\"],\".env\"))-&gt;load();\nIn a script, to transfer the value of envPath to the variable $_SERVER and enable the .env file to be loaded, you need to add the line :\nexport envPath=\"/var/www/instances/instancename\"\nHere’s an example of how it can be used, simply to display the contents of the $_SERVER[‘envPath’] variable:\nPHP file:\n&lt;?php\necho $_SERVER[\"envPath\"].PHP_EOL;\nScript test.sh used to trigger it:\n#!/bin/bash\nexport envPath=/var/www/instances/instancename\ncd $envPath/public\nphp index.php myroute\nwhere myroute corresponds to the route to be called.\nDeclare the route in app/Config/Routes.php (don’t forget the corresponding controller), then run the script:\n./test.sh\n/var/www/instances/instancename"
  },
  {
    "objectID": "command-line.html#transfer-the-name-of-the-.env-file-to-be-used",
    "href": "command-line.html#transfer-the-name-of-the-.env-file-to-be-used",
    "title": "Run on the command line",
    "section": "",
    "text": "In CodeIgniter, with the PPCI module, the .env file is loaded automatically, taking into account the contents of the $_SERVER[‘envPath’] variable, with this code:\nif (is_file($file = $_SERVER[\"envPath\"] . DIRECTORY_SEPARATOR . \".env\") && is_readable($file)) {\n    (new CodeIgniter\\Config\\DotEnv($_SERVER[\"envPath\"],\".env\"))-&gt;load();\nIn a script, to transfer the value of envPath to the variable $_SERVER and enable the .env file to be loaded, you need to add the line :\nexport envPath=\"/var/www/instances/instancename\"\nHere’s an example of how it can be used, simply to display the contents of the $_SERVER[‘envPath’] variable:\nPHP file:\n&lt;?php\necho $_SERVER[\"envPath\"].PHP_EOL;\nScript test.sh used to trigger it:\n#!/bin/bash\nexport envPath=/var/www/instances/instancename\ncd $envPath/public\nphp index.php myroute\nwhere myroute corresponds to the route to be called.\nDeclare the route in app/Config/Routes.php (don’t forget the corresponding controller), then run the script:\n./test.sh\n/var/www/instances/instancename"
  },
  {
    "objectID": "locale.html",
    "href": "locale.html",
    "title": "Language support",
    "section": "",
    "text": "Currently, the engine only supports French (default language) and English.\nTranslations are made with gettext. They are stored in app/Language/locales, with:\n\nat the root:\nlang.po: raw file containing the translations\ngenerate_po.sh: script retrieving the labels to be translated in the php files, Smarty templates and in the menu (xml file) and creating the lang.po file\ncompile.sh: script creating the lang.mo file (compiled) from the translations present in lang.po, and copying this file into the following subfolder\nen/LC_MESSAGES: folder corresponding to the language to be displayed, which contains the lang.mo file.\n\n\n\nThe server must be configured to support the language to be displayed. To do this:\n\nedit the file /etc/locale.gen\nuncomment the line en_GB.UTF-8\nrun these commands:\n\nlocale-gen\nsystemctl restart apache2\nThis operation only needs to be done once.\nTo create the translations:\n\nrun the script generate_po.sh to create the file lang.po. The old translations are kept.\nedit the file lang.po with the program poedit\ncompile the file with the script compile.sh. The script will generate the file lang.mo, then copy it into the folder en/LC_MESSAGES"
  },
  {
    "objectID": "locale.html#set-up-translations",
    "href": "locale.html#set-up-translations",
    "title": "Language support",
    "section": "",
    "text": "The server must be configured to support the language to be displayed. To do this:\n\nedit the file /etc/locale.gen\nuncomment the line en_GB.UTF-8\nrun these commands:\n\nlocale-gen\nsystemctl restart apache2\nThis operation only needs to be done once.\nTo create the translations:\n\nrun the script generate_po.sh to create the file lang.po. The old translations are kept.\nedit the file lang.po with the program poedit\ncompile the file with the script compile.sh. The script will generate the file lang.mo, then copy it into the folder en/LC_MESSAGES"
  },
  {
    "objectID": "model.html",
    "href": "model.html",
    "title": "Managing access to data stored in the database",
    "section": "",
    "text": "The classes that allow dialog with the database are stored in app/Models. They all inherit from the PpciModel class, which encapsulates all access and update functions.\nPpciModel relies as much as possible on the intrinsic mechanisms of CodeIgniter. However, some writing functions have been rewritten to better control the operations performed in the database.\n\n\nWhen initializing a table access class, several parameters must be provided:\n\nthe name of the table\nthe list of columns with, for each, whether it must be provided (mandatory), its type, whether it is the primary key of the table, the default value in case of creation of a new record, and whether the attribute is a foreign key to the parent of the current record\nwhether the primary key is generated automatically or not by the database.\n\nExample:\nnamespace App\\Models;\n\nuse Ppci\\Models\\PpciModel;\n\nclass Peche extends PpciModel\n{\n    public array $warning = array();\n\n    public function __construct()\n    {\n        $this-&gt;table = \"peche\";\n        $this-&gt;fields = array(\n            \"peche_id\" =&gt; array(\n                \"type\" =&gt; 1,\n                \"key\" =&gt; 1,\n                \"requis\" =&gt; 1,\n                \"defaultValue\" =&gt; 0\n            ),\n            \"trait_id\" =&gt; array(\n                \"type\" =&gt; 1,\n                \"requis\" =&gt; 1,\n                \"parentAttrib\" =&gt; 1\n            ),\n            \"uuid\" =&gt; array(\n                \"type\" =&gt; 0,\n                \"defaultValue\" =&gt; $this-&gt;getUUID()\n            ),\n        );\n        parent::__construct();\n    }\n}\n\n\n\n\n\n\n\n\n\nAttribute\nValue\n\n\n\n\ntype\n0: string 1: numeric 2: date 3: date-time 4: geographic field (Postgis)\n\n\nkey\nIf 1, it is the primary key of the table\n\n\nrequired\nIf 1, the record will fail if the column is not provided or is empty\n\n\nparentAttrib\nIf 1, the column is the foreign key, in the case of a parent-child relationship\n\n\ndefaultValue\nThe default value, when creating a record.\n\n\n\nBy convention, for any new record, the primary key takes the value 0.\n\n\n\nDates are automatically transformed into the current format of the language used, both for selections and updates. When initializing the class, the $this-&gt;dateFields and $this-&gt;datetimeFields tables are populated from the declared information. It is possible to complete them punctually before executing a select so that date fields external to the table, as part of joins, are also formatted.\nIf it is necessary to disable date formatting, simply indicate:\n$this-&gt;autoformatDate = false;\n\n\n\nBy default, before an update, numbers are processed to replace the comma with a period. If this mechanism must be disabled, simply indicate:\n$this-&gt;transformComma = false;\n\n\n\nThe class natively integrates the Message class, which allows you to send information to the browser or log error messages in the server logs (syslog). It is accessible via $this-&gt;message-&gt;set(...);\nExecution errors trigger a PpciException exception.\n\n\n\n\n\n\nprotected function executeQuery(string $sql, array $data = null, $onlyExecute = false)\nSynonym: public function executeSQL(string $sql, array $data = null, $onlyExecute = false)\nExecutes the $sql query, with the \\(data variable array. If `\\)onlyExecute` is false, the function returns a result array. Modification requests must have this last variable set to true.\n\n\n\n\n\n\nSynonym: public function ecrire(array $row): int\nSaves a row ($row) in the database. The function automatically handles the insertion or update.\nFor geographic fields, these are saved with the ST_GeomFromText function.\nReturn: the primary key of the processed record.\n\n\n\nfunction writeTableNN(string $tablename, string $firstKey, string $secondKey, int $id, $data = array()): void\nSynonym: function ecrireTableNN(string $tablename, string $firstKey, string $secondKey, int $id, $data = array()): void\nThis function handles the case of recording in the case of an n-n table, i.e. linked to two parents. It is typically used to process multiple values ​​(selection of members in a group, for example).\nIt will record in $tablename, for the key corresponding to the main parent ($firstKey), all the values ​​corresponding to the linked table ($secondKey), provided in the form of an array ($data). The function will automatically delete all pre-existing values ​​that are not in the provided array.\n\n\n\nfunction updateBinary(int $id, string $fieldName, $data)\nThe function will write a binary content in the column $fieldName for the record identified by the primary key $id. In practice, it uses the php function pg_escape_bytea.\n\n\n\nfunction delete($id = null, bool $purge = false)\nSynonym: function delete($id)\nDeletes the record $id. The value $purge is useless, it is kept for compatibility reasons with CodeIgniter classes.\n\n\n\nfunction deleteFromField(int $id, string $field)\nSynonym: function deleteField(int $id, string $field)\nThis function is used to delete child records from a parent. It deletes all records whose field $field contains the value $id.\n\n\n\npublic function read(int $id, bool $getDefault = true, $parentKey = 0): array\nSynonym: public function lire(int $id, bool $getDefault = true, $parentKey = 0): array\nRead the record whose primary key is $id. If $id is 0 or empty (new record), and $getDefault is set to true, the returned array will contain the default values ​​defined in the class constructor. If $parentKey is set, the parent’s foreign key is also set in the default values.\n\n\n\npublic function getDefaultValues($parentKey = 0): array\nCreates an array containing all the default values, for a new record.\n\n\n\npublic function readParam(string $sql, array $param = null)\nSynonyms:\npublic function readParamAsPrepared(string $sql, array $param = null)\npublic function lireParam(string $sql, array $param = null)\npublic function lireParamAsPrepared(string $sql, array $param = null)\nReturns a record matching the provided SQL code (the first record encountered if a list is returned by the query). Variables used in the query must be provided in the $param array.\n\n\n\npublic function getList(string $order = \"\"): array\nSynonym: function getListe(string $order = \"\"): array\nExecutes a select * on the table, adding the term order by $order if the variable is specified.\n\n\n\nfunction getListParam(string $sql, array $param = null): array\nSynonyms:\nfunction getListeParam(string $sql, array $param = null): array\nfunction getListeParamAsPrepared(string $sql, array $param = null): array\nReturns the result of the query. The variables used for it are provided in the $param array.\n\n\n\nfunction getListFromParent(int $parentId, $order = \"\"): array\nReturns the list of child records whose foreign key is $parentId, sorted or not.\n\n\n\n\n\n\nprotected function formatDatesToDB(array $row): array\nTransforms dates contained in the record, based on the type (date, date/time) and the current format.\n\n\n\nfunction getUUID(): string\nExecutes a function in the database to generate a UUID.\n\n\n\nfunction getDateTime(): string\nfunction getDateHeure(): string\n\n\n\nfunction getDate(): string\nfunction getDateJour(): string\n\n\n\nfunction disableMandatoryField(string $name)\nDisables the mandatory field value for a field. This function can be used to update a record for which it is known in advance that the value is not provided.\n\n\n\n\nDeclaring the database in the file `app/Config/Database.php’ :\n    public array $cinna = [\n        'DSN'          =&gt; '',\n        'hostname'     =&gt; 'localhost',\n        'username'     =&gt; '',\n        'password'     =&gt; '',\n        'database'     =&gt; 'estuaire_phy',\n        'DBDriver'     =&gt; 'Postgre',\n        'DBPrefix'     =&gt; '',\n        'pConnect'     =&gt; false,\n        'DBDebug'      =&gt; true,\n        'charset'      =&gt; 'utf8',\n        'DBCollat'     =&gt; 'utf8_general_ci',\n        'swapPre'      =&gt; '',\n        'encrypt'      =&gt; false,\n        'compress'     =&gt; false,\n        'strictOn'     =&gt; false,\n        'failover'     =&gt; [],\n        'port'         =&gt; 5432,\n        'numberNative' =&gt; false,\n        \"searchpath\"   =&gt; \"cinna,public\",\n    ];\nAdapt the connection parameters in the .env file at the root of the application.\nTo trigger the database connection, for example from a library :\n/**\n* @var \\CodeIgniter\\Database\\BaseConnection\n*/\n$db = \\Config\\Database::connect(\"cinna\", true);\nif ($db) {\n    $db-&gt;query(\"set search_path = \" . $_ENV[\"database.cinna.searchpath\"]);\n} else {\n    $this-&gt;message-&gt;set(_(\"Unable to connect to the database used to record Cinna data\"), true);\n    defaultPage();\n}\nTo attach a model to this connection, you need to declare the variable $DBGroup and assign the name of the connection to it:\nclass Cinna extends PpciModel\n{\n    protected $DBGroup = 'cinna';\n\n    function __construct()\n    {\n        $this-&gt;table = \"cinna\";\n    (...)\nCodeIgniter will then manage the connection correctly."
  },
  {
    "objectID": "model.html#initialize-a-class",
    "href": "model.html#initialize-a-class",
    "title": "Managing access to data stored in the database",
    "section": "",
    "text": "When initializing a table access class, several parameters must be provided:\n\nthe name of the table\nthe list of columns with, for each, whether it must be provided (mandatory), its type, whether it is the primary key of the table, the default value in case of creation of a new record, and whether the attribute is a foreign key to the parent of the current record\nwhether the primary key is generated automatically or not by the database.\n\nExample:\nnamespace App\\Models;\n\nuse Ppci\\Models\\PpciModel;\n\nclass Peche extends PpciModel\n{\n    public array $warning = array();\n\n    public function __construct()\n    {\n        $this-&gt;table = \"peche\";\n        $this-&gt;fields = array(\n            \"peche_id\" =&gt; array(\n                \"type\" =&gt; 1,\n                \"key\" =&gt; 1,\n                \"requis\" =&gt; 1,\n                \"defaultValue\" =&gt; 0\n            ),\n            \"trait_id\" =&gt; array(\n                \"type\" =&gt; 1,\n                \"requis\" =&gt; 1,\n                \"parentAttrib\" =&gt; 1\n            ),\n            \"uuid\" =&gt; array(\n                \"type\" =&gt; 0,\n                \"defaultValue\" =&gt; $this-&gt;getUUID()\n            ),\n        );\n        parent::__construct();\n    }\n}\n\n\n\n\n\n\n\n\n\nAttribute\nValue\n\n\n\n\ntype\n0: string 1: numeric 2: date 3: date-time 4: geographic field (Postgis)\n\n\nkey\nIf 1, it is the primary key of the table\n\n\nrequired\nIf 1, the record will fail if the column is not provided or is empty\n\n\nparentAttrib\nIf 1, the column is the foreign key, in the case of a parent-child relationship\n\n\ndefaultValue\nThe default value, when creating a record.\n\n\n\nBy convention, for any new record, the primary key takes the value 0.\n\n\n\nDates are automatically transformed into the current format of the language used, both for selections and updates. When initializing the class, the $this-&gt;dateFields and $this-&gt;datetimeFields tables are populated from the declared information. It is possible to complete them punctually before executing a select so that date fields external to the table, as part of joins, are also formatted.\nIf it is necessary to disable date formatting, simply indicate:\n$this-&gt;autoformatDate = false;\n\n\n\nBy default, before an update, numbers are processed to replace the comma with a period. If this mechanism must be disabled, simply indicate:\n$this-&gt;transformComma = false;\n\n\n\nThe class natively integrates the Message class, which allows you to send information to the browser or log error messages in the server logs (syslog). It is accessible via $this-&gt;message-&gt;set(...);\nExecution errors trigger a PpciException exception."
  },
  {
    "objectID": "model.html#generic-functions-available",
    "href": "model.html#generic-functions-available",
    "title": "Managing access to data stored in the database",
    "section": "",
    "text": "protected function executeQuery(string $sql, array $data = null, $onlyExecute = false)\nSynonym: public function executeSQL(string $sql, array $data = null, $onlyExecute = false)\nExecutes the $sql query, with the \\(data variable array. If `\\)onlyExecute` is false, the function returns a result array. Modification requests must have this last variable set to true.\n\n\n\n\n\n\nSynonym: public function ecrire(array $row): int\nSaves a row ($row) in the database. The function automatically handles the insertion or update.\nFor geographic fields, these are saved with the ST_GeomFromText function.\nReturn: the primary key of the processed record.\n\n\n\nfunction writeTableNN(string $tablename, string $firstKey, string $secondKey, int $id, $data = array()): void\nSynonym: function ecrireTableNN(string $tablename, string $firstKey, string $secondKey, int $id, $data = array()): void\nThis function handles the case of recording in the case of an n-n table, i.e. linked to two parents. It is typically used to process multiple values ​​(selection of members in a group, for example).\nIt will record in $tablename, for the key corresponding to the main parent ($firstKey), all the values ​​corresponding to the linked table ($secondKey), provided in the form of an array ($data). The function will automatically delete all pre-existing values ​​that are not in the provided array.\n\n\n\nfunction updateBinary(int $id, string $fieldName, $data)\nThe function will write a binary content in the column $fieldName for the record identified by the primary key $id. In practice, it uses the php function pg_escape_bytea.\n\n\n\nfunction delete($id = null, bool $purge = false)\nSynonym: function delete($id)\nDeletes the record $id. The value $purge is useless, it is kept for compatibility reasons with CodeIgniter classes.\n\n\n\nfunction deleteFromField(int $id, string $field)\nSynonym: function deleteField(int $id, string $field)\nThis function is used to delete child records from a parent. It deletes all records whose field $field contains the value $id.\n\n\n\npublic function read(int $id, bool $getDefault = true, $parentKey = 0): array\nSynonym: public function lire(int $id, bool $getDefault = true, $parentKey = 0): array\nRead the record whose primary key is $id. If $id is 0 or empty (new record), and $getDefault is set to true, the returned array will contain the default values ​​defined in the class constructor. If $parentKey is set, the parent’s foreign key is also set in the default values.\n\n\n\npublic function getDefaultValues($parentKey = 0): array\nCreates an array containing all the default values, for a new record.\n\n\n\npublic function readParam(string $sql, array $param = null)\nSynonyms:\npublic function readParamAsPrepared(string $sql, array $param = null)\npublic function lireParam(string $sql, array $param = null)\npublic function lireParamAsPrepared(string $sql, array $param = null)\nReturns a record matching the provided SQL code (the first record encountered if a list is returned by the query). Variables used in the query must be provided in the $param array.\n\n\n\npublic function getList(string $order = \"\"): array\nSynonym: function getListe(string $order = \"\"): array\nExecutes a select * on the table, adding the term order by $order if the variable is specified.\n\n\n\nfunction getListParam(string $sql, array $param = null): array\nSynonyms:\nfunction getListeParam(string $sql, array $param = null): array\nfunction getListeParamAsPrepared(string $sql, array $param = null): array\nReturns the result of the query. The variables used for it are provided in the $param array.\n\n\n\nfunction getListFromParent(int $parentId, $order = \"\"): array\nReturns the list of child records whose foreign key is $parentId, sorted or not."
  },
  {
    "objectID": "model.html#miscellaneous-functions",
    "href": "model.html#miscellaneous-functions",
    "title": "Managing access to data stored in the database",
    "section": "",
    "text": "protected function formatDatesToDB(array $row): array\nTransforms dates contained in the record, based on the type (date, date/time) and the current format.\n\n\n\nfunction getUUID(): string\nExecutes a function in the database to generate a UUID.\n\n\n\nfunction getDateTime(): string\nfunction getDateHeure(): string\n\n\n\nfunction getDate(): string\nfunction getDateJour(): string\n\n\n\nfunction disableMandatoryField(string $name)\nDisables the mandatory field value for a field. This function can be used to update a record for which it is known in advance that the value is not provided."
  },
  {
    "objectID": "model.html#managing-the-connection-to-another-database",
    "href": "model.html#managing-the-connection-to-another-database",
    "title": "Managing access to data stored in the database",
    "section": "",
    "text": "Declaring the database in the file `app/Config/Database.php’ :\n    public array $cinna = [\n        'DSN'          =&gt; '',\n        'hostname'     =&gt; 'localhost',\n        'username'     =&gt; '',\n        'password'     =&gt; '',\n        'database'     =&gt; 'estuaire_phy',\n        'DBDriver'     =&gt; 'Postgre',\n        'DBPrefix'     =&gt; '',\n        'pConnect'     =&gt; false,\n        'DBDebug'      =&gt; true,\n        'charset'      =&gt; 'utf8',\n        'DBCollat'     =&gt; 'utf8_general_ci',\n        'swapPre'      =&gt; '',\n        'encrypt'      =&gt; false,\n        'compress'     =&gt; false,\n        'strictOn'     =&gt; false,\n        'failover'     =&gt; [],\n        'port'         =&gt; 5432,\n        'numberNative' =&gt; false,\n        \"searchpath\"   =&gt; \"cinna,public\",\n    ];\nAdapt the connection parameters in the .env file at the root of the application.\nTo trigger the database connection, for example from a library :\n/**\n* @var \\CodeIgniter\\Database\\BaseConnection\n*/\n$db = \\Config\\Database::connect(\"cinna\", true);\nif ($db) {\n    $db-&gt;query(\"set search_path = \" . $_ENV[\"database.cinna.searchpath\"]);\n} else {\n    $this-&gt;message-&gt;set(_(\"Unable to connect to the database used to record Cinna data\"), true);\n    defaultPage();\n}\nTo attach a model to this connection, you need to declare the variable $DBGroup and assign the name of the connection to it:\nclass Cinna extends PpciModel\n{\n    protected $DBGroup = 'cinna';\n\n    function __construct()\n    {\n        $this-&gt;table = \"cinna\";\n    (...)\nCodeIgniter will then manage the connection correctly."
  },
  {
    "objectID": "rights.html",
    "href": "rights.html",
    "title": "Access rights to modules",
    "section": "",
    "text": "The rights are declared in the file app/Config/Rights.php. The rights of the modules managed directly in Ppci are declared in vendor/equinton/ppci/src/Config/Rights.php.\nFor any module (route) that needs to be protected, an entry must be added to the rights array, like this:\nprotected array $rights = [\n\"storageConditionList\" =&gt; [\"consult\"],\n\"storageConditionChange\" =&gt; [\"param\", \"collection\"],\n\"storageConditionWrite\" =&gt; [\"param\", \"collection\"],\n\"storageConditionDelete\" =&gt; [\"param\", \"collection\"],\nThe default rights managed by Ppci are as follows:\n\nadmin: access to administration modules\nconsult: consultation of information\nmanage: daily management\nparam: access to software parameters (role of the business administrator)\n\nOther rights can be added to the application, as is the case in the example above with the collection right. They are described with the acl* tables of the gacl schema.\nWhen accessing a protected module, the user’s rights are calculated by the RightsFilter filter (cf. principes.html), and access is only granted if the user has one of the rights declared in the rights table.\n\n\nRights are managed in tables present in the gacl schema.\n\nacllogin: list of user logins. If an account is created in the local identification database (logingestion table), a record is also created in this table.\naclappli: list of managed applications. It is possible to manage, from the same database, several sets of rights, which use the same logins. In practice, only one entry appears in this table. The value of aclappli must be identical to the configuration variable app.GACL_aco.\naclaco: list of rights declared in the application;\naclgroup: list of groups containing the logins, and which hold the rights. A group can inherit from another group. The rights associated with the parent group are also assigned to the inherited group;\nacllogingroup: table used to declare the logins associated with a group;\naclacl: table describing the rights held by a group.\n\nIn some cases (LDAP or CAS identification), and if automatic group recognition is enabled in the configuration, it is not necessary to declare the logins in the acllogin table. It is membership in a directory group, declared elsewhere in the aclgroup table, which will allow the rights to be assigned.\nThe rights allocation algorithm will work as follows:\n\nsearch for the groups to which the login belongs, either formally (declaration in the acllogingroup table), or inferentially (directory group declared in the aclgroup table), or by retrieving the groups inherited by the current group where the login is declared\nfor each of the membership groups, search in the aclacl table for the rights assigned to the groups."
  },
  {
    "objectID": "rights.html#organization-of-rights-in-the-database",
    "href": "rights.html#organization-of-rights-in-the-database",
    "title": "Access rights to modules",
    "section": "",
    "text": "Rights are managed in tables present in the gacl schema.\n\nacllogin: list of user logins. If an account is created in the local identification database (logingestion table), a record is also created in this table.\naclappli: list of managed applications. It is possible to manage, from the same database, several sets of rights, which use the same logins. In practice, only one entry appears in this table. The value of aclappli must be identical to the configuration variable app.GACL_aco.\naclaco: list of rights declared in the application;\naclgroup: list of groups containing the logins, and which hold the rights. A group can inherit from another group. The rights associated with the parent group are also assigned to the inherited group;\nacllogingroup: table used to declare the logins associated with a group;\naclacl: table describing the rights held by a group.\n\nIn some cases (LDAP or CAS identification), and if automatic group recognition is enabled in the configuration, it is not necessary to declare the logins in the acllogin table. It is membership in a directory group, declared elsewhere in the aclgroup table, which will allow the rights to be assigned.\nThe rights allocation algorithm will work as follows:\n\nsearch for the groups to which the login belongs, either formally (declaration in the acllogingroup table), or inferentially (directory group declared in the aclgroup table), or by retrieving the groups inherited by the current group where the login is declared\nfor each of the membership groups, search in the aclacl table for the rights assigned to the groups."
  },
  {
    "objectID": "multi-instance.html",
    "href": "multi-instance.html",
    "title": "Multi-instance management",
    "section": "",
    "text": "Create an instance folder in the server tree, for example /var/www/app/instancename, then create the files needed to keep the instances separate:\n# Folder containing the application code\nAPP=/var/www/app\n# Folder containing the specific parameters of the instance\nFOLDER=\"/var/www/instances/instancename\"\nmkdir -P $FOLDER\nchmod g+r $FOLDER\ncd $FOLDER\nmkdir temp\n# New cryptographic keys\nopenssl genpkey -algorithm rsa -out id_app -pkeyopt rsa_keygen_bits:2048\nopenssl rsa -in id_app -pubout -out id_app.pub\n# Copy the configuration file\ncp $APP/env .env\n# Upgrade rights\nchmod -R g+r .\nchmod g+w temp\nchown www-data id_app\nthe temp folder is the folder in which the application will generate all the files before sending them to the browser. To avoid the risk of collision between two instances, it is strongly recommended that each has its own space.\n\n\n\nIn the virtual site description (myinstance.conf file, in /etc/apache2/sites-available), add :\n&lt;VirtualHost *:443&gt;\n(...)\nDocumentRoot /var/www/app\nsetenv envPath /var/www/instances/instancename\n(...) \n\n\n\nEdit the /var/www/instances/instancename/.env file:\napp.baseURL = ‘https://myinstance.mysociety.com’\nBASE_DIR = ‘/var/www/instances/instancename\napp.privateKey = ${BASE_DIR}/id_app\napp.pubKey = ${BASE_DIR}/id_app.pub\napp.APP_temp = ${BASE_DIR}/temp\ndatabase.default.hostname = localhost\ndatabase.default.database = dbname_instance\ndatabase.default.username = login_instance\ndatabase.default.password = password_instance\nAlso check the default login mode, and adapt it if necessary.\n\n\n\nIf you use scripts that are run from the command line, for example scripts that are scheduled to run at regular times (crontab), you will need to modify the script loader:\n#!/bin/bash\nexport envPath=/var/www/instances/instancename\ncd $envPath/public\nphp index.php myscript\nwhere myscript is the route to call.\nThe envPath variable is available in $_SERVER.\n\n\n\nThe end of the index.php file is modified as follows:\n//exit(CodeIgniter\\Boot::bootWeb($paths));\nrequire FCPATH. '../vendor/equinton/ppci/src/BootApp.php';\nexit (CodeIgniter\\BootApp::bootweb($paths));\nAnd the BootApp class contains this code:\n&lt;?php\n\nnamespace CodeIgniter;\n\nuse CodeIgniter\\Boot;\nuse Config\\Paths;\nuse CodeIgniter\\Config\\DotEnv;\n\nclass BootApp extends Boot {\n\n    protected static function loadDotEnv(Paths $paths): void\n    {\n        require_once $paths-&gt;systemDirectory . '/Config/DotEnv.php';\n        if (is_file($file = $_SERVER[\"envPath\"] . DIRECTORY_SEPARATOR . \".env\") && is_readable($file)) {\n            (new DotEnv($_SERVER[\"envPath\"],\".env\"))-&gt;load();\n        } else {\n            (new DotEnv($paths-&gt;appDirectory . '/../'))-&gt;load();\n        }\n    }\n}\nWarning: the use of an .env file placed elsewhere than at the root of the application prevents CodeIgniter’s debugging tools from working (development mode)."
  },
  {
    "objectID": "multi-instance.html#create-the-dedicated-instance-folder",
    "href": "multi-instance.html#create-the-dedicated-instance-folder",
    "title": "Multi-instance management",
    "section": "",
    "text": "Create an instance folder in the server tree, for example /var/www/app/instancename, then create the files needed to keep the instances separate:\n# Folder containing the application code\nAPP=/var/www/app\n# Folder containing the specific parameters of the instance\nFOLDER=\"/var/www/instances/instancename\"\nmkdir -P $FOLDER\nchmod g+r $FOLDER\ncd $FOLDER\nmkdir temp\n# New cryptographic keys\nopenssl genpkey -algorithm rsa -out id_app -pkeyopt rsa_keygen_bits:2048\nopenssl rsa -in id_app -pubout -out id_app.pub\n# Copy the configuration file\ncp $APP/env .env\n# Upgrade rights\nchmod -R g+r .\nchmod g+w temp\nchown www-data id_app\nthe temp folder is the folder in which the application will generate all the files before sending them to the browser. To avoid the risk of collision between two instances, it is strongly recommended that each has its own space."
  },
  {
    "objectID": "multi-instance.html#upgrading-the-apache-virtual-site",
    "href": "multi-instance.html#upgrading-the-apache-virtual-site",
    "title": "Multi-instance management",
    "section": "",
    "text": "In the virtual site description (myinstance.conf file, in /etc/apache2/sites-available), add :\n&lt;VirtualHost *:443&gt;\n(...)\nDocumentRoot /var/www/app\nsetenv envPath /var/www/instances/instancename\n(...)"
  },
  {
    "objectID": "multi-instance.html#modifying-the-parameters",
    "href": "multi-instance.html#modifying-the-parameters",
    "title": "Multi-instance management",
    "section": "",
    "text": "Edit the /var/www/instances/instancename/.env file:\napp.baseURL = ‘https://myinstance.mysociety.com’\nBASE_DIR = ‘/var/www/instances/instancename\napp.privateKey = ${BASE_DIR}/id_app\napp.pubKey = ${BASE_DIR}/id_app.pub\napp.APP_temp = ${BASE_DIR}/temp\ndatabase.default.hostname = localhost\ndatabase.default.database = dbname_instance\ndatabase.default.username = login_instance\ndatabase.default.password = password_instance\nAlso check the default login mode, and adapt it if necessary."
  },
  {
    "objectID": "multi-instance.html#adapt-scripts-run-on-the-command-line",
    "href": "multi-instance.html#adapt-scripts-run-on-the-command-line",
    "title": "Multi-instance management",
    "section": "",
    "text": "If you use scripts that are run from the command line, for example scripts that are scheduled to run at regular times (crontab), you will need to modify the script loader:\n#!/bin/bash\nexport envPath=/var/www/instances/instancename\ncd $envPath/public\nphp index.php myscript\nwhere myscript is the route to call.\nThe envPath variable is available in $_SERVER."
  },
  {
    "objectID": "multi-instance.html#technical-changes-made-to-the-code-to-manage-multi-instances",
    "href": "multi-instance.html#technical-changes-made-to-the-code-to-manage-multi-instances",
    "title": "Multi-instance management",
    "section": "",
    "text": "The end of the index.php file is modified as follows:\n//exit(CodeIgniter\\Boot::bootWeb($paths));\nrequire FCPATH. '../vendor/equinton/ppci/src/BootApp.php';\nexit (CodeIgniter\\BootApp::bootweb($paths));\nAnd the BootApp class contains this code:\n&lt;?php\n\nnamespace CodeIgniter;\n\nuse CodeIgniter\\Boot;\nuse Config\\Paths;\nuse CodeIgniter\\Config\\DotEnv;\n\nclass BootApp extends Boot {\n\n    protected static function loadDotEnv(Paths $paths): void\n    {\n        require_once $paths-&gt;systemDirectory . '/Config/DotEnv.php';\n        if (is_file($file = $_SERVER[\"envPath\"] . DIRECTORY_SEPARATOR . \".env\") && is_readable($file)) {\n            (new DotEnv($_SERVER[\"envPath\"],\".env\"))-&gt;load();\n        } else {\n            (new DotEnv($paths-&gt;appDirectory . '/../'))-&gt;load();\n        }\n    }\n}\nWarning: the use of an .env file placed elsewhere than at the root of the application prevents CodeIgniter’s debugging tools from working (development mode)."
  },
  {
    "objectID": "functions.html",
    "href": "functions.html",
    "title": "Functions and services",
    "section": "",
    "text": "Services allow the same instance of a class to be maintained throughout the execution of the script. They are described in Ppci\\Config\\Services.\n$monService = service ('name');\nThe first time the code is called, the class is instantiated. Then, the class instance is provided, which means that the same parameters can be used.\nThree types of service are configured: generic services, services providing configuration parameters, and views.\n\n\n\n\nCode used systematically when a page is called.\n\n\n\nClass used to store messages and then retrieve them. Two functions can be used to store them:\n\nfunction set(string $value, bool $is_error = false): stores a message. If it is an error, the message will then be displayed in red.\nfunction setSyslog($message, $is_error = false): stores a message in the system logs. In development mode, the message is also displayed on the screen\n\n\n\n\nClass used to record information in the gacl.log table. An entry can be created with the function $col-&gt;setLog($login, $module, $comment = null). The login value can be retrieved from $_SESSION[‘login’]. $module represents the name of the function or call to be logged, and $comment a particular content to be noted.\n\n\n\nClass used to set the language to be used. The labels can be modified using the setLocale($locale) function. By default, only ‘fr’ and ‘en’ are currently supported.\n\n\n\n\n\n\nClass containing all the parameters stored in the dbparam table. Parameters can be accessed using the $dbparam-&gt;params[‘parameter_name’] attribute.\nParameters are also available in the $_SESSION[‘dbparams’] variable.\n\n\n\nContains the general settings for the application (App\\Config\\App).\n\n\n\nContains identification-related settings (Ppci\\ConfigIdentificationConfig).\n\n\n\n\nThe description of the views can be consulted here.\n\n\n\n\nFunctions are loaded automatically from ppci/Helpers/ppci_helper.php.\n\ndefaultPage(): displays the application’s home page (without redirection)\ngetLineFeed(): returns the linefeed code depending on the context: web server or command line\nhtmlDecode($content): recursive function for decoding html characters (htmlspecialchars_decode())\nprintA($variable): displays the contents of a variable. For arrays, displays the contents of the array. Used for debugging\nsetlogRequest($request): writes the requested request to the gacl.log table.\ntest($var = ‘’): displays the word ‘test’ and the number of the occurrence where the function was called. If $var is filled in, displays its contents"
  },
  {
    "objectID": "functions.html#services-1",
    "href": "functions.html#services-1",
    "title": "Functions and services",
    "section": "",
    "text": "Services allow the same instance of a class to be maintained throughout the execution of the script. They are described in Ppci\\Config\\Services.\n$monService = service ('name');\nThe first time the code is called, the class is instantiated. Then, the class instance is provided, which means that the same parameters can be used.\nThree types of service are configured: generic services, services providing configuration parameters, and views.\n\n\n\n\nCode used systematically when a page is called.\n\n\n\nClass used to store messages and then retrieve them. Two functions can be used to store them:\n\nfunction set(string $value, bool $is_error = false): stores a message. If it is an error, the message will then be displayed in red.\nfunction setSyslog($message, $is_error = false): stores a message in the system logs. In development mode, the message is also displayed on the screen\n\n\n\n\nClass used to record information in the gacl.log table. An entry can be created with the function $col-&gt;setLog($login, $module, $comment = null). The login value can be retrieved from $_SESSION[‘login’]. $module represents the name of the function or call to be logged, and $comment a particular content to be noted.\n\n\n\nClass used to set the language to be used. The labels can be modified using the setLocale($locale) function. By default, only ‘fr’ and ‘en’ are currently supported.\n\n\n\n\n\n\nClass containing all the parameters stored in the dbparam table. Parameters can be accessed using the $dbparam-&gt;params[‘parameter_name’] attribute.\nParameters are also available in the $_SESSION[‘dbparams’] variable.\n\n\n\nContains the general settings for the application (App\\Config\\App).\n\n\n\nContains identification-related settings (Ppci\\ConfigIdentificationConfig).\n\n\n\n\nThe description of the views can be consulted here."
  },
  {
    "objectID": "functions.html#functions",
    "href": "functions.html#functions",
    "title": "Functions and services",
    "section": "",
    "text": "Functions are loaded automatically from ppci/Helpers/ppci_helper.php.\n\ndefaultPage(): displays the application’s home page (without redirection)\ngetLineFeed(): returns the linefeed code depending on the context: web server or command line\nhtmlDecode($content): recursive function for decoding html characters (htmlspecialchars_decode())\nprintA($variable): displays the contents of a variable. For arrays, displays the contents of the array. Used for debugging\nsetlogRequest($request): writes the requested request to the gacl.log table.\ntest($var = ‘’): displays the word ‘test’ and the number of the occurrence where the function was called. If $var is filled in, displays its contents"
  },
  {
    "objectID": "views.html",
    "href": "views.html",
    "title": "Views",
    "section": "",
    "text": "Views\nSending information to the browser uses views, each dedicated to a type of information (web pages, pdf files, Ajax requests, binary files, etc.). They are available as services (described in ppci/Config/Services.php), and are physically stored in Ppci/Libraries/Views.\nAll views inherit from the Ppci\\Libraries\\Views\\DefaultView class, which includes the following generic functions:\n\nfunction set($value, $variable = \"\"): assigns a content (named or not, if variable is specified) to the view\nfunction get($variable = \"\"): retrieves the content of a variable or the assigned content\nfunction encodehtml($data): recursive function for encoding variables in HTML\nfunction send($param = \"\"): triggers the sending of information. This function is systematically rewritten in each view.\n\n\nDisplaying pages\n$view = service (\"Smarty\");\nWeb pages are generated with the Smarty templates engine. The templates are stored:\n\non the one hand in Ppci/Views/templates/ppci, which includes all the pages managed by Ppci, as well as the default page (main.html)\non the other hand in App/Views/templates, for the application’s specific pages.\n\nWhen the display is triggered, the class will:\n\nencode the variables in HTML, except those referenced in the $view-&gt;htmlVars table\ngenerate the CSRF token\ndisplay the messages stored in the Message class\ngenerate the application menu\nadd various generic contents, such as the application title.\n\n\n\nSending a binary file to the browser\n$view = service (\"BinaryView\");\nThe class allows you to send the file either “inline” or as an “attachment”. It can either send a file from its address in the server, or an already opened file (handle). It will also look for the MIME type if it is not provided.\nTo work, it is necessary to indicate specific parameters:\n$param = array(\n\"filename\" =&gt; \"\", /* name of the file as it will appear in the browser */\n\"disposition\" =&gt; \"attachment\", /* attachment: the file is downloaded, inline: the file is displayed */\n\"tmp_name\" =&gt; \"\", /* location of the file in the server */\n\"content_type\" =&gt; \"\", /* mime type */\n\"is_reference\" =&gt; false, /* if true, tmp_name contains the handle of the opened file */\n\"handle\" =&gt; 0);\nsetParam(?array $param);\n\n\nSending a file\n$view = service (\"FileView\");\nThe operation is quite similar to BinaryView, except that it only works from an existing file. The MIME type can also be searched automatically if it is not not specified.\n$param = array(\n\"filename\" =&gt; \"export.txt\", /* name of the file as it will appear in the browser */\n\"disposition\" =&gt; \"attachment\", /* attachment: the file is downloaded, inline: the file is displayed */\n\"content_type\" =&gt; \"\", /* mime type */\n\"tmp_name\" =&gt; \"\", /* Name of the file to send */\n);\n\n\nAjax Request\n$view = service (\"AjaxView\");\nView used to respond to an Ajax request. The content, which is provided by default in the form of a table (Json content possible by setting the variable is_json to true), is encoded in html then transformed into a JSON string before being sent to the browser.\n\n\nSending a CSV file\n$view = service (\"CsvView\");\nThis view will generate a CSV file from a table ($data[][]). The generation and sending of the file is done with the function:\nfunction send($filename = \"\", $delimiter = \"\")\nThe name of the file can be generated automatically. The delimiter can be a semicolon, a comma or a tab (indicate ). The first header line is generated from the keys of the first record in the table.\n\n\nSending a JSON file\n$view = service (\"JsonFileView\");\nThe view generates a file in the browser, with a functioning close to the Ajax view. If the data is provided to the class in the form of an array, it is encoded in html before transformation into Json.\n\n\nSending a PDF file\n$view = service (\"PdfView\");\nTransfers a PDF file, either directly to be displayed, or as an attached file. Same functioning as the FileView view.\n\n\nSending arbitrary content to the browser\n$view = service (\"DisplayView\");\nThis is a view that transmits any content to the browser, without encoding or MIME type."
  },
  {
    "objectID": "smarty.html",
    "href": "smarty.html",
    "title": "Displaying web pages",
    "section": "",
    "text": "Web pages are generated with the Smarty templates engine ([https://www.smarty.net/). The templates are stored in two places:\n\nvendors/equinton/ppci/src/Views/templates/ppci, which contains:\nthe main page of the application main.html, the only page called\nthe header (header.tpl), which includes the menu, and the footer (footer.tpl)\nloading generic javascript libraries (main_js.tpl), including bootstrap 3, datatables, etc.\nall the templates needed for rights and user management, plus some pages common to all applications (sql query module, for example)\nmail templates (mail subfolder)\napp/Views/templates: application-specific templates, including:\nthe home page: main.tpl\nloading of specific javascript libraries: app_js.tpl\nthe About pages about_fr.tpl and about_en.tpl\n\nThe Smarty engine will prepare PHP pages during the compilation operation. These pages are stored in the writable/templates_c folder.\n\n\nBootstrap 3 was compiled using the colors of the former Irstea graphic charter. Additional CSS styles are available in the public/display/CSS/bootstrap-prototypephp.css file.\n\n\n\nImages are usually stored in the public/display/images folder.\nMost Javascript libraries are managed by npm, and are stored in public/display/node-modules. If additional scripts are needed (and not integrated into Smarty templates), you will find them in the public/display/javascript folder.\n\n\n\nThe display of HTML pages is entrusted to the SmartyPpci view, which can be instantiated as follows:\n$view = service (\"Smarty\");\nSee the views.html page for details on how it works.\n\n\n\nMost forms are constructed like this:\n&lt;form class=\"form-horizontal\" id=\"appliForm\" method=\"post\" action=\"appliChange\"&gt;\n    &lt;input type=\"hidden\" name=\"aclappli_id\" value=\"{$data.aclappli_id}\"&gt;\n    &lt;input type=\"hidden\" name=\"moduleBase\" value=\"appli\"&gt;\n    &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"appli\" class=\"control-label col-md-4\"&gt;&lt;span class=\"red\"&gt;*&lt;/span&gt; \n                {t}Nom de l'application :{/t}\n        &lt;/label&gt;\n        &lt;div class=\"col-md-8\"&gt;\n            &lt;input id=\"appli\" type=\"text\" name=\"appli\" class=\"form-control\" value=\"{$data.appli}\"\n                    autofocus required&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"applidetail\" class=\"control-label col-md-4\"&gt;{t}Description :{/t} &lt;/label&gt;\n        &lt;div class=\"col-md-8\"&gt;\n            &lt;input id=\"applidetail\" type=\"text\" class=\"form-control\" name=\"applidetail\"\n                    value=\"{$data.applidetail}\"&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"form-group center\"&gt;\n        &lt;button type=\"submit\" class=\"btn btn-primary button-valid\"&gt;{t}Valider{/t}&lt;/button&gt;\n        {if $data.aclappli_id &gt; 0 }\n        &lt;button class=\"btn btn-danger button-delete\"&gt;{t}Supprimer{/t}&lt;/button&gt;\n        {/if}\n    &lt;/div&gt;\n    {$csrf}\n&lt;/form&gt;\nIn the form tag, the action corresponds to the route to call. The moduleBase variable contains the route stem: pressing the delete button (button-delete class) will modify the route by replacing it with the content of moduleBase concatenated to Delete.\nMost of the classes are those provided by Bootstrap 3.\nThe {$csrf} variable contains the &lt;input type=\"hidden\" name=\"csrf_app_name\" value=\"xxxxxx\"&gt; field generated by CodeIgniter and used to prevent cross script request forgery attacks.\n\n\n\nTables, in their vast majority, use the Datatables component for their display. Here is a typical example of a call:\n&lt;table id=\"appliListe\" class=\"table table-bordered table-hover datatable display\" data-order='[[ 0, \"asc\" ]]'&gt;\nThe datatable class is described in the main_js.tpl template. It contains the initialization of the Datatables component with translation management and pre-programming of the proposed functions. Several classes allow you to quickly manage the different activatable functionalities:\n\n\n\n\n\n\n\n\n\n\nclass\nSearch\nPagination\nSort\nExport buttons\n\n\n\n\ndatatable\n\nX\nX\n\n\n\ndatatable-nopaging-nosearching\n\n\nX\n\n\n\ndatatable-searching\nX\nX\nX\n\n\n\ndatatable-nopaging\nX\n\nX\n\n\n\ndatatable-nopaging-nosort\nX\n\n\n\n\n\ndatatable-nosort\n\nX\n\n\n\n\ndatatable-export\nX\n\nX\nX\n\n\ndatatable-export-paging\nX\nX\nX\nX\n\n\n\nTables use the moment component to handle dates.\n\n\n\n\nnumber: control of the entry of integers\nrate: control of the entry of decimal numbers (separator: point)\nuuid: verification of fields containing an identifier of type UUID\ndatepicker: selection of a date\ndatetimepicker: selection of a date/time\ntimepicker: selection of a time (hh:mm:ss)\ntextarea-edit: multiline text area (textarea) with tab management to obtain text indents\nconfirm: display of a confirmation box on click or keypress\n\nTwo more, two additional functions are available:\n\nencodeHtml(content): encodes a string in HTML. This is a function used to encode information retrieved by an Ajax request\noperationConfirm(): displays a dialog box to confirm the operation to be performed.\n\n\n\n\nLabel translations are provided by the smarty-gettext library. Labels to be translated must be included between the {t} and {/t} tags.\nFor more details on translation management, see this page.\n\n\n\n\nThe menu is built dynamically taking into account the user’s rights. It is described in the app/Config/menu.xml file, and is structured as follows:\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;menu xmlns:its=\"http://www.w3.org/2005/11/its\" its:version=\"2.0\"&gt;\n    &lt;its:rules version=\"2.0\"&gt;\n        &lt;its:translateRule selector=\"//item/@label\" translate=\"yes\" /&gt;\n        &lt;its:translateRule selector=\"//item/@tooltip\" translate=\"yes\" /&gt;\n    &lt;/its:rules&gt;\n\n    &lt;item module=\"manage\" label=\"Gestion\" tooltip=\"Gestion\"&gt;\n        &lt;item divider='1' droits=\"param\" /&gt;\n        &lt;item module=\"requestList\" label=\"Requêtes SQL\" tooltip=\"Exécution de requêtes SQL dans la base de données\" droits=\"param\" /&gt;\n    &lt;/item&gt;\n&lt;/menu&gt;\nThe translateRule commands are used to generate translations. Each menu entry can contain a submenu: in the example above, the first level (module=manage) contains two entries.\nFor each entry, it is possible to indicate:\n\nmodule: the name of the route (CodeIgniter name) that must be called\nlabel: the label that is displayed\ntooltip: the text that is displayed on hover\nrights: the rights that the user must have for the menu entry to be displayed\nonlynoconnect=“1”: the entry is only displayed if the user is not logged in (used to display the login button, in particular)\nloginrequis=“1”: the entry is only displayed if the user is logged in\n\nOnly the first three attributes are mandatory.\nIt is also possible to draw a dividing line by adding the attribute divider=“1” (with or without rights).\nThe menu is stored in a session variable in the form of a list (attributes &lt;ul&gt;&lt;li&gt;), and is generated each time the user’s state changes (connection, disconnection)."
  },
  {
    "objectID": "smarty.html#general-principle",
    "href": "smarty.html#general-principle",
    "title": "Displaying web pages",
    "section": "",
    "text": "Web pages are generated with the Smarty templates engine ([https://www.smarty.net/). The templates are stored in two places:\n\nvendors/equinton/ppci/src/Views/templates/ppci, which contains:\nthe main page of the application main.html, the only page called\nthe header (header.tpl), which includes the menu, and the footer (footer.tpl)\nloading generic javascript libraries (main_js.tpl), including bootstrap 3, datatables, etc.\nall the templates needed for rights and user management, plus some pages common to all applications (sql query module, for example)\nmail templates (mail subfolder)\napp/Views/templates: application-specific templates, including:\nthe home page: main.tpl\nloading of specific javascript libraries: app_js.tpl\nthe About pages about_fr.tpl and about_en.tpl\n\nThe Smarty engine will prepare PHP pages during the compilation operation. These pages are stored in the writable/templates_c folder.\n\n\nBootstrap 3 was compiled using the colors of the former Irstea graphic charter. Additional CSS styles are available in the public/display/CSS/bootstrap-prototypephp.css file.\n\n\n\nImages are usually stored in the public/display/images folder.\nMost Javascript libraries are managed by npm, and are stored in public/display/node-modules. If additional scripts are needed (and not integrated into Smarty templates), you will find them in the public/display/javascript folder.\n\n\n\nThe display of HTML pages is entrusted to the SmartyPpci view, which can be instantiated as follows:\n$view = service (\"Smarty\");\nSee the views.html page for details on how it works.\n\n\n\nMost forms are constructed like this:\n&lt;form class=\"form-horizontal\" id=\"appliForm\" method=\"post\" action=\"appliChange\"&gt;\n    &lt;input type=\"hidden\" name=\"aclappli_id\" value=\"{$data.aclappli_id}\"&gt;\n    &lt;input type=\"hidden\" name=\"moduleBase\" value=\"appli\"&gt;\n    &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"appli\" class=\"control-label col-md-4\"&gt;&lt;span class=\"red\"&gt;*&lt;/span&gt; \n                {t}Nom de l'application :{/t}\n        &lt;/label&gt;\n        &lt;div class=\"col-md-8\"&gt;\n            &lt;input id=\"appli\" type=\"text\" name=\"appli\" class=\"form-control\" value=\"{$data.appli}\"\n                    autofocus required&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"applidetail\" class=\"control-label col-md-4\"&gt;{t}Description :{/t} &lt;/label&gt;\n        &lt;div class=\"col-md-8\"&gt;\n            &lt;input id=\"applidetail\" type=\"text\" class=\"form-control\" name=\"applidetail\"\n                    value=\"{$data.applidetail}\"&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"form-group center\"&gt;\n        &lt;button type=\"submit\" class=\"btn btn-primary button-valid\"&gt;{t}Valider{/t}&lt;/button&gt;\n        {if $data.aclappli_id &gt; 0 }\n        &lt;button class=\"btn btn-danger button-delete\"&gt;{t}Supprimer{/t}&lt;/button&gt;\n        {/if}\n    &lt;/div&gt;\n    {$csrf}\n&lt;/form&gt;\nIn the form tag, the action corresponds to the route to call. The moduleBase variable contains the route stem: pressing the delete button (button-delete class) will modify the route by replacing it with the content of moduleBase concatenated to Delete.\nMost of the classes are those provided by Bootstrap 3.\nThe {$csrf} variable contains the &lt;input type=\"hidden\" name=\"csrf_app_name\" value=\"xxxxxx\"&gt; field generated by CodeIgniter and used to prevent cross script request forgery attacks.\n\n\n\nTables, in their vast majority, use the Datatables component for their display. Here is a typical example of a call:\n&lt;table id=\"appliListe\" class=\"table table-bordered table-hover datatable display\" data-order='[[ 0, \"asc\" ]]'&gt;\nThe datatable class is described in the main_js.tpl template. It contains the initialization of the Datatables component with translation management and pre-programming of the proposed functions. Several classes allow you to quickly manage the different activatable functionalities:\n\n\n\n\n\n\n\n\n\n\nclass\nSearch\nPagination\nSort\nExport buttons\n\n\n\n\ndatatable\n\nX\nX\n\n\n\ndatatable-nopaging-nosearching\n\n\nX\n\n\n\ndatatable-searching\nX\nX\nX\n\n\n\ndatatable-nopaging\nX\n\nX\n\n\n\ndatatable-nopaging-nosort\nX\n\n\n\n\n\ndatatable-nosort\n\nX\n\n\n\n\ndatatable-export\nX\n\nX\nX\n\n\ndatatable-export-paging\nX\nX\nX\nX\n\n\n\nTables use the moment component to handle dates.\n\n\n\n\nnumber: control of the entry of integers\nrate: control of the entry of decimal numbers (separator: point)\nuuid: verification of fields containing an identifier of type UUID\ndatepicker: selection of a date\ndatetimepicker: selection of a date/time\ntimepicker: selection of a time (hh:mm:ss)\ntextarea-edit: multiline text area (textarea) with tab management to obtain text indents\nconfirm: display of a confirmation box on click or keypress\n\nTwo more, two additional functions are available:\n\nencodeHtml(content): encodes a string in HTML. This is a function used to encode information retrieved by an Ajax request\noperationConfirm(): displays a dialog box to confirm the operation to be performed.\n\n\n\n\nLabel translations are provided by the smarty-gettext library. Labels to be translated must be included between the {t} and {/t} tags.\nFor more details on translation management, see this page."
  },
  {
    "objectID": "smarty.html#menu-management",
    "href": "smarty.html#menu-management",
    "title": "Displaying web pages",
    "section": "",
    "text": "The menu is built dynamically taking into account the user’s rights. It is described in the app/Config/menu.xml file, and is structured as follows:\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;menu xmlns:its=\"http://www.w3.org/2005/11/its\" its:version=\"2.0\"&gt;\n    &lt;its:rules version=\"2.0\"&gt;\n        &lt;its:translateRule selector=\"//item/@label\" translate=\"yes\" /&gt;\n        &lt;its:translateRule selector=\"//item/@tooltip\" translate=\"yes\" /&gt;\n    &lt;/its:rules&gt;\n\n    &lt;item module=\"manage\" label=\"Gestion\" tooltip=\"Gestion\"&gt;\n        &lt;item divider='1' droits=\"param\" /&gt;\n        &lt;item module=\"requestList\" label=\"Requêtes SQL\" tooltip=\"Exécution de requêtes SQL dans la base de données\" droits=\"param\" /&gt;\n    &lt;/item&gt;\n&lt;/menu&gt;\nThe translateRule commands are used to generate translations. Each menu entry can contain a submenu: in the example above, the first level (module=manage) contains two entries.\nFor each entry, it is possible to indicate:\n\nmodule: the name of the route (CodeIgniter name) that must be called\nlabel: the label that is displayed\ntooltip: the text that is displayed on hover\nrights: the rights that the user must have for the menu entry to be displayed\nonlynoconnect=“1”: the entry is only displayed if the user is not logged in (used to display the login button, in particular)\nloginrequis=“1”: the entry is only displayed if the user is logged in\n\nOnly the first three attributes are mandatory.\nIt is also possible to draw a dividing line by adding the attribute divider=“1” (with or without rights).\nThe menu is stored in a session variable in the form of a list (attributes &lt;ul&gt;&lt;li&gt;), and is generated each time the user’s state changes (connection, disconnection)."
  },
  {
    "objectID": "libraries.html",
    "href": "libraries.html",
    "title": "Libraries",
    "section": "",
    "text": "The “active” code of the application, that is to say the one that chains the actions, is described in the libraries. In general, there is one library per table, but this is not systematic.\nThe libraries systematically inherit from PpciLibrary, and generally contain the following functions:\n\nlist: display the list of records in the table\ndisplay: display the details of a record\nchange: display the modification page\nwrite: write to the database\ndelete: delete the record.\n\nDepending on the case, write and delete refer either to display or to list and, in case of problem, the function reloads the change page.\nIn some cases, especially when functions can be called from different places in the application, functions simply return the value true or false, and the controller will call the display function, especially after recording operations.\n\n\nIt manages direct access to some services:\n\n$this-&gt;message: display messages on the screen and record technical messages in Syslog\n$this-&gt;appConfig: access to configuration parameters stored in app/Config/App.php or updated via .env\n$this-&gt;log: record traces in the gacl.log table of the database.\n\nFor it to work properly, it must be initialized as follows:\nfunction __construct()\n    {\n        parent::__construct();\n        $this-&gt;dataclass = new ModelsBorrower();\n        $this-&gt;keyName = \"borrower_id\";\n        if (isset($_REQUEST[$this-&gt;keyName])) {\n            $this-&gt;id = $_REQUEST[$this-&gt;keyName];\n        }\n    }\n$this-&gt;dataclass must be a class inherited from PpciModel.\nIt also has generic functions, which simplify the writing of classes in the application. These systematically raise a PpciException exception if an error is encountered.\n\n\nfunction dataRead($id, $smartyPage, $idParent = 0)\nThe function calls $this-&gt;dataclass-&gt;read ($id, true, $idParent), assigns the read data array to the variable $data, then triggers the display of the page $smartyPage. It returns the $data array to the calling function.\n\n\n\nfunction dataWrite(array $data, bool $isPartOfTransaction = false)\nWrites the data $data to the table managed by $this-&gt;dataclass (call to the write function). If the transaction flag is not enabled, a message informing of the execution of the command is sent, and a trace is recorded in the log table.\n\n\n\nfunction dataDelete($id, bool $isPartOfTransaction = false)\nDeletes the record identified by $id, and displays a message to inform of the success of the operation if the transaction flag is not enabled.\n\n\n\n\nIn the case where several concurrent writes are necessary, it is possible to activate the transactions, managed by CodeIgniter, with the following commands:\ntry {\n   /*\n    * Start transaction\n    */\n   $db = $this-&gt;dataclass-&gt;db;\n   $db-&gt;transBegin();\n   (...)\n   $db-&gt;transCommit();\n   } catch (PpciException $ie) {\n     if ($db-&gt;transEnabled) {\n     $db-&gt;transRollback();\n     (...)\n   }"
  },
  {
    "objectID": "libraries.html#the-ppcilibrary-class",
    "href": "libraries.html#the-ppcilibrary-class",
    "title": "Libraries",
    "section": "",
    "text": "It manages direct access to some services:\n\n$this-&gt;message: display messages on the screen and record technical messages in Syslog\n$this-&gt;appConfig: access to configuration parameters stored in app/Config/App.php or updated via .env\n$this-&gt;log: record traces in the gacl.log table of the database.\n\nFor it to work properly, it must be initialized as follows:\nfunction __construct()\n    {\n        parent::__construct();\n        $this-&gt;dataclass = new ModelsBorrower();\n        $this-&gt;keyName = \"borrower_id\";\n        if (isset($_REQUEST[$this-&gt;keyName])) {\n            $this-&gt;id = $_REQUEST[$this-&gt;keyName];\n        }\n    }\n$this-&gt;dataclass must be a class inherited from PpciModel.\nIt also has generic functions, which simplify the writing of classes in the application. These systematically raise a PpciException exception if an error is encountered.\n\n\nfunction dataRead($id, $smartyPage, $idParent = 0)\nThe function calls $this-&gt;dataclass-&gt;read ($id, true, $idParent), assigns the read data array to the variable $data, then triggers the display of the page $smartyPage. It returns the $data array to the calling function.\n\n\n\nfunction dataWrite(array $data, bool $isPartOfTransaction = false)\nWrites the data $data to the table managed by $this-&gt;dataclass (call to the write function). If the transaction flag is not enabled, a message informing of the execution of the command is sent, and a trace is recorded in the log table.\n\n\n\nfunction dataDelete($id, bool $isPartOfTransaction = false)\nDeletes the record identified by $id, and displays a message to inform of the success of the operation if the transaction flag is not enabled."
  },
  {
    "objectID": "libraries.html#transaction-processing",
    "href": "libraries.html#transaction-processing",
    "title": "Libraries",
    "section": "",
    "text": "In the case where several concurrent writes are necessary, it is possible to activate the transactions, managed by CodeIgniter, with the following commands:\ntry {\n   /*\n    * Start transaction\n    */\n   $db = $this-&gt;dataclass-&gt;db;\n   $db-&gt;transBegin();\n   (...)\n   $db-&gt;transCommit();\n   } catch (PpciException $ie) {\n     if ($db-&gt;transEnabled) {\n     $db-&gt;transRollback();\n     (...)\n   }"
  },
  {
    "objectID": "installation.html",
    "href": "installation.html",
    "title": "Installation",
    "section": "",
    "text": "Installation can only be carried out in an empty folder. The example is given here for a migration to otolithe2.\n\n\nIn the top level folder :\ncomposer create-project codeigniter4/appstarter otolithe2  \ncd otolithe2\ncomposer require equinton/ppci\n\n\n\nVarious files supplied by CodeIgniter must be adapted for PPCI support.\nIn the application folder, at the root, run the script :\nvendor/equinton/ppci/install/install.sh\nThe script will :\n\ncopy the files needed to run the application into the various folders:\n\nparameters in app/Config\nlibraries in app/Libraries (default classes)\nthe display folder in public, and loading the necessary Javascript classes via npm.\n\ncreate the writable/temp folder, and give www-data write access to all writable files\ngenerate the .env file, including the default instantiation parameters\ncreate the private/public keys used for cryptographic operations.\n\n\n\n\n\n\nEdit the .env file, at the root of the application, and fill in the following entries:\nCI_ENVIRONMENT = development\napp.baseURL = 'https://myapp.mysociety.com'\n\ndatabase.default.DBDriver = Postgre\ndatabase.default.DBPrefix =\ndatabase.default.port = 5432\ndatabase.default.charset = utf8\ndatabase.default.hostname = localhost\ndatabase.default.database = dbname\ndatabase.default.username = login\ndatabase.default.password = password\ndatabase.default.searchpath = public,app,gacl\n\n\n\nThis is the file containing the application’s default parameters. It is a PHP class, whose following variables can be modified:\n$dbversion = ‘1.0’; // database version\n$GACL_aco = ‘app’; // application code for rights management\n$version = ‘v1.0.0’; // Software version. This must correspond to one of the versions created in Github or Gitlab\n$versionDate = ‘01/01/2024’; //Version date\n$APP_help_address =‘’; //link to ticket creation or help page\n$copyright = ‘’; //Copyright of the application\n$APPLI_release = []; //Table used to query either Github or a Gitlab server to obtain information about the latest version released\n\n\n\n\nConnect to your Postgresql server with psql, then create your database:\ncreate user applogin inherit login password ‘appPassword’;\ncreate database app owner applogin;\n\\c app applogin\n\\i vendor/equinton/ppci/install/create.sql\nThe script will create two schemas: app for the application tables, and gacl for rights management.\nTwo tables will be created in the app schema, which are needed for Ppci to work.\nThe first connection to the application uses the login admin, password password."
  },
  {
    "objectID": "installation.html#installing-codeigniter-and-ppci",
    "href": "installation.html#installing-codeigniter-and-ppci",
    "title": "Installation",
    "section": "",
    "text": "In the top level folder :\ncomposer create-project codeigniter4/appstarter otolithe2  \ncd otolithe2\ncomposer require equinton/ppci"
  },
  {
    "objectID": "installation.html#configuring-ppci-support",
    "href": "installation.html#configuring-ppci-support",
    "title": "Installation",
    "section": "",
    "text": "Various files supplied by CodeIgniter must be adapted for PPCI support.\nIn the application folder, at the root, run the script :\nvendor/equinton/ppci/install/install.sh\nThe script will :\n\ncopy the files needed to run the application into the various folders:\n\nparameters in app/Config\nlibraries in app/Libraries (default classes)\nthe display folder in public, and loading the necessary Javascript classes via npm.\n\ncreate the writable/temp folder, and give www-data write access to all writable files\ngenerate the .env file, including the default instantiation parameters\ncreate the private/public keys used for cryptographic operations."
  },
  {
    "objectID": "installation.html#initial-setup",
    "href": "installation.html#initial-setup",
    "title": "Installation",
    "section": "",
    "text": "Edit the .env file, at the root of the application, and fill in the following entries:\nCI_ENVIRONMENT = development\napp.baseURL = 'https://myapp.mysociety.com'\n\ndatabase.default.DBDriver = Postgre\ndatabase.default.DBPrefix =\ndatabase.default.port = 5432\ndatabase.default.charset = utf8\ndatabase.default.hostname = localhost\ndatabase.default.database = dbname\ndatabase.default.username = login\ndatabase.default.password = password\ndatabase.default.searchpath = public,app,gacl\n\n\n\nThis is the file containing the application’s default parameters. It is a PHP class, whose following variables can be modified:\n$dbversion = ‘1.0’; // database version\n$GACL_aco = ‘app’; // application code for rights management\n$version = ‘v1.0.0’; // Software version. This must correspond to one of the versions created in Github or Gitlab\n$versionDate = ‘01/01/2024’; //Version date\n$APP_help_address =‘’; //link to ticket creation or help page\n$copyright = ‘’; //Copyright of the application\n$APPLI_release = []; //Table used to query either Github or a Gitlab server to obtain information about the latest version released"
  },
  {
    "objectID": "installation.html#creating-the-database",
    "href": "installation.html#creating-the-database",
    "title": "Installation",
    "section": "",
    "text": "Connect to your Postgresql server with psql, then create your database:\ncreate user applogin inherit login password ‘appPassword’;\ncreate database app owner applogin;\n\\c app applogin\n\\i vendor/equinton/ppci/install/create.sql\nThe script will create two schemas: app for the application tables, and gacl for rights management.\nTwo tables will be created in the app schema, which are needed for Ppci to work.\nThe first connection to the application uses the login admin, password password."
  },
  {
    "objectID": "controllers.html",
    "href": "controllers.html",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "",
    "text": "Controllers, the first stage in processing a route, inherit from the PpciController class. This automatically calls the initialization function function initController( RequestInterface $request, ResponseInterface $response, LoggerInterface $logger) and loads the message service and the App configuration into $this-&gt;config.\nHere is a typical implementation example:\nclass Borrower extends PpciController\n{\n    protected $lib;\n    function __construct()\n    {\n        $this-&gt;lib = new LibrariesBorrower();\n    }\n    function list()\n    {\n        return $this-&gt;lib-&gt;list();\n    }\n    function display()\n    {\n        return $this-&gt;lib-&gt;display();\n    }\n    function change()\n    {\n        return $this-&gt;lib-&gt;change();\n    }\n    function write()\n    {\n        return $this-&gt;lib-&gt;write();\n    }\n    function delete()\n    {\n        return $this-&gt;lib-&gt;delete();\n    }\n}"
  },
  {
    "objectID": "principes.html",
    "href": "principes.html",
    "title": "Sequencing when calling up a page",
    "section": "",
    "text": "Filters are declared in the app/Config/Filters.php file.\n\n\nChecks the CSRF token, which is present in all Smarty forms. The filter must be disabled for API calls, for example as follows:\n'csrf' =&gt; ['except' =&gt; [\n    'apiv1sampleWrite',\n    'apiv1sampleDelete',\n    'apiv1movementWrite',\n    'apiv1sampleList'\n]],\n\n\n\nChecks the encoding of characters transmitted from the browser\n\n\n\nStarts PpciInit:init() :\n\nBefore session start: runs the App/Libraries/BeforeSession::index() script, to load classes as needed before the session starts. In principle, this is obsolete for CodeIgniter.\nstarts the session\nhelper('ppci'): loads generic PPCI functions\ninitialise messages that have been transmitted before a redirection\nupdates the locale and the translation file\ninitialise the database connection\npurges the logs (gacl.log table). Logs older than one year are deleted (app.logDuration parameter).\n\n\n\n\nChecks the version of the database (dbversion table). If the version declared in the app.dbversion variable is not present in the table, the filter returns to the home page (call to the defaultPage() function) and displays an error message. The filter should be disabled for API calls and for scripts run on the command line.\n\n\n\nOptional filter, which compares the version declared in the app.version variable with the version known as the current version in the Github or Gitlab repository. For the filter to work, the app.checkRelease variable must be set to 1, and the app.APPLI_release array must be correctly configured.\n\n\n\n\nSearch for the necessary rights in :\n\nApp/Config/Rights\nPpci/Config/Rights\n\nIf the requested rights exist, the filter checks whether the login exists or not. If it does not exist, triggers the login procedure (Ppci/Libraries/Login-&gt;getLogin())\nchecks that the user has the necessary rights\n\n\n\n\n\nchecks whether the module called requires the admin right in Ppci/Config/Rights.\nin the case of an administration module :\n\nchecks when the last TOTP identification or call to an administration module was made\nif the duration is &gt; 10’ :\n\nif the account has not activated the TOTP, the TOTP code creation screen is displayed.\notherwise triggers entry of the TOTP code.\n\n\n\nUse of the TOTP can be disabled (not recommended for production use) using the IdentificationConfig\\disableTotpAdmin=1 parameter.\nThe duration of the admin session can be modified with the IdentificationConfig\\adminSessionDuration=600 parameter. The duration is expressed in seconds.\n\n\n\n\nControllers must inherit from Ppci/Controllers/PpciController, which will retrieve the $_GET, $_REQUEST, $_POST and $_SESSION['lastGet'] variables from FlashData.\n\n\n\nControllers call libraries, which can inherit from PpciLibraries. This class offers:\n\npre-positioned parameters:\n\nprotected PpciModel $dataClass; : a class for manipulating information stored in a table.\n$this-&gt;message = service('MessagePpci'); : class used to display messages on the screen or record them in the server logs\n$this-&gt;appConfig = config('App'); : general application parameters\n$this-&gt;log = service('Log'); : recording of actions in the gacl.log table\n\ngeneric functions for manipulating data:\n\ndataRead($id, $smartyPage, $idParent = 0) : reads information from a record in the $dataClass, and generates the Smarty view\ndataWrite(array $data, bool $isPartOfTransaction = false): writes information to the database\ndataDelete($id, bool $isPartOfTransaction = false): deletes a record\n\n\n\n\n\nSending information to the browser uses views, each dedicated to a type of information (web pages, pdf files, Ajax requests, binary files, etc.). They are available in the form of services (described in ppci/Config/Services.php), and are physically stored in Ppci/Libraries/Views.\nDetails of the views can be viewed here."
  },
  {
    "objectID": "principes.html#filters",
    "href": "principes.html#filters",
    "title": "Sequencing when calling up a page",
    "section": "",
    "text": "Filters are declared in the app/Config/Filters.php file.\n\n\nChecks the CSRF token, which is present in all Smarty forms. The filter must be disabled for API calls, for example as follows:\n'csrf' =&gt; ['except' =&gt; [\n    'apiv1sampleWrite',\n    'apiv1sampleDelete',\n    'apiv1movementWrite',\n    'apiv1sampleList'\n]],\n\n\n\nChecks the encoding of characters transmitted from the browser\n\n\n\nStarts PpciInit:init() :\n\nBefore session start: runs the App/Libraries/BeforeSession::index() script, to load classes as needed before the session starts. In principle, this is obsolete for CodeIgniter.\nstarts the session\nhelper('ppci'): loads generic PPCI functions\ninitialise messages that have been transmitted before a redirection\nupdates the locale and the translation file\ninitialise the database connection\npurges the logs (gacl.log table). Logs older than one year are deleted (app.logDuration parameter).\n\n\n\n\nChecks the version of the database (dbversion table). If the version declared in the app.dbversion variable is not present in the table, the filter returns to the home page (call to the defaultPage() function) and displays an error message. The filter should be disabled for API calls and for scripts run on the command line.\n\n\n\nOptional filter, which compares the version declared in the app.version variable with the version known as the current version in the Github or Gitlab repository. For the filter to work, the app.checkRelease variable must be set to 1, and the app.APPLI_release array must be correctly configured.\n\n\n\n\nSearch for the necessary rights in :\n\nApp/Config/Rights\nPpci/Config/Rights\n\nIf the requested rights exist, the filter checks whether the login exists or not. If it does not exist, triggers the login procedure (Ppci/Libraries/Login-&gt;getLogin())\nchecks that the user has the necessary rights\n\n\n\n\n\nchecks whether the module called requires the admin right in Ppci/Config/Rights.\nin the case of an administration module :\n\nchecks when the last TOTP identification or call to an administration module was made\nif the duration is &gt; 10’ :\n\nif the account has not activated the TOTP, the TOTP code creation screen is displayed.\notherwise triggers entry of the TOTP code.\n\n\n\nUse of the TOTP can be disabled (not recommended for production use) using the IdentificationConfig\\disableTotpAdmin=1 parameter.\nThe duration of the admin session can be modified with the IdentificationConfig\\adminSessionDuration=600 parameter. The duration is expressed in seconds."
  },
  {
    "objectID": "principes.html#calling-the-controller",
    "href": "principes.html#calling-the-controller",
    "title": "Sequencing when calling up a page",
    "section": "",
    "text": "Controllers must inherit from Ppci/Controllers/PpciController, which will retrieve the $_GET, $_REQUEST, $_POST and $_SESSION['lastGet'] variables from FlashData."
  },
  {
    "objectID": "principes.html#calling-libraries",
    "href": "principes.html#calling-libraries",
    "title": "Sequencing when calling up a page",
    "section": "",
    "text": "Controllers call libraries, which can inherit from PpciLibraries. This class offers:\n\npre-positioned parameters:\n\nprotected PpciModel $dataClass; : a class for manipulating information stored in a table.\n$this-&gt;message = service('MessagePpci'); : class used to display messages on the screen or record them in the server logs\n$this-&gt;appConfig = config('App'); : general application parameters\n$this-&gt;log = service('Log'); : recording of actions in the gacl.log table\n\ngeneric functions for manipulating data:\n\ndataRead($id, $smartyPage, $idParent = 0) : reads information from a record in the $dataClass, and generates the Smarty view\ndataWrite(array $data, bool $isPartOfTransaction = false): writes information to the database\ndataDelete($id, bool $isPartOfTransaction = false): deletes a record"
  },
  {
    "objectID": "principes.html#the-different-views",
    "href": "principes.html#the-different-views",
    "title": "Sequencing when calling up a page",
    "section": "",
    "text": "Sending information to the browser uses views, each dedicated to a type of information (web pages, pdf files, Ajax requests, binary files, etc.). They are available in the form of services (described in ppci/Config/Services.php), and are physically stored in Ppci/Libraries/Views.\nDetails of the views can be viewed here."
  }
]