[
  {
    "objectID": "legal_notice.html",
    "href": "legal_notice.html",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "",
    "text": "Nom du site : documentation PPCI\nURL complète du site : https://equinton.github.io/ppcidocs/"
  },
  {
    "objectID": "legal_notice.html#identification-du-site",
    "href": "legal_notice.html#identification-du-site",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "",
    "text": "Nom du site : documentation PPCI\nURL complète du site : https://equinton.github.io/ppcidocs/"
  },
  {
    "objectID": "legal_notice.html#éditeurs-du-site",
    "href": "legal_notice.html#éditeurs-du-site",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "Éditeur(s) du site",
    "text": "Éditeur(s) du site\nINRAE - Institut national de recherche pour l’agriculture, l’alimentation et l’environnement\nINRAE est un établissement public à caractère scientifique et technologique. Il a son siège au 147, rue de l’université – 75338 Paris cedex 07. Ses statuts sont publiés dans le code rural et de la pêche maritime (articles R831-1 et suivants).\nIl est représenté par son Président Directeur général, M. Philippe MAUGUIN.\nContact mail: web@inrae.fr - contact téléphonique: 01 42 75 90 00"
  },
  {
    "objectID": "legal_notice.html#numéros-didentification",
    "href": "legal_notice.html#numéros-didentification",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "Numéros d’identification",
    "text": "Numéros d’identification\nINRAE SIREN: 180070039\nCode APE: 7219Z\nNuméro de TVA intracommunautaire: FR 57 1800700039"
  },
  {
    "objectID": "legal_notice.html#publication-du-site",
    "href": "legal_notice.html#publication-du-site",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "Publication du site",
    "text": "Publication du site\nNom du directeur de publication : M. Philippe MAUGUIN\nNom du responsable de rédaction : Éric Quinton\nWebmaster du site : Éric Quinton"
  },
  {
    "objectID": "legal_notice.html#hébergeur-du-site",
    "href": "legal_notice.html#hébergeur-du-site",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "Hébergeur du site",
    "text": "Hébergeur du site\nINRAE Établissement public à caractère scientifique et technologique 147, rue de l’université – 75338 Paris cedex 07 01 42 75 90 00\nCopyright © 2024 - All rights reserved. Author: Éric Quinton for EABX-INRAE. Documentation distributed under license  CC-BY"
  },
  {
    "objectID": "partners.html#list-of-financial-partners",
    "href": "partners.html#list-of-financial-partners",
    "title": "Partners",
    "section": "List of Financial partners",
    "text": "List of Financial partners"
  },
  {
    "objectID": "identification.html",
    "href": "identification.html",
    "title": "Identification management",
    "section": "",
    "text": "PPCI offers several mechanisms for managing user identification:\n\nstorage of accounts in the database (BDD)\nidentification with an LDAP server (LDAP)\nidentification with a Common Access Service (CAS) server\nidentification with an OpenID Connect (OIDC) server\nidentification provided by the web server, to use Shibboleth mechanisms (Apache Mellon mode, for example) (HEADER)\nmixed mechanisms, using third-party servers and database storage for accounts not otherwise managed:\n\nLDAP-BDD: identification test with the LDAP directory, and if unsuccessful, with the database.\nCAS-BDD and OIDC-BDD: a button can be used to select identification with the server in question.\n\n\nIn addition, users can activate dual TOTP identification. This is compulsory to access the administration modules.\nNote that LDAP identification is now considered obsolete. It is better to use OIDC or CAS services, where available.\n\n\n\n\nParameters are defined in Ppci\\ConfigIdentificationConfig.\n\nCONNECTION_max_attempts : if the connection fails (default 5), the account will be blocked for the time specified in :\n\nCONNECTION_blocking_duration (default 600 seconds). Note that attempting to connect during this period resets the counter to zero\n\nAPP_passwordMinLength : minimum password length.\nAPPLI_lostPassword : if set to 1 (default), the user will be able to ask for their password to be reset, provided their email address is entered\ntokenIdentityValidity : validity period of the token generated during the BDD or LDAP connection, to avoid having to re-identify during the day. By default, 10 hours.\n\n\n\n\nVariables are defined in Ppci\\Config\\IdentificationConfig.LDAP.\n\naddress : LDAP server address\nport : connection port\nrdn : login account for directory queries, if required\nbasedn : account search base\nuser_attrib : attribute containing the user’s identifier (uid)\nv3 : version 3 of the directory, set by default to true\ntls : set to true to activate the tls connection\nupn_suffix : upn suffix, necessary in some cases for Active Directory\ngroupSupport : if set to true, groups will be retrieved from the directory to feed the rights management module\ngroupAttrib : name of the attribute containing the user’s groups\ncommonNameAttrib : name of the attribute containing the common name\nmailAttrib : name of the attribute containing the email\nattributgroupname : name of the attribute containing the group name\nattributloginname : name of the attribute containing the uid member\nbasedngroup : groups search path\ntimeout : directory search time-out (set to 2 seconds by default)\nldapnoanonymous : if set to true, querying the directory to retrieve groups requires a connection\n\nldaplogin : connection login\nldappassword : associated password\n\n\n\n\n\nAn icon has been added to the button used to activate identification with the CAS or OIDC server: Ppci\\Config\\IdentificationConfig.identificationLogo = \"${FRONT_DIR}/favicon.png\"\n\n\n\n\nParameters are defined in Ppci\\Config\\IdentificationConfig.XX, where XX must be replaced by CAS, OIDC or HEADER.\nGeneric parameters:\n\nmail : attribute containing the email\nfirstname : attribute containing the first name\nlastname : attribute containing the last name\nname : attribute containing the common name\ngroups : attribute containing user membership groups\ngetGroups : if set to 1 (default), the user groups supplied by the identification server are processed\n\n\n\n\naddress : CAS server address, by example: monserveur.society.com\nuri : identification access folder. Default setting : /cas\nport : default: 443\ndebug : f set to true or 1, traces are stored in the file writable/logs/cas.log\nCApath : path to the certificate used to validate the CAS server. If it is not entered, the CAS server will not be verified (not recommended for production use).\n\n\n\n\n\nname : provider code\nprovider : provider web address (must start with https://)\nclientId : code furnished by the provider\nclientSecret : secret key furnished by the provider\nscopeGroup : OIDC scope name which contains the secondary attributes (default : affectation)\n\n\n\n\n\nlogin : name of the $_SERVER attribute containing the login, returned by the Apache server\norganizationGranted : table containing the code or name of authorised organisations. If this table is filled in, and if a new user does not belong to one of the organisations indicated (organization attribute), their account will not be created.\ngroupsGranted : table containing the list of authorised groups. If a user logs in for the first time and their group (or one of their groups) is on the list of authorised groups, their account will be activated automatically. If not, the account will be deactivated and an email will be sent to the administrators inviting them to activate the account.\n\n\n\n\n\nThe parameters can be accessed from Ppci\\Config\\IdentificationConfig.\n\nadminSessionDuration : period during which the identification remains valid for access to the administration modules. Default: 10’.\ndisableTotpToAdmin : if set to 1, disables dual-identification for access to administration modules. Should not be used in production!"
  },
  {
    "objectID": "identification.html#specific-parameters-for-each-type-of-identification",
    "href": "identification.html#specific-parameters-for-each-type-of-identification",
    "title": "Identification management",
    "section": "",
    "text": "Parameters are defined in Ppci\\ConfigIdentificationConfig.\n\nCONNECTION_max_attempts : if the connection fails (default 5), the account will be blocked for the time specified in :\n\nCONNECTION_blocking_duration (default 600 seconds). Note that attempting to connect during this period resets the counter to zero\n\nAPP_passwordMinLength : minimum password length.\nAPPLI_lostPassword : if set to 1 (default), the user will be able to ask for their password to be reset, provided their email address is entered\ntokenIdentityValidity : validity period of the token generated during the BDD or LDAP connection, to avoid having to re-identify during the day. By default, 10 hours.\n\n\n\n\nVariables are defined in Ppci\\Config\\IdentificationConfig.LDAP.\n\naddress : LDAP server address\nport : connection port\nrdn : login account for directory queries, if required\nbasedn : account search base\nuser_attrib : attribute containing the user’s identifier (uid)\nv3 : version 3 of the directory, set by default to true\ntls : set to true to activate the tls connection\nupn_suffix : upn suffix, necessary in some cases for Active Directory\ngroupSupport : if set to true, groups will be retrieved from the directory to feed the rights management module\ngroupAttrib : name of the attribute containing the user’s groups\ncommonNameAttrib : name of the attribute containing the common name\nmailAttrib : name of the attribute containing the email\nattributgroupname : name of the attribute containing the group name\nattributloginname : name of the attribute containing the uid member\nbasedngroup : groups search path\ntimeout : directory search time-out (set to 2 seconds by default)\nldapnoanonymous : if set to true, querying the directory to retrieve groups requires a connection\n\nldaplogin : connection login\nldappassword : associated password\n\n\n\n\n\nAn icon has been added to the button used to activate identification with the CAS or OIDC server: Ppci\\Config\\IdentificationConfig.identificationLogo = \"${FRONT_DIR}/favicon.png\""
  },
  {
    "objectID": "identification.html#identification-on-dedicated-servers-header-cas-oidc",
    "href": "identification.html#identification-on-dedicated-servers-header-cas-oidc",
    "title": "Identification management",
    "section": "",
    "text": "Parameters are defined in Ppci\\Config\\IdentificationConfig.XX, where XX must be replaced by CAS, OIDC or HEADER.\nGeneric parameters:\n\nmail : attribute containing the email\nfirstname : attribute containing the first name\nlastname : attribute containing the last name\nname : attribute containing the common name\ngroups : attribute containing user membership groups\ngetGroups : if set to 1 (default), the user groups supplied by the identification server are processed\n\n\n\n\naddress : CAS server address, by example: monserveur.society.com\nuri : identification access folder. Default setting : /cas\nport : default: 443\ndebug : f set to true or 1, traces are stored in the file writable/logs/cas.log\nCApath : path to the certificate used to validate the CAS server. If it is not entered, the CAS server will not be verified (not recommended for production use).\n\n\n\n\n\nname : provider code\nprovider : provider web address (must start with https://)\nclientId : code furnished by the provider\nclientSecret : secret key furnished by the provider\nscopeGroup : OIDC scope name which contains the secondary attributes (default : affectation)\n\n\n\n\n\nlogin : name of the $_SERVER attribute containing the login, returned by the Apache server\norganizationGranted : table containing the code or name of authorised organisations. If this table is filled in, and if a new user does not belong to one of the organisations indicated (organization attribute), their account will not be created.\ngroupsGranted : table containing the list of authorised groups. If a user logs in for the first time and their group (or one of their groups) is on the list of authorised groups, their account will be activated automatically. If not, the account will be deactivated and an email will be sent to the administrators inviting them to activate the account."
  },
  {
    "objectID": "identification.html#managing-access-to-administration-modules",
    "href": "identification.html#managing-access-to-administration-modules",
    "title": "Identification management",
    "section": "",
    "text": "The parameters can be accessed from Ppci\\Config\\IdentificationConfig.\n\nadminSessionDuration : period during which the identification remains valid for access to the administration modules. Default: 10’.\ndisableTotpToAdmin : if set to 1, disables dual-identification for access to administration modules. Should not be used in production!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "",
    "text": "Translated with DeepL.com (free version)"
  },
  {
    "objectID": "command-line.html",
    "href": "command-line.html",
    "title": "Run on the command line",
    "section": "",
    "text": "In CodeIgniter, with the PPCI module, the .env file is loaded automatically, taking into account the contents of the $_SERVER[‘envPath’] variable, with this code:\nif (is_file($file = $_SERVER[\"envPath\"] . DIRECTORY_SEPARATOR . \".env\") && is_readable($file)) {\n    (new CodeIgniter\\Config\\DotEnv($_SERVER[\"envPath\"],\".env\"))-&gt;load();\nIn a script, to transfer the value of envPath to the variable $_SERVER and enable the .env file to be loaded, you need to add the line :\nexport envPath=\"/var/www/instances/instancename\"\nHere’s an example of how it can be used, simply to display the contents of the $_SERVER[‘envPath’] variable:\nPHP file:\n&lt;?php\necho $_SERVER[\"envPath\"].PHP_EOL;\nScript test.sh used to trigger it:\n#!/bin/bash\nexport envPath=/var/www/instances/instancename\ncd $envPath/public\nphp index.php myroute\nwhere myroute corresponds to the route to be called.\nDeclare the route in app/Config/Routes.php (don’t forget the corresponding controller), then run the script:\n./test.sh\n/var/www/instances/instancename"
  },
  {
    "objectID": "command-line.html#transfer-the-name-of-the-.env-file-to-be-used",
    "href": "command-line.html#transfer-the-name-of-the-.env-file-to-be-used",
    "title": "Run on the command line",
    "section": "",
    "text": "In CodeIgniter, with the PPCI module, the .env file is loaded automatically, taking into account the contents of the $_SERVER[‘envPath’] variable, with this code:\nif (is_file($file = $_SERVER[\"envPath\"] . DIRECTORY_SEPARATOR . \".env\") && is_readable($file)) {\n    (new CodeIgniter\\Config\\DotEnv($_SERVER[\"envPath\"],\".env\"))-&gt;load();\nIn a script, to transfer the value of envPath to the variable $_SERVER and enable the .env file to be loaded, you need to add the line :\nexport envPath=\"/var/www/instances/instancename\"\nHere’s an example of how it can be used, simply to display the contents of the $_SERVER[‘envPath’] variable:\nPHP file:\n&lt;?php\necho $_SERVER[\"envPath\"].PHP_EOL;\nScript test.sh used to trigger it:\n#!/bin/bash\nexport envPath=/var/www/instances/instancename\ncd $envPath/public\nphp index.php myroute\nwhere myroute corresponds to the route to be called.\nDeclare the route in app/Config/Routes.php (don’t forget the corresponding controller), then run the script:\n./test.sh\n/var/www/instances/instancename"
  },
  {
    "objectID": "functions.html",
    "href": "functions.html",
    "title": "Functions and services",
    "section": "",
    "text": "Services allow the same instance of a class to be maintained throughout the execution of the script. They are described in Ppci\\Config\\Services.\n$monService = service ('name');\nThe first time the code is called, the class is instantiated. Then, the class instance is provided, which means that the same parameters can be used.\nThree types of service are configured: generic services, services providing configuration parameters, and views.\n\n\n\n\nCode used systematically when a page is called.\n\n\n\nClass used to store messages and then retrieve them. Two functions can be used to store them:\n\nfunction set(string $value, bool $is_error = false): stores a message. If it is an error, the message will then be displayed in red.\nfunction setSyslog($message, $is_error = false): stores a message in the system logs. In development mode, the message is also displayed on the screen\n\n\n\n\nClass used to record information in the gacl.log table. An entry can be created with the function $col-&gt;setLog($login, $module, $comment = null). The login value can be retrieved from $_SESSION[‘login’]. $module represents the name of the function or call to be logged, and $comment a particular content to be noted.\n\n\n\nClass used to set the language to be used. The labels can be modified using the setLocale($locale) function. By default, only ‘fr’ and ‘en’ are currently supported.\n\n\n\n\n\n\nClass containing all the parameters stored in the dbparam table. Parameters can be accessed using the $dbparam-&gt;params[‘parameter_name’] attribute.\nParameters are also available in the $_SESSION[‘dbparams’] variable.\n\n\n\nContains the general settings for the application (App\\Config\\App).\n\n\n\nContains identification-related settings (Ppci\\ConfigIdentificationConfig).\n\n\n\n\nThe description of the views can be consulted here.\n\n\n\n\nFunctions are loaded automatically from ppci/Helpers/ppci_helper.php.\n\ndefaultPage(): displays the application’s home page (without redirection)\ngetLineFeed(): returns the linefeed code depending on the context: web server or command line\nhtmlDecode($content): recursive function for decoding html characters (htmlspecialchars_decode())\nprintA($variable): displays the contents of a variable. For arrays, displays the contents of the array. Used for debugging\nsetlogRequest($request): writes the requested request to the gacl.log table.\ntest($var = ‘’): displays the word ‘test’ and the number of the occurrence where the function was called. If $var is filled in, displays its contents"
  },
  {
    "objectID": "functions.html#services-1",
    "href": "functions.html#services-1",
    "title": "Functions and services",
    "section": "",
    "text": "Services allow the same instance of a class to be maintained throughout the execution of the script. They are described in Ppci\\Config\\Services.\n$monService = service ('name');\nThe first time the code is called, the class is instantiated. Then, the class instance is provided, which means that the same parameters can be used.\nThree types of service are configured: generic services, services providing configuration parameters, and views.\n\n\n\n\nCode used systematically when a page is called.\n\n\n\nClass used to store messages and then retrieve them. Two functions can be used to store them:\n\nfunction set(string $value, bool $is_error = false): stores a message. If it is an error, the message will then be displayed in red.\nfunction setSyslog($message, $is_error = false): stores a message in the system logs. In development mode, the message is also displayed on the screen\n\n\n\n\nClass used to record information in the gacl.log table. An entry can be created with the function $col-&gt;setLog($login, $module, $comment = null). The login value can be retrieved from $_SESSION[‘login’]. $module represents the name of the function or call to be logged, and $comment a particular content to be noted.\n\n\n\nClass used to set the language to be used. The labels can be modified using the setLocale($locale) function. By default, only ‘fr’ and ‘en’ are currently supported.\n\n\n\n\n\n\nClass containing all the parameters stored in the dbparam table. Parameters can be accessed using the $dbparam-&gt;params[‘parameter_name’] attribute.\nParameters are also available in the $_SESSION[‘dbparams’] variable.\n\n\n\nContains the general settings for the application (App\\Config\\App).\n\n\n\nContains identification-related settings (Ppci\\ConfigIdentificationConfig).\n\n\n\n\nThe description of the views can be consulted here."
  },
  {
    "objectID": "functions.html#functions",
    "href": "functions.html#functions",
    "title": "Functions and services",
    "section": "",
    "text": "Functions are loaded automatically from ppci/Helpers/ppci_helper.php.\n\ndefaultPage(): displays the application’s home page (without redirection)\ngetLineFeed(): returns the linefeed code depending on the context: web server or command line\nhtmlDecode($content): recursive function for decoding html characters (htmlspecialchars_decode())\nprintA($variable): displays the contents of a variable. For arrays, displays the contents of the array. Used for debugging\nsetlogRequest($request): writes the requested request to the gacl.log table.\ntest($var = ‘’): displays the word ‘test’ and the number of the occurrence where the function was called. If $var is filled in, displays its contents"
  },
  {
    "objectID": "controllers.html",
    "href": "controllers.html",
    "title": "PPCI - PrototypePHP for CodeIgniter",
    "section": "",
    "text": "Controllers, the first stage in processing a route, inherit from the PpciController class. This automatically calls the initialization function function initController( RequestInterface $request, ResponseInterface $response, LoggerInterface $logger) and loads the message service and the App configuration into $this-&gt;config.\nHere is a typical implementation example:\nclass Borrower extends PpciController\n{\n    protected $lib;\n    function __construct()\n    {\n        $this-&gt;lib = new LibrariesBorrower();\n    }\n    function list()\n    {\n        return $this-&gt;lib-&gt;list();\n    }\n    function display()\n    {\n        return $this-&gt;lib-&gt;display();\n    }\n    function change()\n    {\n        return $this-&gt;lib-&gt;change();\n    }\n    function write()\n    {\n        return $this-&gt;lib-&gt;write();\n    }\n    function delete()\n    {\n        return $this-&gt;lib-&gt;delete();\n    }\n}"
  }
]