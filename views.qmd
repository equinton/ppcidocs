::: {.content-visible when-profile="french"}

# Les vues

L'envoi d'informations au navigateur fait appel à des vues, chacune étant dédiée à un type d'informations (pages web, fichiers pdf, requêtes Ajax, fichiers binaires, etc.). Elles sont disponibles sous forme de services (décrits dans `ppci/Config/Services.php`), et sont physiquement stockées dans `Ppci/Libraries/Views`.

Toutes les vues héritent de la classe `Ppci\Libraries\Views\DefaultView`, qui comprend les fonctions génériques suivantes :

- `function set($value, $variable = "")` : affecte un contenu (nommé ou non, si _variable_ est renseigné) à la vue
- `function get($variable = "")` : récupère le contenu d'une variable ou le contenu affecté
- `function encodehtml($data)` : fonction récursive d'encodage en HTML des variables
- `function send($param = "")` : déclenche l'envoi des informations. Cette fonction est systématiquement réécrite dans chaque vue.

### Affichage des pages

`$view = service ("Smarty");`

Les pages web sont générées avec le moteur de _templates_ Smarty. Les modèles sont stockés :

- d'une part dans `Ppci/Views/templates/ppci`, qui comprend toutes les pages gérées par Ppci, ainsi que la page par défaut (`main.html`)
- d'autre part dans `App/Views/templates`, pour les pages spécifiques de l'application.

Au moment du déclenchement de l'affichage, la classe va :

- encoder les variables en HTML, sauf celles qui sont référencées dans le tableau `$view->htmlVars`
- générer le jeton CSRF
- afficher les messages stockés dans la classe `Message`
- générer le menu de l'application
- rajouter divers contenus génériques, comme le titre de l'application.

#### function help()

La fonction `help(_("adresse"))` permet de générer un lien (avec une icone) qui ouvrira la page d'aide en ligne correspondant à l'adresse. Le radical de l'aide en ligne est déclaré dans la variable `App->docroot`.

Dans le modèle, il suffit d'insérer la variable `{$help}` pour que le lien soit inséré.

### Envoi d'un fichier binaire au navigateur

`$view = service ("BinaryView");`

La classe permet d'envoyer le fichier soit "en ligne", soit en "attachement". Elle peut soit envoyer un fichier à partir de son adresse dans le serveur, soit un fichier déjà ouvert (handle). Elle va également rechercher le type MIME si celui-ci n'est pas fourni.

Pour fonctionner, il est nécessaire d'indiquer des paramètres particuliers :

```php
$param = array(
        "filename" => "", /* nom du fichier tel qu'il apparaitra dans le navigateur */
        "disposition" => "attachment", /* attachment : le fichier est telecharge, inline : le fichier est affiche */
        "tmp_name" => "", /* emplacement du fichier dans le serveur */
        "content_type" => "", /* type mime */
        "is_reference" => false, /* if true, tmp_name contains the handle of the opened file */
        "handle" => 0);
setParam(?array $param);
```

### Envoi d'un fichier

`$view = service ("FileView");`

Le fonctionnement est assez semblable à _BinaryView_, à ceci près que cela ne travaille qu'à partir d'un fichier existant. le type MIME peut également être recherché automatiquement s'il n'est pas indiqué.

```php
$param = array(
        "filename" => "export.txt", /* nom du fichier tel qu'il apparaitra dans le navigateur */
        "disposition" => "attachment", /* attachment : le fichier est telecharge, inline : le fichier est affiche */
        "content_type" => "", /* type mime */
        "tmp_name" => "", /* Name of the file to send */
    );
```

### Requête Ajax

`$view = service ("AjaxView");`

Vue utilisée pour répondre à une requête Ajax. Le contenu, qui est fourni par défaut sous forme de tableau (contenu Json possible en positionnant la variable _is_json_ à _true_), est encodé en html puis transformé en chaîne JSON avant d'être envoyé au navigateur.

### Envoi d'un fichier CSV

`$view = service ("CsvView");`

Cette vue va permettre de générer un fichier CSV à partir d'un tableau (`$data[][]`). La génération et l'envoi du fichier est réalisé avec la fonction :

```
function send($filename = "", $delimiter = "")
```

Le nom du fichier peut être généré automatiquement. Le délimiteur peut être le point-virgule, la virgule ou la tabulation (indiquer _\t_). La première ligne d'entête est générée à partir des clés du premier enregistrement du tableau.

### Envoi d'un fichier JSON

`$view = service ("JsonFileView");`

La vue génère un fichier dans le navigateur, avec un fonctionnement proche de la vue Ajax. Si les données sont fournies à la classe sous forme de tableau, celles-ci sont encodées en html avant transformation en Json.

### Envoi d'un fichier PDF

`$view = service ("PdfView");`

Transfert un fichier PDF, soit directement pour être affiché, soit en fichier attaché. Même fonctionnement que la vue `FileView`.

### Envoi un contenu arbitraire au navigateur

`$view = service ("DisplayView");`

C'est une vue qui transmet au navigateur un contenu quelconque, sans encodage ni type MIME.

:::

::: {.content-visible when-profile="english"}
# Views

Sending information to the browser uses views, each dedicated to a type of information (web pages, pdf files, Ajax requests, binary files, etc.). They are available as services (described in `ppci/Config/Services.php`), and are physically stored in `Ppci/Libraries/Views`.

All views inherit from the `Ppci\Libraries\Views\DefaultView` class, which includes the following generic functions:

- `function set($value, $variable = "")`: assigns a content (named or not, if _variable_ is specified) to the view
- `function get($variable = "")`: retrieves the content of a variable or the assigned content
- `function encodehtml($data)`: recursive function for encoding variables in HTML
- `function send($param = "")`: triggers the sending of information. This function is systematically rewritten in each view.

### Displaying pages

`$view = service ("Smarty");`

Web pages are generated with the Smarty _templates_ engine. The templates are stored:

- on the one hand in `Ppci/Views/templates/ppci`, which includes all the pages managed by Ppci, as well as the default page (`main.html`)
- on the other hand in `App/Views/templates`, for the application's specific pages.

When the display is triggered, the class will:

- encode the variables in HTML, except those referenced in the `$view->htmlVars` table
- generate the CSRF token
- display the messages stored in the `Message` class
- generate the application menu
- add various generic contents, such as the application title.

#### function help()

The `help(_("address"))` function generates a link (with an icon) that will open the online help page corresponding to the address. The root of the online help is declared in the `App->docroot` variable.

In the template, simply insert the `{$help}` variable for the link to be inserted.

### Sending a binary file to the browser

`$view = service ("BinaryView");`

The class allows you to send the file either "inline" or as an "attachment". It can either send a file from its address in the server, or an already opened file (handle). It will also look for the MIME type if it is not provided.

To work, it is necessary to indicate specific parameters:

```php
$param = array(
"filename" => "", /* name of the file as it will appear in the browser */
"disposition" => "attachment", /* attachment: the file is downloaded, inline: the file is displayed */
"tmp_name" => "", /* location of the file in the server */
"content_type" => "", /* mime type */
"is_reference" => false, /* if true, tmp_name contains the handle of the opened file */
"handle" => 0);
setParam(?array $param);
```

### Sending a file

`$view = service ("FileView");`

The operation is quite similar to _BinaryView_, except that it only works from an existing file. The MIME type can also be searched automatically if it is not not specified.

```php
$param = array(
"filename" => "export.txt", /* name of the file as it will appear in the browser */
"disposition" => "attachment", /* attachment: the file is downloaded, inline: the file is displayed */
"content_type" => "", /* mime type */
"tmp_name" => "", /* Name of the file to send */
);
```

### Ajax Request

`$view = service ("AjaxView");`

View used to respond to an Ajax request. The content, which is provided by default in the form of a table (Json content possible by setting the variable _is_json_ to _true_), is encoded in html then transformed into a JSON string before being sent to the browser.

### Sending a CSV file

`$view = service ("CsvView");`

This view will generate a CSV file from a table (`$data[][]`). The generation and sending of the file is done with the function:

```
function send($filename = "", $delimiter = "")
```

The name of the file can be generated automatically. The delimiter can be a semicolon, a comma or a tab (indicate _\t_). The first header line is generated from the keys of the first record in the table.

### Sending a JSON file

`$view = service ("JsonFileView");`

The view generates a file in the browser, with a functioning close to the Ajax view. If the data is provided to the class in the form of an array, it is encoded in html before transformation into Json.

### Sending a PDF file

`$view = service ("PdfView");`

Transfers a PDF file, either directly to be displayed, or as an attached file. Same functioning as the `FileView` view.

### Sending arbitrary content to the browser

`$view = service ("DisplayView");`

This is a view that transmits any content to the browser, without encoding or MIME type.
:::