::: {.content-visible when-profile="french"}

# Migration depuis PrototypePhp

## Installer CodeIgniter et Ppci

Créez un dossier différent de celui qui contient le code initial de l'application à migrer, par exemple `app2`, puis, depuis le répertoire de niveau inférieur :

```bash
composer create-project codeigniter4/appstarter app2
cd app2
composer require app2/ppci
vendor/app2/ppci/install/install.sh
```

Éditez ensuite le fichier `.env`, et mettez à jour les paramètres nécessaires (`CI_ENVIRONMENT`, `app.baseURL` et les paramètres de connexion à la base de données).

## Créer un nouveau vhost dans Apache

Voici un exemple de configuration :

```apache
<VirtualHost *:80>
    ServerName app2.local
    ServerPath /app2.local
    RewriteEngine On
    RewriteRule ^ https://app2.local%{REQUEST_URI} [R]
</VirtualHost>
<VirtualHost *:443>
    ServerName app2.local
    ServerPath /app2.local
    SSLEngine on
    SSLCertificateFile	/etc/ssl/certs/server.crt
    SSLCertificateKeyFile /etc/ssl/private/server.key
    SSLCACertificateFile /etc/ssl/certs/cacert.crt
    DocumentRoot /var/www/app2/public 
</VirtualHost>
<Directory /var/www/app2/public>
    Options FollowSymLinks MultiViews
    Require all granted
    AllowOverride all
    RewriteEngine On
    RewriteBase /
    RewriteCond "/%{REQUEST_FILENAME}" !-f
    RewriteCond "/%{REQUEST_FILENAME}" !-d
    RewriteRule "(.*)" "/index.php?$1" [PT,QSA]
</Directory>
```

## Mettre à jour la base de données

Éditez le fichier `vendor/equinton/ppci/migration/updatedb.sql`, et vérifiez la première ligne (_set search\_path_), en remplaçant _app_ par le nom du schéma contenant les données.

Exécutez ensuite le fichier sql.

## Mettre à niveau l'affichage

### Menu

Éditez le fichier `app/Config/menu.xml`, et rajoutez les entrées nécessaires.

### Ajouter les modèles Smarty

Recopiez les modèles Smarty depuis `display/templates` dans `app/Views/templates` en conservant l'organisation en sous-dossiers, à l'exception des fichiers à la racine et du sous-dossier _framework_.

Dans ce dossier, remplacez tous les libellés `</form>` par `{$csrf}</form>` pour ajouter le jeton CSRF dans les formulaires.

Modifiez également toutes les actions des formulaires, pour qu'ils aient cette forme :

```html
<form class="form-horizontal" id="formName" method="post" action="moduleWrite">
<input type="hidden" name="moduleBase" value="module">
```
Le champ `action` peut être supprimé. Par contre, le champ `moduleBase` doit être conservé : il est utilisé pour créer l'action `moduleDelete` par l'intermédiaire du script javascript dans `main_js.tpl`. 
Toutefois, si les modifications ne sont pas réalisées, le script créera automatiquement la bonne action à partir des champs `moduleBase` et `action` lors de l'envoi du formulaire.

## Ajouter un filtre pour les opérations génériques au démarrage

- Ajouter un filtre pour réaliser les opérations décrites dans `modules/common.php` ;
- renseigner le cas échéant la classe `App\Libraries\Postlogin`, pour réaliser les opérations spécifiques après connexion. 

## Réécriture des modèles

Recopier les fichiers depuis `modules/classes` vers `app/Models`.

### Transformations globales

Elles peuvent être effectuées par rechercher/remplacer.

- remplacer :
    - `<?php` par `<?php namespace App\Models;use Ppci\Models\PpciModel;`, avec sauts de ligne ;
    - `extends ObjetBDD` par `extends PpciModel` ;
    - `(public function __construct().*)` par `public function __construct()`, en cochant _expression régulière_ ;
    - `$this->colonnes` par `$this->fields` ;
    - `(parent::__construct().*)` par `parent::__construct()`, en cochant _expression régulière_ ;
- supprimer :
    - `$this->id_auto = 1;`
    - `$param["fullDescription"] = 1;`

### Transformations individuelles

- renommer le nom du fichier, par exemple `espece.class.php` en `Espece.php` ;
- dans les requêtes SQL, modifier les variables en rajoutant : à la fin : `:id` doit devenir `:id:` ;
- pour les tables portant des données géographiques (champs avec type=4), modifier les requêtes ou créer les fonctions `lire()` pour ajouter `st_astext()` pour les champs concernés ;

## Réécriture des librairies

Recopier l'ensemble des modules dans `app/Libraries`. Il faut les transformer en classes.

### Transformations globales

Remplacer :

- `<?php` par :

```php
<?php 
namespace App\Libraries;

use Ppci\Libraries\PpciException;
use Ppci\Libraries\PpciLibrary;

class Xx extends PpciLibrary { 
    /**
	 * @var 
	 */
	protected $dataclass;

    function __construct()
    {
        parent::__construct();
        $this->dataClass = new \App\Models\XXX();
        $keyName = "xxx_id";
        if (isset($_REQUEST[$keyName])) {
            $this->id = $_REQUEST[$keyName];
        }
    }
```

- `dataRead($dataClass,` par `$this->dataRead(`
- `dataWrite($dataClass,` par `$this->dataWrite(`
- `dataDelete($dataClass,` par `$this->dataDelete(`
- `case "list":` par `function list(){$vue=service('Smarty');` (saut de ligne)
- `case "display":` par `function display(){$vue=service('Smarty');` (saut de ligne)
- `case "change":` par `function change(){$vue=service('Smarty');` (saut de ligne)
- `case "write":` par `function write(){`
- `case "delete":` par `function delete(){`
- `case "` par `function `
- `":` par `() {`
- `break;` par `}` : fermeture des fonctions
- `$dataclass` par `$this->dataClass`
- `$id` par `$this->id`
- `$vue` par `$this->vue`
- `$this->dataDelete($this->id);` par 

```php
        try {
            $this->dataDelete($this->id);
            return $this->list();
        } catch (PpciException $e) {
            return $this->change();
        }
```

- `$message->` par `$this->message->`

et suppression de : 

- `switch ($t_module["param"]) {` 
- `$bdd, $ObjetBDDParam`

### Modifications individuelles

- renommer le fichier en le commençant par une majuscule
- Modifier la fonction `__construct()` pour charger la bonne classe et le bon identifiant
- définir les vues autres que Smarty dans les fonctions
- définir le retour attendu de chaque fonction :
    - soit ajouter la commande `return $this->vue->send();` pour déclencher l'affichage
    - soit renvoyer vers une des fonctions de la classe : `return $this->display();`
    - soit renvoyer vers la page d'accueil : `defaultPage();`

## Générer les routes et les droits nécessaires pour exécuter les modules

Exécutez la commande suivante :

```bash
php vendor/equinton/ppci/migration/actionsParse.php ../app/param/actions.xml
```

Le script va lire l'ancien fichier `actions.xml`, et va préparer deux contenus :

- le premier est destiné à être inséré dans la classe `app\Config\Rights`, et contient la liste des droits nécessaires pour exécuter un module
- le second contient un prototype des routes pour exécuter les modules. Le contenu doit être inséré dans `app/Config/Routes.php`.

## Renommer le droit "gestion" en "manage"

Utilisez une fonction de recherche automatique pour remplacer "gestion" par "manage".

## Ajouter les contrôleurs

Lancez le script :

```bash
php vendor/equinton/ppci/migration/generateController.php app/Config/Routes.php app/Controllers/
```

Le programme va lire les routes définies, puis créer les contrôleurs correspondants, en regroupant les routes par module. 
Les contrôleurs intègrent lles appels aux fonctions de la librairie correspondante (même nom).



:::
